var searchIndex = {};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["cpp"] = {"doc":"","items":[[5,"mk_macro","cpp","",null,{"inputs":[{"name":"str"},{"name":"f"}],"output":{"name":"namedsyntaxextension"}}],[5,"build","","",null,{"inputs":[{"name":"p"},{"name":"str"},{"name":"f"}],"output":null}],[14,"cpp","","",null,null]],"paths":[]};
searchIndex["gcc"] = {"doc":"A library for build scripts to compile custom C code","items":[[3,"Config","gcc","Extra configuration to pass to gcc.",null,null],[3,"Tool","","Configuration used to represent an invocation of a C compiler.",null,null],[5,"compile_library","","Compile a library from the given set of input C files.",null,null],[0,"windows_registry","","A helper module to probe the Windows Registry when looking for windows-specific tools.",null,null],[5,"find","gcc::windows_registry","Attempts to find a tool within an MSVC installation using the Windows registry as a point to search from.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[5,"find_tool","","Similar to the `find` function above, this function will attempt the same operation (finding a MSVC tool in a local install) but instead returns a `Tool` which may be introspected.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[11,"new","gcc","Construct a new instance of a blank set of configuration.",0,{"inputs":[],"output":{"name":"config"}}],[11,"include","","Add a directory to the `-I` or include path for headers",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"config"}}],[11,"define","","Specify a `-D` variable with an optional value.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"}],"output":{"name":"config"}}],[11,"object","","Add an arbitrary object file to link in",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"config"}}],[11,"flag","","Add an arbitrary flag to the invocation of the compiler",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"config"}}],[11,"file","","Add a file which will be compiled",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"config"}}],[11,"cpp","","Set C++ support.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"config"}}],[11,"cpp_link_stdlib","","Set the standard library to link against when compiling with C++ support.",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"config"}}],[11,"cpp_set_stdlib","","Force the C++ compiler to use the specified standard library.",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"config"}}],[11,"target","","Configures the target this configuration will be compiling for.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"config"}}],[11,"host","","Configures the host assumed by this configuration.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"config"}}],[11,"opt_level","","Configures the optimization level of the generated object files.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"config"}}],[11,"opt_level_str","","Configures the optimization level of the generated object files.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"config"}}],[11,"debug","","Configures whether the compiler will emit debug information when generating object files.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"config"}}],[11,"out_dir","","Configures the output directory where all object files and static libraries will be located.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"config"}}],[11,"compiler","","Configures the compiler to be used to produce output.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"config"}}],[11,"archiver","","Configures the tool used to assemble archives.",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"config"}}],[11,"cargo_metadata","","Define whether metadata should be emitted for cargo allowing it to automatically link the binary. Defaults to `true`.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"config"}}],[11,"pic","","Configures whether the compiler will emit position independent code.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"config"}}],[11,"compile","","Run the compiler, generating the file `output`",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"expand","","Run the compiler, returning the macro-expanded version of the input files.",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_compiler","","Get the compiler that's in use for this configuration.",0,{"inputs":[{"name":"self"}],"output":{"name":"tool"}}],[11,"to_command","","Converts this compiler into a `Command` that's ready to be run.",1,{"inputs":[{"name":"self"}],"output":{"name":"command"}}],[11,"path","","Returns the path for this compiler.",1,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"args","","Returns the default set of arguments to the compiler needed to produce executables for the target this compiler generates.",1,null],[11,"env","","Returns the set of environment variables needed for this compiler to operate.",1,null]],"paths":[[3,"Config"],[3,"Tool"]]};
searchIndex["hllvm"] = {"doc":"LLVM bindings for Rust","items":[[0,"subtype","hllvm","Support code for the `Deref`-based C++ inheritance tree support.",null,null],[8,"Subtype","hllvm::subtype","A trait for things that can be upcasted.",null,null],[16,"Parent","","The parent of the type.",0,null],[10,"from_parent","","Creates a value of this type given the parent type.",0,null],[10,"upcast_ref","","",0,null],[10,"upcast_mut","","",0,null],[10,"upcast","","",0,null],[0,"ir","hllvm","The LLVM intermediate representation.",null,null],[4,"Linkage","hllvm::ir","An enumeration for the kinds of linkage for global values.",null,null],[13,"External","","Externally visible function.",1,null],[13,"AvailableExternally","","Available for inspection, not emission.",1,null],[13,"LinkOnceAny","","Keep one copy of function when linking (inline).",1,null],[13,"LinkOnceODR","","Same as `LinkOnceAny`, but only replaced by something equivalent.",1,null],[13,"WeakAny","","Keep one copy of named function when linking (weak).",1,null],[13,"WeakODR","","Same as `WeakAny`, but only replaced by something equivalent.",1,null],[13,"Appending","","Special purpose, only applies to global arrays.",1,null],[13,"Internal","","Rename collisions when linking (static functions).",1,null],[13,"Private","","Like `Internal`, but omit from symbol table.",1,null],[13,"ExternalWeak","","",1,null],[13,"Common","","Tentative definitions.",1,null],[4,"SynchronizationScope","","Synchronization scope.",null,null],[13,"SingleThread","","",2,null],[13,"CrossThread","","",2,null],[4,"AtomicOrdering","","Atomic ordering.",null,null],[13,"NotAtomic","","",3,null],[13,"Unordered","","",3,null],[13,"Monotonic","","",3,null],[13,"Acquire","","",3,null],[13,"Release","","",3,null],[13,"AcquireRelease","","",3,null],[13,"SequentiallyConsistent","","",3,null],[4,"ThreadLocalMode","","Thread local mode.",null,null],[13,"NotThreadLocal","","",4,null],[13,"GeneralDynamic","","",4,null],[13,"LocalDynamic","","",4,null],[13,"InitialExec","","",4,null],[13,"LocalExec","","",4,null],[4,"FloatPredicateKind","","Float predicate kind.",null,null],[13,"False","","",5,null],[13,"OrderedAndEqual","","",5,null],[13,"OrderedGreaterThan","","",5,null],[13,"OrderedGreaterThanOrEqual","","",5,null],[13,"OrderedLessThan","","",5,null],[13,"OrderedLessThanOrEqual","","",5,null],[13,"OrderedUnequal","","",5,null],[13,"Ordered","","",5,null],[13,"Unordered","","",5,null],[13,"UnorderedOrEqual","","",5,null],[13,"UnorderedOrGreaterThan","","",5,null],[13,"UnorderedOrGreaterThanOrEqual","","",5,null],[13,"UnorderedOrLessThan","","",5,null],[13,"UnorderedOrLessThanOrEqual","","",5,null],[13,"UnorderedOrNotEqual","","",5,null],[13,"True","","",5,null],[4,"IntegerPredicateKind","","Integer predicate kind.",null,null],[13,"Equal","","",6,null],[13,"NotEqual","","",6,null],[13,"UnsignedGreaterThan","","",6,null],[13,"UnsignedGreaterThanOrEqual","","",6,null],[13,"UnsignedLessThan","","",6,null],[13,"UnsignedLessThanOrEqual","","",6,null],[13,"SignedGreaterThan","","",6,null],[13,"SignedGreaterThanOrEqual","","",6,null],[13,"SignedLessThan","","",6,null],[13,"SignedLessThanOrEqual","","",6,null],[4,"AtomicBinaryOp","","Integer predicate kind.",null,null],[13,"Xchg","","",7,null],[13,"Add","","",7,null],[13,"Sub","","",7,null],[13,"And","","",7,null],[13,"Nand","","",7,null],[13,"Or","","",7,null],[13,"Xor","","",7,null],[13,"Max","","",7,null],[13,"Min","","",7,null],[13,"UMax","","",7,null],[13,"UMin","","",7,null],[0,"macros","","Useful macros.",null,null],[0,"context","","The main LLVM context type.",null,null],[3,"Context","hllvm::ir::context","An LLVM context.",null,null],[11,"new","","Creates a new context.",8,{"inputs":[],"output":{"name":"self"}}],[11,"from_inner","","",8,{"inputs":[{"name":"contextref"}],"output":{"name":"self"}}],[11,"inner","","",8,{"inputs":[{"name":"self"}],"output":{"name":"contextref"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[0,"module","hllvm::ir","The module-related code.",null,null],[3,"Module","hllvm::ir::module","A group of functions and globals representing a single compilation unit. `'ctx` - The lifetime of the context.",null,null],[11,"new","","Creates a new module.",9,{"inputs":[{"name":"str"},{"name":"context"}],"output":{"name":"self"}}],[11,"get_or_insert_function","","",9,null],[11,"add_global","","Adds a global variable to the module.",9,{"inputs":[{"name":"self"},{"name":"globalvariable"}],"output":null}],[11,"remove_global","","Removes a global variable from the module.",9,{"inputs":[{"name":"self"},{"name":"globalvariable"}],"output":null}],[11,"add_function","","Adds a function to the module.",9,{"inputs":[{"name":"self"},{"name":"function"}],"output":null}],[11,"remove_function","","Removes a function from the module.",9,{"inputs":[{"name":"self"},{"name":"function"}],"output":null}],[11,"dump","","Dumps the module to standard error.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"from_inner","","",9,{"inputs":[{"name":"moduleref"}],"output":{"name":"self"}}],[11,"inner","","",9,{"inputs":[{"name":"self"}],"output":{"name":"moduleref"}}],[0,"ty","hllvm::ir","Definitions for all of the different types.",null,null],[3,"Type","hllvm::ir::ty","An LLVM type.",null,null],[0,"func","","The `Function` type.",null,null],[3,"FunctionType","hllvm::ir::ty::func","A type representing a function.",null,null],[11,"new","","Gets a function type.",10,null],[11,"from_parent","","",10,null],[11,"upcast_ref","","",10,null],[11,"upcast_mut","","",10,null],[11,"upcast","","",10,null],[11,"as_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"deref","","",10,null],[11,"deref_mut","","",10,null],[0,"integer","hllvm::ir::ty","Integer type.",null,null],[3,"IntegerType","hllvm::ir::ty::integer","A type representing a function.",null,null],[11,"new","","Gets an integer type.",11,{"inputs":[{"name":"usize"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_parent","","",11,null],[11,"upcast_ref","","",11,null],[11,"upcast_mut","","",11,null],[11,"upcast","","",11,null],[11,"as_ref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"deref","","",11,null],[11,"deref_mut","","",11,null],[0,"composite","hllvm::ir::ty","Composite types.",null,null],[3,"CompositeType","hllvm::ir::ty::composite","A composite type.",null,null],[0,"strukt","","",null,null],[3,"StructType","hllvm::ir::ty::composite::strukt","A type representing a structure.",null,null],[11,"new","","",12,null],[11,"from_parent","","",12,null],[11,"upcast_ref","","",12,null],[11,"upcast_mut","","",12,null],[11,"upcast","","",12,null],[11,"as_ref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"compositetype"}}],[11,"deref","","",12,null],[11,"deref_mut","","",12,null],[0,"seq","hllvm::ir::ty::composite","Sequential types.",null,null],[3,"SequentialType","hllvm::ir::ty::composite::seq","A sequential type.",null,null],[0,"array","","The `ArrayType` struct.",null,null],[3,"ArrayType","hllvm::ir::ty::composite::seq::array","An array type.",null,null],[11,"new","","Creates a new array type.",13,{"inputs":[{"name":"type"},{"name":"u64"}],"output":{"name":"self"}}],[11,"from_parent","","",13,null],[11,"upcast_ref","","",13,null],[11,"upcast_mut","","",13,null],[11,"upcast","","",13,null],[11,"as_ref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"sequentialtype"}}],[11,"deref","","",13,null],[11,"deref_mut","","",13,null],[0,"pointer","hllvm::ir::ty::composite::seq","The pointer type.",null,null],[3,"PointerType","hllvm::ir::ty::composite::seq::pointer","A pointer.",null,null],[11,"new","","Creates a new pointer type.",14,{"inputs":[{"name":"type"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_parent","","",14,null],[11,"upcast_ref","","",14,null],[11,"upcast_mut","","",14,null],[11,"upcast","","",14,null],[11,"as_ref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"sequentialtype"}}],[11,"deref","","",14,null],[11,"deref_mut","","",14,null],[0,"vector","hllvm::ir::ty::composite::seq","The vector type.",null,null],[3,"VectorType","hllvm::ir::ty::composite::seq::vector","A vector type.",null,null],[11,"new","","Creates a new vector type.",15,{"inputs":[{"name":"type"},{"name":"u64"}],"output":{"name":"self"}}],[11,"from_parent","","",15,null],[11,"upcast_ref","","",15,null],[11,"upcast_mut","","",15,null],[11,"upcast","","",15,null],[11,"as_ref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sequentialtype"}}],[11,"deref","","",15,null],[11,"deref_mut","","",15,null],[11,"from_parent","hllvm::ir::ty::composite::seq","",16,null],[11,"upcast_ref","","",16,null],[11,"upcast_mut","","",16,null],[11,"upcast","","",16,null],[11,"as_ref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"compositetype"}}],[11,"deref","","",16,null],[11,"deref_mut","","",16,null],[11,"from_parent","hllvm::ir::ty::composite","",17,null],[11,"upcast_ref","","",17,null],[11,"upcast_mut","","",17,null],[11,"upcast","","",17,null],[11,"as_ref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"deref","","",17,null],[11,"deref_mut","","",17,null],[11,"void","hllvm::ir::ty","Gets the `void` type.",18,{"inputs":[{"name":"context"}],"output":{"name":"self"}}],[11,"dump","","Dump the type to standard error.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"from_inner","","",18,{"inputs":[{"name":"typeref"}],"output":{"name":"self"}}],[11,"inner","","",18,{"inputs":[{"name":"self"}],"output":{"name":"typeref"}}],[0,"attribute","hllvm::ir","An attribute which can be placed on certain IR data structures.",null,null],[3,"Attribute","hllvm::ir::attribute","An LLVM attribute. `'ctx` - the lifetime of the context.",null,null],[11,"integer","","Creates a new integer-valued attribute. FIXME: create an enum for `kind`",19,{"inputs":[{"name":"u32"},{"name":"u64"},{"name":"context"}],"output":{"name":"self"}}],[11,"string","","Creates a new string-valued attribute.",19,{"inputs":[{"name":"str"},{"name":"str"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_inner","","",19,{"inputs":[{"name":"attributeref"}],"output":{"name":"self"}}],[11,"inner","","",19,{"inputs":[{"name":"self"}],"output":{"name":"attributeref"}}],[0,"value","hllvm::ir","",null,null],[3,"Value","hllvm::ir::value","An LLVM value.",null,null],[0,"block","","",null,null],[3,"Block","hllvm::ir::value::block","A basic block.",null,null],[11,"new","","Creates a new basic block.",20,{"inputs":[{"name":"context"}],"output":{"name":"self"}}],[11,"append","","Adds an instruction to a basic block.",20,{"inputs":[{"name":"self"},{"name":"instruction"}],"output":null}],[11,"from_parent","","",20,null],[11,"upcast_ref","","",20,null],[11,"upcast_mut","","",20,null],[11,"upcast","","",20,null],[11,"as_ref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"deref","","",20,null],[11,"deref_mut","","",20,null],[0,"argument","hllvm::ir::value","",null,null],[3,"Argument","hllvm::ir::value::argument","A function argument",null,null],[11,"from_parent","","",21,null],[11,"upcast_ref","","",21,null],[11,"upcast_mut","","",21,null],[11,"upcast","","",21,null],[11,"as_ref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"deref","","",21,null],[11,"deref_mut","","",21,null],[0,"inlineasm","hllvm::ir::value","",null,null],[3,"InlineAsm","hllvm::ir::value::inlineasm","A piece of inline assembly.",null,null],[11,"from_parent","","",22,null],[11,"upcast_ref","","",22,null],[11,"upcast_mut","","",22,null],[11,"upcast","","",22,null],[11,"as_ref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"deref","","",22,null],[11,"deref_mut","","",22,null],[0,"user","hllvm::ir::value","",null,null],[3,"User","hllvm::ir::value::user","",null,null],[0,"inst","","",null,null],[3,"Instruction","hllvm::ir::value::user::inst","",null,null],[0,"atomiccmp","","",null,null],[3,"AtomicCmpXchgInst","hllvm::ir::value::user::inst::atomiccmp","",null,null],[11,"new","","",23,{"inputs":[{"name":"value"},{"name":"value"},{"name":"value"},{"name":"atomicordering"},{"name":"atomicordering"},{"name":"synchronizationscope"}],"output":{"name":"self"}}],[11,"from_parent","","",23,null],[11,"upcast_ref","","",23,null],[11,"upcast_mut","","",23,null],[11,"upcast","","",23,null],[11,"as_ref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",23,null],[11,"deref_mut","","",23,null],[0,"atomicrmw","hllvm::ir::value::user::inst","",null,null],[3,"AtomicRMWInst","hllvm::ir::value::user::inst::atomicrmw","",null,null],[11,"new","","",24,{"inputs":[{"name":"atomicbinaryop"},{"name":"value"},{"name":"value"},{"name":"atomicordering"},{"name":"synchronizationscope"}],"output":{"name":"self"}}],[11,"from_parent","","",24,null],[11,"upcast_ref","","",24,null],[11,"upcast_mut","","",24,null],[11,"upcast","","",24,null],[11,"as_ref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",24,null],[11,"deref_mut","","",24,null],[0,"store","hllvm::ir::value::user::inst","",null,null],[3,"StoreInst","hllvm::ir::value::user::inst::store","A instruction which stores a value to a pointer.",null,null],[11,"new","","Creates a new store instruction.",25,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"self"}}],[11,"new_volatile","","Creates a new volatile store instruction.",25,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"self"}}],[11,"new_generic","","Create a new store instruction.",25,{"inputs":[{"name":"value"},{"name":"value"},{"name":"bool"},{"name":"u32"},{"name":"atomicordering"},{"name":"synchronizationscope"}],"output":{"name":"self"}}],[11,"from_parent","","",25,null],[11,"upcast_ref","","",25,null],[11,"upcast_mut","","",25,null],[11,"upcast","","",25,null],[11,"as_ref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",25,null],[11,"deref_mut","","",25,null],[0,"gep","hllvm::ir::value::user::inst","",null,null],[3,"GetElementPtrInst","hllvm::ir::value::user::inst::gep","An instruction which can read elements from a pointer.",null,null],[11,"new","","Creates a new GEP instruction.",26,null],[11,"inbounds","","Creates a new in-bounds GEP instruction.",26,null],[11,"new_generic","","Creates a new GEP instruction.",26,null],[11,"from_parent","","",26,null],[11,"upcast_ref","","",26,null],[11,"upcast_mut","","",26,null],[11,"upcast","","",26,null],[11,"as_ref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",26,null],[11,"deref_mut","","",26,null],[0,"extract_elem","hllvm::ir::value::user::inst","",null,null],[3,"ExtractElementInst","hllvm::ir::value::user::inst::extract_elem","An instruction which can extract an element from a vector.",null,null],[11,"new","","Creates a new extract element instruction.",27,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"self"}}],[11,"from_parent","","",27,null],[11,"upcast_ref","","",27,null],[11,"upcast_mut","","",27,null],[11,"upcast","","",27,null],[11,"as_ref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",27,null],[11,"deref_mut","","",27,null],[0,"insert_elem","hllvm::ir::value::user::inst","",null,null],[3,"InsertElementInst","hllvm::ir::value::user::inst::insert_elem","An instruction which can insert an element into a vector.",null,null],[11,"new","","Creates a new insert element instruction.",28,{"inputs":[{"name":"value"},{"name":"value"},{"name":"value"}],"output":{"name":"self"}}],[11,"from_parent","","",28,null],[11,"upcast_ref","","",28,null],[11,"upcast_mut","","",28,null],[11,"upcast","","",28,null],[11,"as_ref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",28,null],[11,"deref_mut","","",28,null],[0,"insert_value","hllvm::ir::value::user::inst","",null,null],[3,"InsertValueInst","hllvm::ir::value::user::inst::insert_value","An instruction which can insert an value into an aggregate value.",null,null],[11,"new","","Creates a new insert value instruction.",29,null],[11,"from_parent","","",29,null],[11,"upcast_ref","","",29,null],[11,"upcast_mut","","",29,null],[11,"upcast","","",29,null],[11,"as_ref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",29,null],[11,"deref_mut","","",29,null],[0,"select","hllvm::ir::value::user::inst","",null,null],[3,"SelectInst","hllvm::ir::value::user::inst::select","An instruction which can selects one of two values based on a condition.",null,null],[11,"new","","Creates a new select instruction.",30,{"inputs":[{"name":"value"},{"name":"value"},{"name":"value"}],"output":{"name":"self"}}],[11,"from_parent","","",30,null],[11,"upcast_ref","","",30,null],[11,"upcast_mut","","",30,null],[11,"upcast","","",30,null],[11,"as_ref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",30,null],[11,"deref_mut","","",30,null],[0,"fence","hllvm::ir::value::user::inst","",null,null],[3,"FenceInst","hllvm::ir::value::user::inst::fence","An atomic fence instruction.",null,null],[11,"new","","Creates a new atomic fence instruction.",31,{"inputs":[{"name":"context"},{"name":"atomicordering"},{"name":"synchronizationscope"}],"output":{"name":"self"}}],[11,"from_parent","","",31,null],[11,"upcast_ref","","",31,null],[11,"upcast_mut","","",31,null],[11,"upcast","","",31,null],[11,"as_ref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",31,null],[11,"deref_mut","","",31,null],[0,"landingpad","hllvm::ir::value::user::inst","",null,null],[3,"LandingPadInst","hllvm::ir::value::user::inst::landingpad","A landing pad.",null,null],[11,"new","","Creates a landing pad instruction.",32,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"from_parent","","",32,null],[11,"upcast_ref","","",32,null],[11,"upcast_mut","","",32,null],[11,"upcast","","",32,null],[11,"as_ref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",32,null],[11,"deref_mut","","",32,null],[0,"binop","hllvm::ir::value::user::inst","",null,null],[3,"BinaryOperatorInst","hllvm::ir::value::user::inst::binop","An binary operator instruction.",null,null],[11,"new","","Creates a new extract element instruction.",33,{"inputs":[{"name":"binaryopcode"},{"name":"value"},{"name":"value"}],"output":{"name":"self"}}],[11,"new_nsw","","Creates a new 'no signed wrap' binary op.",33,{"inputs":[{"name":"binaryopcode"},{"name":"value"},{"name":"value"}],"output":{"name":"self"}}],[11,"new_nuw","","Creates a new 'no unsigned wrap' binary op.",33,{"inputs":[{"name":"binaryopcode"},{"name":"value"},{"name":"value"}],"output":{"name":"self"}}],[11,"new_exact","","Creates a new 'exact' binary op.",33,{"inputs":[{"name":"binaryopcode"},{"name":"value"},{"name":"value"}],"output":{"name":"self"}}],[11,"from_parent","","",33,null],[11,"upcast_ref","","",33,null],[11,"upcast_mut","","",33,null],[11,"upcast","","",33,null],[11,"as_ref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",33,null],[11,"deref_mut","","",33,null],[0,"catchpad","hllvm::ir::value::user::inst","",null,null],[3,"CatchPadInst","hllvm::ir::value::user::inst::catchpad","A catch pad.",null,null],[11,"new","","Creates a catch pad instruction.",34,null],[11,"from_parent","","",34,null],[11,"upcast_ref","","",34,null],[11,"upcast_mut","","",34,null],[11,"upcast","","",34,null],[11,"as_ref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",34,null],[11,"deref_mut","","",34,null],[0,"cleanuppad","hllvm::ir::value::user::inst","",null,null],[3,"CleanupPadInst","hllvm::ir::value::user::inst::cleanuppad","A cleanup pad.",null,null],[11,"new","","Creates a cleanup pad instruction.",35,null],[11,"from_parent","","",35,null],[11,"upcast_ref","","",35,null],[11,"upcast_mut","","",35,null],[11,"upcast","","",35,null],[11,"as_ref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[0,"call","hllvm::ir::value::user::inst","",null,null],[3,"CallInst","hllvm::ir::value::user::inst::call","A instruction which calls a fuction.",null,null],[11,"new","","Creates a new call instruction.",36,null],[11,"from_parent","","",36,null],[11,"upcast_ref","","",36,null],[11,"upcast_mut","","",36,null],[11,"upcast","","",36,null],[11,"as_ref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",36,null],[11,"deref_mut","","",36,null],[0,"cmp","hllvm::ir::value::user::inst","",null,null],[3,"CmpInst","hllvm::ir::value::user::inst::cmp","",null,null],[0,"fcmp","","",null,null],[3,"FCmpInst","hllvm::ir::value::user::inst::cmp::fcmp","Integer comparison.",null,null],[11,"new","","Creates a new integer comparision instruction.",37,{"inputs":[{"name":"floatpredicatekind"},{"name":"value"},{"name":"value"}],"output":{"name":"self"}}],[11,"from_parent","","",37,null],[11,"upcast_ref","","",37,null],[11,"upcast_mut","","",37,null],[11,"upcast","","",37,null],[11,"as_ref","","",37,{"inputs":[{"name":"self"}],"output":{"name":"cmpinst"}}],[11,"deref","","",37,null],[11,"deref_mut","","",37,null],[0,"icmp","hllvm::ir::value::user::inst::cmp","",null,null],[3,"ICmpInst","hllvm::ir::value::user::inst::cmp::icmp","Integer comparison.",null,null],[11,"new","","Creates a new integer comparision instruction.",38,{"inputs":[{"name":"integerpredicatekind"},{"name":"value"},{"name":"value"}],"output":{"name":"self"}}],[11,"from_parent","","",38,null],[11,"upcast_ref","","",38,null],[11,"upcast_mut","","",38,null],[11,"upcast","","",38,null],[11,"as_ref","","",38,{"inputs":[{"name":"self"}],"output":{"name":"cmpinst"}}],[11,"deref","","",38,null],[11,"deref_mut","","",38,null],[11,"from_parent","hllvm::ir::value::user::inst::cmp","",39,null],[11,"upcast_ref","","",39,null],[11,"upcast_mut","","",39,null],[11,"upcast","","",39,null],[11,"as_ref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",39,null],[11,"deref_mut","","",39,null],[0,"terminator","hllvm::ir::value::user::inst","",null,null],[3,"TerminatorInst","hllvm::ir::value::user::inst::terminator","",null,null],[0,"br","","",null,null],[3,"BranchInst","hllvm::ir::value::user::inst::terminator::br","A conditional or unconditional branch.",null,null],[11,"unconditional","","Creates an unconditional branch.",40,{"inputs":[{"name":"block"}],"output":{"name":"self"}}],[11,"conditional","","Creates a conditional branch.",40,{"inputs":[{"name":"value"},{"name":"block"},{"name":"option"}],"output":{"name":"self"}}],[11,"from_parent","","",40,null],[11,"upcast_ref","","",40,null],[11,"upcast_mut","","",40,null],[11,"upcast","","",40,null],[11,"as_ref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"terminatorinst"}}],[11,"deref","","",40,null],[11,"deref_mut","","",40,null],[0,"catchreturn","hllvm::ir::value::user::inst::terminator","",null,null],[3,"CatchReturnInst","hllvm::ir::value::user::inst::terminator::catchreturn","",null,null],[11,"new","","Creates a new catch return instruction.",41,{"inputs":[{"name":"catchpadinst"},{"name":"block"}],"output":{"name":"self"}}],[11,"from_parent","","",41,null],[11,"upcast_ref","","",41,null],[11,"upcast_mut","","",41,null],[11,"upcast","","",41,null],[11,"as_ref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"terminatorinst"}}],[11,"deref","","",41,null],[11,"deref_mut","","",41,null],[0,"catchswitch","hllvm::ir::value::user::inst::terminator","",null,null],[3,"CatchSwitchInst","hllvm::ir::value::user::inst::terminator::catchswitch","",null,null],[11,"new","","Creates a new catch return instruction.",42,{"inputs":[{"name":"value"},{"name":"block"}],"output":{"name":"self"}}],[11,"add_handler","","",42,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"from_parent","","",42,null],[11,"upcast_ref","","",42,null],[11,"upcast_mut","","",42,null],[11,"upcast","","",42,null],[11,"as_ref","","",42,{"inputs":[{"name":"self"}],"output":{"name":"terminatorinst"}}],[11,"deref","","",42,null],[11,"deref_mut","","",42,null],[0,"cleanupreturn","hllvm::ir::value::user::inst::terminator","",null,null],[3,"CleanupReturnInst","hllvm::ir::value::user::inst::terminator::cleanupreturn","",null,null],[11,"new","","Creates a new cleanup return instruction.",43,{"inputs":[{"name":"cleanuppadinst"},{"name":"block"}],"output":{"name":"self"}}],[11,"from_parent","","",43,null],[11,"upcast_ref","","",43,null],[11,"upcast_mut","","",43,null],[11,"upcast","","",43,null],[11,"as_ref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"terminatorinst"}}],[11,"deref","","",43,null],[11,"deref_mut","","",43,null],[0,"indirectbr","hllvm::ir::value::user::inst::terminator","",null,null],[3,"IndirectBrInst","hllvm::ir::value::user::inst::terminator::indirectbr","An indirect branch.",null,null],[11,"new","","Creates a new indirect branch.",44,null],[11,"add_destination","","Adds a possible destination block.",44,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"from_parent","","",44,null],[11,"upcast_ref","","",44,null],[11,"upcast_mut","","",44,null],[11,"upcast","","",44,null],[11,"as_ref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"terminatorinst"}}],[11,"deref","","",44,null],[11,"deref_mut","","",44,null],[0,"invoke","hllvm::ir::value::user::inst::terminator","",null,null],[3,"InvokeInst","hllvm::ir::value::user::inst::terminator::invoke","A invoke instruction.",null,null],[11,"new","","Creates a new invoke instruction.",45,null],[11,"from_parent","","",45,null],[11,"upcast_ref","","",45,null],[11,"upcast_mut","","",45,null],[11,"upcast","","",45,null],[11,"as_ref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"terminatorinst"}}],[11,"deref","","",45,null],[11,"deref_mut","","",45,null],[0,"resume","hllvm::ir::value::user::inst::terminator","",null,null],[3,"ResumeInst","hllvm::ir::value::user::inst::terminator::resume","Resume the propogation of an exception.",null,null],[11,"new","","Creates a new resume instruction.",46,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"from_parent","","",46,null],[11,"upcast_ref","","",46,null],[11,"upcast_mut","","",46,null],[11,"upcast","","",46,null],[11,"as_ref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"terminatorinst"}}],[11,"deref","","",46,null],[11,"deref_mut","","",46,null],[0,"ret","hllvm::ir::value::user::inst::terminator","",null,null],[3,"ReturnInst","hllvm::ir::value::user::inst::terminator::ret","",null,null],[11,"new","","",47,{"inputs":[{"name":"option"},{"name":"context"}],"output":{"name":"self"}}],[11,"from_parent","","",47,null],[11,"upcast_ref","","",47,null],[11,"upcast_mut","","",47,null],[11,"upcast","","",47,null],[11,"as_ref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"terminatorinst"}}],[11,"deref","","",47,null],[11,"deref_mut","","",47,null],[0,"switch","hllvm::ir::value::user::inst::terminator","",null,null],[3,"SwitchInst","hllvm::ir::value::user::inst::terminator::switch","An switch instruction.",null,null],[11,"new","","Creates a new switch instruction.",48,{"inputs":[{"name":"value"},{"name":"option"}],"output":{"name":"self"}}],[11,"add_case","","Adds a case to the switch statement.",48,{"inputs":[{"name":"self"},{"name":"constantint"},{"name":"block"}],"output":null}],[11,"from_parent","","",48,null],[11,"upcast_ref","","",48,null],[11,"upcast_mut","","",48,null],[11,"upcast","","",48,null],[11,"as_ref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"terminatorinst"}}],[11,"deref","","",48,null],[11,"deref_mut","","",48,null],[0,"unreachable","hllvm::ir::value::user::inst::terminator","",null,null],[3,"UnreachableInst","hllvm::ir::value::user::inst::terminator::unreachable","An instruction which cannot be reached.",null,null],[11,"new","","Creates a new unreachable instruction.",49,{"inputs":[{"name":"context"}],"output":{"name":"self"}}],[11,"from_parent","","",49,null],[11,"upcast_ref","","",49,null],[11,"upcast_mut","","",49,null],[11,"upcast","","",49,null],[11,"as_ref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"terminatorinst"}}],[11,"deref","","",49,null],[11,"deref_mut","","",49,null],[11,"from_parent","hllvm::ir::value::user::inst::terminator","",50,null],[11,"upcast_ref","","",50,null],[11,"upcast_mut","","",50,null],[11,"upcast","","",50,null],[11,"as_ref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",50,null],[11,"deref_mut","","",50,null],[0,"unary","hllvm::ir::value::user::inst","",null,null],[3,"UnaryInst","hllvm::ir::value::user::inst::unary","",null,null],[0,"alloca","","",null,null],[3,"AllocaInst","hllvm::ir::value::user::inst::unary::alloca","A stack allocation.",null,null],[11,"new","","Creates a new stack allocation of a type.",51,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"new_array","","Creates a new stack allocation of an array of a type.",51,{"inputs":[{"name":"type"},{"name":"value"}],"output":{"name":"self"}}],[11,"new_generic","","Generic alloca construction.",51,{"inputs":[{"name":"type"},{"name":"option"}],"output":{"name":"self"}}],[11,"from_parent","","",51,null],[11,"upcast_ref","","",51,null],[11,"upcast_mut","","",51,null],[11,"upcast","","",51,null],[11,"as_ref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"unaryinst"}}],[11,"deref","","",51,null],[11,"deref_mut","","",51,null],[0,"load","hllvm::ir::value::user::inst::unary","",null,null],[3,"LoadInst","hllvm::ir::value::user::inst::unary::load","A instruction which loads a value from a pointer.",null,null],[11,"new","","Creates a new load instruction.",52,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"new_volatile","","Creates a new volatile load instruction.",52,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"new_generic","","Create a new load instruction.",52,{"inputs":[{"name":"value"},{"name":"bool"},{"name":"u32"},{"name":"atomicordering"},{"name":"synchronizationscope"}],"output":{"name":"self"}}],[11,"from_parent","","",52,null],[11,"upcast_ref","","",52,null],[11,"upcast_mut","","",52,null],[11,"upcast","","",52,null],[11,"as_ref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"unaryinst"}}],[11,"deref","","",52,null],[11,"deref_mut","","",52,null],[0,"extract_value","hllvm::ir::value::user::inst::unary","",null,null],[3,"ExtractValueInst","hllvm::ir::value::user::inst::unary::extract_value","An instruction which can extract an element from an aggregate value.",null,null],[11,"new","","Creates a new extract value instruction.",53,null],[11,"from_parent","","",53,null],[11,"upcast_ref","","",53,null],[11,"upcast_mut","","",53,null],[11,"upcast","","",53,null],[11,"as_ref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unaryinst"}}],[11,"deref","","",53,null],[11,"deref_mut","","",53,null],[0,"vaarg","hllvm::ir::value::user::inst::unary","",null,null],[3,"VAArgInst","hllvm::ir::value::user::inst::unary::vaarg","",null,null],[11,"new","","Creates a new `vaarg` instruction.",54,{"inputs":[{"name":"value"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_parent","","",54,null],[11,"upcast_ref","","",54,null],[11,"upcast_mut","","",54,null],[11,"upcast","","",54,null],[11,"as_ref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"unaryinst"}}],[11,"deref","","",54,null],[11,"deref_mut","","",54,null],[0,"cast","hllvm::ir::value::user::inst::unary","",null,null],[3,"CastInst","hllvm::ir::value::user::inst::unary::cast","",null,null],[3,"AddrSpaceCastInst","","",null,null],[3,"BitCastInst","","",null,null],[3,"FPExtInst","","",null,null],[3,"FPToSIInst","","",null,null],[3,"FPToUIInst","","",null,null],[3,"FPTruncInst","","",null,null],[3,"IntToPtrInst","","",null,null],[3,"PtrToIntInst","","",null,null],[3,"SExtInst","","",null,null],[3,"SIToFPInst","","",null,null],[3,"TruncInst","","",null,null],[3,"UIToFPInst","","",null,null],[3,"ZExtInst","","",null,null],[11,"from_parent","","",55,null],[11,"upcast_ref","","",55,null],[11,"upcast_mut","","",55,null],[11,"upcast","","",55,null],[11,"as_ref","","",55,{"inputs":[{"name":"self"}],"output":{"name":"unaryinst"}}],[11,"deref","","",55,null],[11,"deref_mut","","",55,null],[11,"new","","Creates a new instruction.",56,{"inputs":[{"name":"value"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_parent","","",56,null],[11,"upcast_ref","","",56,null],[11,"upcast_mut","","",56,null],[11,"upcast","","",56,null],[11,"as_ref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"castinst"}}],[11,"deref","","",56,null],[11,"deref_mut","","",56,null],[11,"new","","Creates a new instruction.",57,{"inputs":[{"name":"value"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_parent","","",57,null],[11,"upcast_ref","","",57,null],[11,"upcast_mut","","",57,null],[11,"upcast","","",57,null],[11,"as_ref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"castinst"}}],[11,"deref","","",57,null],[11,"deref_mut","","",57,null],[11,"new","","Creates a new instruction.",58,{"inputs":[{"name":"value"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_parent","","",58,null],[11,"upcast_ref","","",58,null],[11,"upcast_mut","","",58,null],[11,"upcast","","",58,null],[11,"as_ref","","",58,{"inputs":[{"name":"self"}],"output":{"name":"castinst"}}],[11,"deref","","",58,null],[11,"deref_mut","","",58,null],[11,"new","","Creates a new instruction.",59,{"inputs":[{"name":"value"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_parent","","",59,null],[11,"upcast_ref","","",59,null],[11,"upcast_mut","","",59,null],[11,"upcast","","",59,null],[11,"as_ref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"castinst"}}],[11,"deref","","",59,null],[11,"deref_mut","","",59,null],[11,"new","","Creates a new instruction.",60,{"inputs":[{"name":"value"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_parent","","",60,null],[11,"upcast_ref","","",60,null],[11,"upcast_mut","","",60,null],[11,"upcast","","",60,null],[11,"as_ref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"castinst"}}],[11,"deref","","",60,null],[11,"deref_mut","","",60,null],[11,"new","","Creates a new instruction.",61,{"inputs":[{"name":"value"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_parent","","",61,null],[11,"upcast_ref","","",61,null],[11,"upcast_mut","","",61,null],[11,"upcast","","",61,null],[11,"as_ref","","",61,{"inputs":[{"name":"self"}],"output":{"name":"castinst"}}],[11,"deref","","",61,null],[11,"deref_mut","","",61,null],[11,"new","","Creates a new instruction.",62,{"inputs":[{"name":"value"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_parent","","",62,null],[11,"upcast_ref","","",62,null],[11,"upcast_mut","","",62,null],[11,"upcast","","",62,null],[11,"as_ref","","",62,{"inputs":[{"name":"self"}],"output":{"name":"castinst"}}],[11,"deref","","",62,null],[11,"deref_mut","","",62,null],[11,"new","","Creates a new instruction.",63,{"inputs":[{"name":"value"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_parent","","",63,null],[11,"upcast_ref","","",63,null],[11,"upcast_mut","","",63,null],[11,"upcast","","",63,null],[11,"as_ref","","",63,{"inputs":[{"name":"self"}],"output":{"name":"castinst"}}],[11,"deref","","",63,null],[11,"deref_mut","","",63,null],[11,"new","","Creates a new instruction.",64,{"inputs":[{"name":"value"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_parent","","",64,null],[11,"upcast_ref","","",64,null],[11,"upcast_mut","","",64,null],[11,"upcast","","",64,null],[11,"as_ref","","",64,{"inputs":[{"name":"self"}],"output":{"name":"castinst"}}],[11,"deref","","",64,null],[11,"deref_mut","","",64,null],[11,"new","","Creates a new instruction.",65,{"inputs":[{"name":"value"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_parent","","",65,null],[11,"upcast_ref","","",65,null],[11,"upcast_mut","","",65,null],[11,"upcast","","",65,null],[11,"as_ref","","",65,{"inputs":[{"name":"self"}],"output":{"name":"castinst"}}],[11,"deref","","",65,null],[11,"deref_mut","","",65,null],[11,"new","","Creates a new instruction.",66,{"inputs":[{"name":"value"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_parent","","",66,null],[11,"upcast_ref","","",66,null],[11,"upcast_mut","","",66,null],[11,"upcast","","",66,null],[11,"as_ref","","",66,{"inputs":[{"name":"self"}],"output":{"name":"castinst"}}],[11,"deref","","",66,null],[11,"deref_mut","","",66,null],[11,"new","","Creates a new instruction.",67,{"inputs":[{"name":"value"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_parent","","",67,null],[11,"upcast_ref","","",67,null],[11,"upcast_mut","","",67,null],[11,"upcast","","",67,null],[11,"as_ref","","",67,{"inputs":[{"name":"self"}],"output":{"name":"castinst"}}],[11,"deref","","",67,null],[11,"deref_mut","","",67,null],[11,"new","","Creates a new instruction.",68,{"inputs":[{"name":"value"},{"name":"type"}],"output":{"name":"self"}}],[11,"from_parent","","",68,null],[11,"upcast_ref","","",68,null],[11,"upcast_mut","","",68,null],[11,"upcast","","",68,null],[11,"as_ref","","",68,{"inputs":[{"name":"self"}],"output":{"name":"castinst"}}],[11,"deref","","",68,null],[11,"deref_mut","","",68,null],[11,"from_parent","hllvm::ir::value::user::inst::unary","",69,null],[11,"upcast_ref","","",69,null],[11,"upcast_mut","","",69,null],[11,"upcast","","",69,null],[11,"as_ref","","",69,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",69,null],[11,"deref_mut","","",69,null],[0,"shufflevec","hllvm::ir::value::user::inst","",null,null],[3,"ShuffleVectorInst","hllvm::ir::value::user::inst::shufflevec","An instruction which can extract an element from a vector.",null,null],[11,"new","","Creates a new extract element instruction.",70,{"inputs":[{"name":"value"},{"name":"value"},{"name":"value"}],"output":{"name":"self"}}],[11,"from_parent","","",70,null],[11,"upcast_ref","","",70,null],[11,"upcast_mut","","",70,null],[11,"upcast","","",70,null],[11,"as_ref","","",70,{"inputs":[{"name":"self"}],"output":{"name":"instruction"}}],[11,"deref","","",70,null],[11,"deref_mut","","",70,null],[11,"from_parent","hllvm::ir::value::user::inst","",71,null],[11,"upcast_ref","","",71,null],[11,"upcast_mut","","",71,null],[11,"upcast","","",71,null],[11,"as_ref","","",71,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"deref","","",71,null],[11,"deref_mut","","",71,null],[0,"consts","hllvm::ir::value::user","Compile-time constant values.",null,null],[3,"Constant","hllvm::ir::value::user::consts","A value that is constant at compile time.",null,null],[0,"int","","",null,null],[3,"ConstantInt","hllvm::ir::value::user::consts::int","",null,null],[11,"from_parent","","",72,null],[11,"upcast_ref","","",72,null],[11,"upcast_mut","","",72,null],[11,"upcast","","",72,null],[11,"as_ref","","",72,{"inputs":[{"name":"self"}],"output":{"name":"constant"}}],[11,"deref","","",72,null],[11,"deref_mut","","",72,null],[11,"boolean_true","","Gets the integer constant representing boolean 'true'",72,{"inputs":[{"name":"context"}],"output":{"name":"self"}}],[11,"boolean_false","","Gets the integer constant representing boolean 'false'",72,{"inputs":[{"name":"context"}],"output":{"name":"self"}}],[11,"signed","","Gets a signed integer of some type.",72,{"inputs":[{"name":"type"},{"name":"i64"}],"output":{"name":"self"}}],[11,"unsigned","","Gets an unsigned integer of some type.",72,{"inputs":[{"name":"type"},{"name":"u64"}],"output":{"name":"self"}}],[0,"fp","hllvm::ir::value::user::consts","",null,null],[3,"ConstantFP","hllvm::ir::value::user::consts::fp","A floating point constant.",null,null],[11,"from_parent","","",73,null],[11,"upcast_ref","","",73,null],[11,"upcast_mut","","",73,null],[11,"upcast","","",73,null],[11,"as_ref","","",73,{"inputs":[{"name":"self"}],"output":{"name":"constant"}}],[11,"deref","","",73,null],[11,"deref_mut","","",73,null],[11,"new_string","","Creates a new floating point constant from a string.",73,{"inputs":[{"name":"type"},{"name":"str"}],"output":{"name":"self"}}],[11,"new","","Creates a new floating point constant from a `f64`.",73,{"inputs":[{"name":"type"},{"name":"f64"}],"output":{"name":"self"}}],[0,"blockaddr","hllvm::ir::value::user::consts","Basic block address.",null,null],[3,"BlockAddress","hllvm::ir::value::user::consts::blockaddr","The address of a basic block.",null,null],[11,"from_parent","","",74,null],[11,"upcast_ref","","",74,null],[11,"upcast_mut","","",74,null],[11,"upcast","","",74,null],[11,"as_ref","","",74,{"inputs":[{"name":"self"}],"output":{"name":"constant"}}],[11,"deref","","",74,null],[11,"deref_mut","","",74,null],[11,"new","","Creates a new block address from a basic block.",74,{"inputs":[{"name":"block"}],"output":{"name":"self"}}],[0,"aggzero","hllvm::ir::value::user::consts","",null,null],[3,"ConstantAggregateZero","hllvm::ir::value::user::consts::aggzero","A constant value of zero of any type.",null,null],[11,"from_parent","","",75,null],[11,"upcast_ref","","",75,null],[11,"upcast_mut","","",75,null],[11,"upcast","","",75,null],[11,"as_ref","","",75,{"inputs":[{"name":"self"}],"output":{"name":"constant"}}],[11,"deref","","",75,null],[11,"deref_mut","","",75,null],[11,"new","","Creates a new zero constant.",75,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[0,"array","hllvm::ir::value::user::consts","",null,null],[3,"ConstantArray","hllvm::ir::value::user::consts::array","",null,null],[11,"from_parent","","",76,null],[11,"upcast_ref","","",76,null],[11,"upcast_mut","","",76,null],[11,"upcast","","",76,null],[11,"as_ref","","",76,{"inputs":[{"name":"self"}],"output":{"name":"constant"}}],[11,"deref","","",76,null],[11,"deref_mut","","",76,null],[0,"vector","hllvm::ir::value::user::consts","",null,null],[3,"ConstantVector","hllvm::ir::value::user::consts::vector","",null,null],[11,"from_parent","","",77,null],[11,"upcast_ref","","",77,null],[11,"upcast_mut","","",77,null],[11,"upcast","","",77,null],[11,"as_ref","","",77,{"inputs":[{"name":"self"}],"output":{"name":"constant"}}],[11,"deref","","",77,null],[11,"deref_mut","","",77,null],[11,"new","","",77,null],[0,"ptrnull","hllvm::ir::value::user::consts","",null,null],[3,"ConstantPointerNull","hllvm::ir::value::user::consts::ptrnull","A constant null pointer.",null,null],[11,"from_parent","","",78,null],[11,"upcast_ref","","",78,null],[11,"upcast_mut","","",78,null],[11,"upcast","","",78,null],[11,"as_ref","","",78,{"inputs":[{"name":"self"}],"output":{"name":"constant"}}],[11,"deref","","",78,null],[11,"deref_mut","","",78,null],[11,"new","","Creates a constant null pointer.",78,{"inputs":[{"name":"pointertype"}],"output":{"name":"self"}}],[0,"strukt","hllvm::ir::value::user::consts","",null,null],[3,"ConstantStruct","hllvm::ir::value::user::consts::strukt","A constant structure value.",null,null],[11,"from_parent","","",79,null],[11,"upcast_ref","","",79,null],[11,"upcast_mut","","",79,null],[11,"upcast","","",79,null],[11,"as_ref","","",79,{"inputs":[{"name":"self"}],"output":{"name":"constant"}}],[11,"deref","","",79,null],[11,"deref_mut","","",79,null],[11,"new","","Creates a new constant structure.",79,null],[0,"undef","hllvm::ir::value::user::consts","",null,null],[3,"UndefValue","hllvm::ir::value::user::consts::undef","An undefined value.",null,null],[11,"from_parent","","",80,null],[11,"upcast_ref","","",80,null],[11,"upcast_mut","","",80,null],[11,"upcast","","",80,null],[11,"as_ref","","",80,{"inputs":[{"name":"self"}],"output":{"name":"constant"}}],[11,"deref","","",80,null],[11,"deref_mut","","",80,null],[11,"new","","Creates a new undefined value.",80,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[0,"global","hllvm::ir::value::user::consts","Global values.",null,null],[3,"GlobalValue","hllvm::ir::value::user::consts::global","",null,null],[0,"obj","","",null,null],[3,"GlobalObject","hllvm::ir::value::user::consts::global::obj","",null,null],[0,"func","","",null,null],[3,"Function","hllvm::ir::value::user::consts::global::obj::func","A function.",null,null],[11,"new","","Creates a new function.",81,{"inputs":[{"name":"functiontype"},{"name":"linkage"},{"name":"str"},{"name":"module"}],"output":{"name":"self"}}],[11,"append","","",81,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"from_value","","",81,{"inputs":[{"name":"value"}],"output":{"name":"self"}}],[11,"from_parent","","",81,null],[11,"upcast_ref","","",81,null],[11,"upcast_mut","","",81,null],[11,"upcast","","",81,null],[11,"as_ref","","",81,{"inputs":[{"name":"self"}],"output":{"name":"globalobject"}}],[11,"deref","","",81,null],[11,"deref_mut","","",81,null],[0,"variable","hllvm::ir::value::user::consts::global::obj","",null,null],[3,"GlobalVariable","hllvm::ir::value::user::consts::global::obj::variable","A global variable.",null,null],[11,"new_constant","","Creates a new global constant.",82,{"inputs":[{"name":"value"},{"name":"linkage"},{"name":"threadlocalmode"},{"name":"u32"}],"output":{"name":"self"}}],[11,"new_generic","","Creates a new global variable.",82,{"inputs":[{"name":"type"},{"name":"bool"},{"name":"linkage"},{"name":"option"},{"name":"threadlocalmode"},{"name":"u32"},{"name":"bool"}],"output":{"name":"self"}}],[11,"from_parent","","",82,null],[11,"upcast_ref","","",82,null],[11,"upcast_mut","","",82,null],[11,"upcast","","",82,null],[11,"as_ref","","",82,{"inputs":[{"name":"self"}],"output":{"name":"globalobject"}}],[11,"deref","","",82,null],[11,"deref_mut","","",82,null],[11,"from_parent","hllvm::ir::value::user::consts::global::obj","",83,null],[11,"upcast_ref","","",83,null],[11,"upcast_mut","","",83,null],[11,"upcast","","",83,null],[11,"as_ref","","",83,{"inputs":[{"name":"self"}],"output":{"name":"globalvalue"}}],[11,"deref","","",83,null],[11,"deref_mut","","",83,null],[11,"from_parent","hllvm::ir::value::user::consts::global","",84,null],[11,"upcast_ref","","",84,null],[11,"upcast_mut","","",84,null],[11,"upcast","","",84,null],[11,"as_ref","","",84,{"inputs":[{"name":"self"}],"output":{"name":"constant"}}],[11,"deref","","",84,null],[11,"deref_mut","","",84,null],[11,"from_parent","hllvm::ir::value::user::consts","",85,null],[11,"upcast_ref","","",85,null],[11,"upcast_mut","","",85,null],[11,"upcast","","",85,null],[11,"as_ref","","",85,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"deref","","",85,null],[11,"deref_mut","","",85,null],[11,"from_parent","hllvm::ir::value::user","",86,null],[11,"upcast_ref","","",86,null],[11,"upcast_mut","","",86,null],[11,"upcast","","",86,null],[11,"as_ref","","",86,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"deref","","",86,null],[11,"deref_mut","","",86,null],[11,"ty","hllvm::ir::value","Get the type of the value.",87,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"dump","","Dumps the value to standard error.",87,{"inputs":[{"name":"self"}],"output":null}],[11,"from_inner","","",87,{"inputs":[{"name":"valueref"}],"output":{"name":"self"}}],[11,"inner","","",87,{"inputs":[{"name":"self"}],"output":{"name":"valueref"}}],[0,"target","hllvm","The backend target code.",null,null],[4,"FileType","hllvm::target","Specifies a file type. Analgous to `llvm::CodeGenFileType`",null,null],[13,"Assembly","","Asn assembly file.",88,null],[13,"Object","","An object file.",88,null],[3,"Triple","","A target triple.",null,null],[12,"0","","",89,null],[3,"CPU","","A CPU name.",null,null],[12,"0","","",90,null],[3,"Target","","An LLVM target.",null,null],[0,"registry","","",null,null],[3,"Registry","hllvm::target::registry","The target registry.",null,null],[11,"get","","Gets the global target registry.",91,{"inputs":[],"output":{"name":"self"}}],[11,"targets","","Gets a list of all targets.",91,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[0,"machine","hllvm::target","",null,null],[3,"Machine","hllvm::target::machine","An LLVM target machine.",null,null],[11,"add_passes_to_emit_file","","",92,{"inputs":[{"name":"self"},{"name":"manager"},{"name":"outputstream"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"from_inner","","",92,{"inputs":[{"name":"targetmachineref"}],"output":{"name":"self"}}],[11,"inner","","",92,{"inputs":[{"name":"self"}],"output":{"name":"targetmachineref"}}],[11,"drop","","",92,{"inputs":[{"name":"self"}],"output":null}],[0,"compilation","hllvm::target","",null,null],[3,"CompilationBuilder","hllvm::target::compilation","A compilation builder.",null,null],[3,"Compilation","","A compilation.",null,null],[11,"new","","Creates a new compilation builder.",93,{"inputs":[{"name":"target"}],"output":{"name":"self"}}],[11,"triple","","Sets the target triple.",93,{"inputs":[{"name":"self"},{"name":"triple"}],"output":{"name":"self"}}],[11,"cpu","","Sets the target CPU.",93,{"inputs":[{"name":"self"},{"name":"cpu"}],"output":{"name":"self"}}],[11,"add_feature","","Adds a feature.",93,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"remove_feature","","Removes a feature.",93,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"build","","Builds the compilation.",93,{"inputs":[{"name":"self"}],"output":{"name":"compilation"}}],[11,"new","","Creates a new target using the default configuration.",94,{"inputs":[{"name":"target"}],"output":{"name":"self"}}],[11,"compile","","Compiles a module.",94,{"inputs":[{"name":"self"},{"name":"module"},{"name":"s"},{"name":"filetype"}],"output":null}],[11,"name","hllvm::target","Gets the name of the target.",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"short_description","","Gets the short description of the target.",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"create_machine","","Creates a machine object.",95,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"machine"}}],[11,"has_mc_asm_backend","","Checks if the target has defined an `MCAsmBackend`.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_target_machine","","Checks if the target has defined a `TargetMachine`.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_jit","","Checks if the target supports just-in-time compilation.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_inner","","",95,{"inputs":[{"name":"targetref"}],"output":{"name":"self"}}],[11,"inner","","",95,{"inputs":[{"name":"self"}],"output":{"name":"targetref"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"native","","Gets the CPU name of the host CPU.",90,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",89,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"pass","hllvm","The pass infrastructure.",null,null],[0,"manager","hllvm::pass","",null,null],[3,"Manager","hllvm::pass::manager","A pass manager.",null,null],[11,"new","","Creates a new pass manager.",96,{"inputs":[],"output":{"name":"self"}}],[11,"run","","Run passes on a module.",96,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"module"}}],[11,"from_inner","","",96,{"inputs":[{"name":"passmanagerref"}],"output":{"name":"self"}}],[11,"inner","","",96,{"inputs":[{"name":"self"}],"output":{"name":"passmanagerref"}}],[11,"drop","","",96,{"inputs":[{"name":"self"}],"output":null}],[0,"support","hllvm","Supporting code.",null,null],[0,"io","hllvm::support","",null,null],[3,"OutputStream","hllvm::support::io","An abstract output stream.",null,null],[3,"FileOutputStream","","An output stream backed by a file descriptor.",null,null],[11,"stdout","","Gets an output stream for standard output.",97,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"stderr","","Gets an output stream for standard error.",97,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","Creates an output stream from a given FD.",97,{"inputs":[{"name":"t"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_fd","","Creates a file stream from a raw file descriptor.",97,{"inputs":[{"name":"c_int"},{"name":"bool"},{"name":"bool"}],"output":{"name":"self"}}],[11,"from_inner","","",98,{"inputs":[{"name":"rawpwritestreamref"}],"output":{"name":"self"}}],[11,"inner","","",98,{"inputs":[{"name":"self"}],"output":{"name":"rawpwritestreamref"}}],[11,"drop","","",98,{"inputs":[{"name":"self"}],"output":null}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"outputstream"}}],[0,"safe_wrapper","hllvm","Trait for types which wrap unsafe LLVM internals.",null,null],[8,"SafeWrapper","hllvm::safe_wrapper","A type which wraps an underlying LLVM FFI type.",null,null],[16,"Inner","","The inner type.",99,null],[10,"from_inner","","Creates a new instance of the type from an underlying value.",99,null],[10,"inner","","Gets the underlying value.",99,null],[11,"clone","hllvm::ir","",7,{"inputs":[{"name":"self"}],"output":{"name":"atomicbinaryop"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"atomicordering"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"threadlocalmode"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"integerpredicatekind"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"synchronizationscope"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"floatpredicatekind"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"floatpredicatekind"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"atomicordering"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"atomicbinaryop"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"threadlocalmode"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"synchronizationscope"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"integerpredicatekind"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"Subtype"],[4,"Linkage"],[4,"SynchronizationScope"],[4,"AtomicOrdering"],[4,"ThreadLocalMode"],[4,"FloatPredicateKind"],[4,"IntegerPredicateKind"],[4,"AtomicBinaryOp"],[3,"Context"],[3,"Module"],[3,"FunctionType"],[3,"IntegerType"],[3,"StructType"],[3,"ArrayType"],[3,"PointerType"],[3,"VectorType"],[3,"SequentialType"],[3,"CompositeType"],[3,"Type"],[3,"Attribute"],[3,"Block"],[3,"Argument"],[3,"InlineAsm"],[3,"AtomicCmpXchgInst"],[3,"AtomicRMWInst"],[3,"StoreInst"],[3,"GetElementPtrInst"],[3,"ExtractElementInst"],[3,"InsertElementInst"],[3,"InsertValueInst"],[3,"SelectInst"],[3,"FenceInst"],[3,"LandingPadInst"],[3,"BinaryOperatorInst"],[3,"CatchPadInst"],[3,"CleanupPadInst"],[3,"CallInst"],[3,"FCmpInst"],[3,"ICmpInst"],[3,"CmpInst"],[3,"BranchInst"],[3,"CatchReturnInst"],[3,"CatchSwitchInst"],[3,"CleanupReturnInst"],[3,"IndirectBrInst"],[3,"InvokeInst"],[3,"ResumeInst"],[3,"ReturnInst"],[3,"SwitchInst"],[3,"UnreachableInst"],[3,"TerminatorInst"],[3,"AllocaInst"],[3,"LoadInst"],[3,"ExtractValueInst"],[3,"VAArgInst"],[3,"CastInst"],[3,"AddrSpaceCastInst"],[3,"BitCastInst"],[3,"FPExtInst"],[3,"FPToSIInst"],[3,"FPToUIInst"],[3,"FPTruncInst"],[3,"IntToPtrInst"],[3,"PtrToIntInst"],[3,"SExtInst"],[3,"SIToFPInst"],[3,"TruncInst"],[3,"UIToFPInst"],[3,"ZExtInst"],[3,"UnaryInst"],[3,"ShuffleVectorInst"],[3,"Instruction"],[3,"ConstantInt"],[3,"ConstantFP"],[3,"BlockAddress"],[3,"ConstantAggregateZero"],[3,"ConstantArray"],[3,"ConstantVector"],[3,"ConstantPointerNull"],[3,"ConstantStruct"],[3,"UndefValue"],[3,"Function"],[3,"GlobalVariable"],[3,"GlobalObject"],[3,"GlobalValue"],[3,"Constant"],[3,"User"],[3,"Value"],[4,"FileType"],[3,"Triple"],[3,"CPU"],[3,"Registry"],[3,"Machine"],[3,"CompilationBuilder"],[3,"Compilation"],[3,"Target"],[3,"Manager"],[3,"FileOutputStream"],[3,"OutputStream"],[8,"SafeWrapper"]]};
searchIndex["hllvm_sys"] = {"doc":"","items":[[4,"OpaqueContext","hllvm_sys","",null,null],[4,"OpaqueType","","",null,null],[4,"OpaqueValue","","",null,null],[4,"OpaqueTarget","","",null,null],[4,"OpaqueTargetMachine","","",null,null],[4,"OpaquePassManager","","",null,null],[4,"OpaqueRawPWriteStream","","",null,null],[4,"OpaqueAttribute","","",null,null],[0,"ir","","",null,null],[4,"Linkage","hllvm_sys::ir","An enumeration for the kinds of linkage for global values.",null,null],[13,"External","","Externally visible function.",0,null],[13,"AvailableExternally","","Available for inspection, not emission.",0,null],[13,"LinkOnceAny","","Keep one copy of function when linking (inline).",0,null],[13,"LinkOnceODR","","Same as `LinkOnceAny`, but only replaced by something equivalent.",0,null],[13,"WeakAny","","Keep one copy of named function when linking (weak).",0,null],[13,"WeakODR","","Same as `WeakAny`, but only replaced by something equivalent.",0,null],[13,"Appending","","Special purpose, only applies to global arrays.",0,null],[13,"Internal","","Rename collisions when linking (static functions).",0,null],[13,"Private","","Like `Internal`, but omit from symbol table.",0,null],[13,"ExternalWeak","","",0,null],[13,"Common","","Tentative definitions.",0,null],[4,"AtomicOrdering","","Atomic ordering.",null,null],[13,"NotAtomic","","",1,null],[13,"Unordered","","",1,null],[13,"Monotonic","","",1,null],[13,"Acquire","","",1,null],[13,"Release","","",1,null],[13,"AcquireRelease","","",1,null],[13,"SequentiallyConsistent","","",1,null],[4,"SynchronizationScope","","Synchronization scope.",null,null],[13,"SingleThread","","",2,null],[13,"CrossThread","","",2,null],[4,"ThreadLocalMode","","Thread local mode.",null,null],[13,"NotThreadLocal","","",3,null],[13,"GeneralDynamic","","",3,null],[13,"LocalDynamic","","",3,null],[13,"InitialExec","","",3,null],[13,"LocalExec","","",3,null],[4,"FloatPredicateKind","","Float predicate kind.",null,null],[13,"False","","",4,null],[13,"OrderedAndEqual","","",4,null],[13,"OrderedGreaterThan","","",4,null],[13,"OrderedGreaterThanOrEqual","","",4,null],[13,"OrderedLessThan","","",4,null],[13,"OrderedLessThanOrEqual","","",4,null],[13,"OrderedUnequal","","",4,null],[13,"Ordered","","",4,null],[13,"Unordered","","",4,null],[13,"UnorderedOrEqual","","",4,null],[13,"UnorderedOrGreaterThan","","",4,null],[13,"UnorderedOrGreaterThanOrEqual","","",4,null],[13,"UnorderedOrLessThan","","",4,null],[13,"UnorderedOrLessThanOrEqual","","",4,null],[13,"UnorderedOrNotEqual","","",4,null],[13,"True","","",4,null],[4,"IntegerPredicateKind","","Integer predicate kind.",null,null],[13,"Equal","","",5,null],[13,"NotEqual","","",5,null],[13,"UnsignedGreaterThan","","",5,null],[13,"UnsignedGreaterThanOrEqual","","",5,null],[13,"UnsignedLessThan","","",5,null],[13,"UnsignedLessThanOrEqual","","",5,null],[13,"SignedGreaterThan","","",5,null],[13,"SignedGreaterThanOrEqual","","",5,null],[13,"SignedLessThan","","",5,null],[13,"SignedLessThanOrEqual","","",5,null],[4,"AtomicBinaryOp","","Integer predicate kind.",null,null],[13,"Xchg","","",6,null],[13,"Add","","",6,null],[13,"Sub","","",6,null],[13,"And","","",6,null],[13,"Nand","","",6,null],[13,"Or","","",6,null],[13,"Xor","","",6,null],[13,"Max","","",6,null],[13,"Min","","",6,null],[13,"UMax","","",6,null],[13,"UMin","","",6,null],[0,"opcode","","",null,null],[4,"OpCode","hllvm_sys::ir::opcode","An operation code for an IR instruction.",null,null],[13,"Terminator","","",7,null],[13,"Binary","","",7,null],[13,"Logical","","",7,null],[13,"Memory","","",7,null],[13,"Cast","","",7,null],[13,"Other","","",7,null],[4,"TerminatorOpCode","","An opcode for a block terminator instruction.",null,null],[13,"Ret","","",8,null],[13,"Br","","",8,null],[13,"Switch","","",8,null],[13,"IndirectBr","","",8,null],[13,"Invoke","","",8,null],[13,"Resume","","",8,null],[13,"Unreachable","","",8,null],[13,"CleanupRet","","",8,null],[13,"CatchRet","","",8,null],[13,"CatchSwitch","","",8,null],[4,"BinaryOpCode","","An opcode for a binary operation instruction.",null,null],[13,"Add","","",9,null],[13,"FAdd","","",9,null],[13,"Sub","","",9,null],[13,"FSub","","",9,null],[13,"Mul","","",9,null],[13,"FMul","","",9,null],[13,"UDiv","","",9,null],[13,"SDiv","","",9,null],[13,"FDiv","","",9,null],[13,"URem","","",9,null],[13,"SRem","","",9,null],[13,"FRem","","",9,null],[4,"LogicalOpCode","","An opcode for a logical operation instruction.",null,null],[13,"Shl","","",10,null],[13,"LShr","","",10,null],[13,"AShr","","",10,null],[13,"And","","",10,null],[13,"Or","","",10,null],[13,"Xor","","",10,null],[4,"MemoryOpCode","","An opcode for a memory instruction.",null,null],[13,"Alloca","","",11,null],[13,"Load","","",11,null],[13,"Store","","",11,null],[13,"GetElementPtr","","",11,null],[13,"Fence","","",11,null],[13,"AtomicCmpXchg","","",11,null],[13,"AtomicRMW","","",11,null],[4,"CastOpCode","","An opcode for a cast instruction.",null,null],[13,"Trunc","","",12,null],[13,"ZExt","","",12,null],[13,"SExt","","",12,null],[13,"FPToUI","","",12,null],[13,"FPToSI","","",12,null],[13,"UIToFP","","",12,null],[13,"SIToFP","","",12,null],[13,"FPTrunc","","",12,null],[13,"FPExt","","",12,null],[13,"PtrToInt","","",12,null],[13,"IntToPtr","","",12,null],[13,"BitCast","","",12,null],[13,"AddrSpaceCast","","",12,null],[4,"OtherOpCode","","An opcode for some other instruction.",null,null],[13,"CleanupPad","","",13,null],[13,"CatchPad","","",13,null],[13,"ICmp","","",13,null],[13,"FCmp","","",13,null],[13,"PHI","","",13,null],[13,"Call","","",13,null],[13,"Select","","",13,null],[13,"UserOp1","","",13,null],[13,"UserOp2","","",13,null],[13,"VAArg","","",13,null],[13,"ExtractElement","","",13,null],[13,"InsertElement","","",13,null],[13,"ShuffleVector","","",13,null],[13,"ExtractValue","","",13,null],[13,"InsertValue","","",13,null],[13,"LandingPad","","",13,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"opcode"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"terminatoropcode"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"terminatoropcode"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"binaryopcode"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"binaryopcode"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"logicalopcode"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"logicalopcode"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"memoryopcode"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"memoryopcode"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"castopcode"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"castopcode"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"otheropcode"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"otheropcode"}],"output":{"name":"bool"}}],[11,"code","","Gets the numerical code for the opcode.",7,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[0,"ty","hllvm_sys::ir","",null,null],[5,"LLVMRustTypeGetVoidTy","hllvm_sys::ir::ty","",null,null],[5,"LLVMRustTypeDump","","",null,null],[5,"LLVMRustIntegerTypeGet","","",null,null],[5,"LLVMRustFunctionTypeGet","","",null,null],[5,"LLVMRustStructTypeGet","","",null,null],[5,"LLVMRustArrayTypeGet","","",null,null],[5,"LLVMRustVectorTypeGet","","",null,null],[5,"LLVMRustPointerTypeGet","","",null,null],[0,"value","hllvm_sys::ir","",null,null],[5,"LLVMRustValueDump","hllvm_sys::ir::value","",null,null],[5,"LLVMRustValueGetType","","",null,null],[0,"consts","","",null,null],[5,"LLVMRustConstantIntGetTrue","hllvm_sys::ir::value::consts","",null,null],[5,"LLVMRustConstantIntGetFalse","","",null,null],[5,"LLVMRustConstantIntGetSigned","","",null,null],[5,"LLVMRustConstantIntGetUnsigned","","",null,null],[5,"LLVMRustBlockAddressGet","","",null,null],[5,"LLVMRustConstantAggregateZeroGet","","",null,null],[5,"LLVMRustConstantFPGetDouble","","",null,null],[5,"LLVMRustConstantFPGetString","","",null,null],[5,"LLVMRustConstantPointerNullGet","","",null,null],[5,"LLVMRustConstantStructGet","","",null,null],[5,"LLVMRustConstantVectorGet","","",null,null],[5,"LLVMRustUndefValueGet","","",null,null],[5,"LLVMRustCreateGlobalVariable","","",null,null],[0,"inst","hllvm_sys::ir::value","",null,null],[5,"LLVMRustInstructionInsertAfter","hllvm_sys::ir::value::inst","",null,null],[5,"LLVMRustInstructionAppend","","",null,null],[5,"LLVMRustCreateReturnInst","","",null,null],[5,"LLVMRustCreateBranchInst","","",null,null],[5,"LLVMRustCreateCallInst","","",null,null],[5,"LLVMRustCreateAllocaInst","","",null,null],[5,"LLVMRustCreateStoreInst","","",null,null],[5,"LLVMRustCreateLoadInst","","",null,null],[5,"LLVMRustCreateGetElementPtrInst","","",null,null],[5,"LLVMRustCreateExtractElementInst","","",null,null],[5,"LLVMRustCreateExtractValueInst","","",null,null],[5,"LLVMRustCreateInsertElementInst","","",null,null],[5,"LLVMRustCreateInsertValueInst","","",null,null],[5,"LLVMRustCreateUnreachableInst","","",null,null],[5,"LLVMRustCreateSelectInst","","",null,null],[5,"LLVMRustCreateAddrSpaceCastInst","","",null,null],[5,"LLVMRustCreateFenceInst","","",null,null],[5,"LLVMRustCreateBinaryOperator","","",null,null],[5,"LLVMRustCreateBinaryOperatorNSW","","",null,null],[5,"LLVMRustCreateBinaryOperatorNUW","","",null,null],[5,"LLVMRustCreateBinaryOperatorExact","","",null,null],[5,"LLVMRustCreatePtrToIntInst","","",null,null],[5,"LLVMRustCreateIntToPtrInst","","",null,null],[5,"LLVMRustCreateInvokeInst","","",null,null],[5,"LLVMRustCreateTruncInst","","",null,null],[5,"LLVMRustCreateFPTruncInst","","",null,null],[5,"LLVMRustCreateZExtInst","","",null,null],[5,"LLVMRustCreateSExtInst","","",null,null],[5,"LLVMRustCreateFPExtInst","","",null,null],[5,"LLVMRustCreateBitCastInst","","",null,null],[5,"LLVMRustCreateFPToSIInst","","",null,null],[5,"LLVMRustCreateFPToUIInst","","",null,null],[5,"LLVMRustCreateSIToFPInst","","",null,null],[5,"LLVMRustCreateUIToFPInst","","",null,null],[5,"LLVMRustCreateICmpInst","","",null,null],[5,"LLVMRustCreateFCmpInst","","",null,null],[5,"LLVMRustCreateIndirectBrInst","","",null,null],[5,"LLVMRustIndirectBrInstAddDestination","","",null,null],[5,"LLVMRustCreateResumeInst","","",null,null],[5,"LLVMRustCreateCatchPadInst","","",null,null],[5,"LLVMRustCreateCleanupPadInst","","",null,null],[5,"LLVMRustCreateVAArgInst","","",null,null],[5,"LLVMRustCreateSwitchInst","","",null,null],[5,"LLVMRustSwitchInstAddCase","","",null,null],[5,"LLVMRustCreateLandingPadInst","","",null,null],[5,"LLVMRustCreateCatchReturnInst","","",null,null],[5,"LLVMRustCreateCatchSwitchInst","","",null,null],[5,"LLVMRustCatchSwitchInstAddHandler","","",null,null],[5,"LLVMRustCreateCleanupReturnInst","","",null,null],[5,"LLVMRustCreateAtomicCmpXchgInst","","",null,null],[5,"LLVMRustCreateAtomicRMWInst","","",null,null],[5,"LLVMRustCreateShuffleVectorInst","","",null,null],[0,"context","hllvm_sys::ir","",null,null],[5,"LLVMRustCreateContext","hllvm_sys::ir::context","",null,null],[5,"LLVMRustDestroyContext","","",null,null],[0,"module","hllvm_sys::ir","",null,null],[4,"OpaqueModule","hllvm_sys::ir::module","",null,null],[5,"LLVMRustCreateModule","","",null,null],[5,"LLVMRustModuleGetOrInsertFunction","","",null,null],[5,"LLVMRustModuleAddGlobal","","",null,null],[5,"LLVMRustModuleRemoveGlobal","","",null,null],[5,"LLVMRustModuleAddFunction","","",null,null],[5,"LLVMRustModuleRemoveFunction","","",null,null],[5,"LLVMRustModuleDump","","",null,null],[6,"ModuleRef","","",null,null],[0,"attributes","hllvm_sys::ir","",null,null],[5,"LLVMRustAttributeGetInteger","hllvm_sys::ir::attributes","",null,null],[5,"LLVMRustAttributeGetString","","",null,null],[0,"block","hllvm_sys::ir","",null,null],[5,"LLVMRustBasicBlockCreate","hllvm_sys::ir::block","",null,null],[0,"function","hllvm_sys::ir","",null,null],[5,"LLVMRustFunctionCreate","hllvm_sys::ir::function","",null,null],[5,"LLVMRustFunctionAddBlock","","",null,null],[0,"passes","hllvm_sys::ir","",null,null],[5,"LLVMRustCreateLegacyPassManager","hllvm_sys::ir::passes","",null,null],[5,"LLVMRustDestroyLegacyPassManager","","",null,null],[5,"LLVMRustLegacyPassManagerRun","","",null,null],[11,"clone","hllvm_sys::ir","",0,{"inputs":[{"name":"self"}],"output":{"name":"linkage"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"linkage"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"atomicordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"atomicordering"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"synchronizationscope"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"synchronizationscope"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"threadlocalmode"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"threadlocalmode"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"floatpredicatekind"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"floatpredicatekind"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"integerpredicatekind"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"integerpredicatekind"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"atomicbinaryop"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"atomicbinaryop"}],"output":{"name":"bool"}}],[0,"target","hllvm_sys","",null,null],[4,"FileType","hllvm_sys::target","Specifies a file type. Analgous to `llvm::CodeGenFileType`",null,null],[13,"Assembly","","Asn assembly file.",14,null],[13,"Object","","An object file.",14,null],[0,"registry","","",null,null],[5,"LLVMRustInitializeAllTargets","hllvm_sys::target::registry","",null,null],[5,"LLVMRustTargetRegistryTargets","","",null,null],[0,"target","hllvm_sys::target","",null,null],[5,"DefaultTargetTriple","hllvm_sys::target::target","",null,null],[5,"LLVMRustTargetGetName","","",null,null],[5,"LLVMRustTargetGetShortDescription","","",null,null],[5,"LLVMRustTargetHasMCAsmBackend","","",null,null],[5,"LLVMRustTargetHasTargetMachine","","",null,null],[5,"LLVMRustTargetHasJIT","","",null,null],[5,"LLVMRustTargetCreateTargetMachine","","",null,null],[5,"LLVMRustDestroyTargetMachine","","",null,null],[5,"LLVMRustTargetMachineAddPassesToEmitFile","","",null,null],[0,"support","hllvm_sys","",null,null],[0,"io","hllvm_sys::support","",null,null],[5,"LLVMRustCreateRawFdOStream","hllvm_sys::support::io","",null,null],[5,"LLVMRustDestroyRawPWriteStream","","",null,null],[0,"ffi_helpers","hllvm_sys","",null,null],[3,"CppString","hllvm_sys::ffi_helpers","An owned C string. NOT a `std::string`.",null,null],[3,"CppBox","","A boxed value, allocated from C++. We own the value and free it ourselves.",null,null],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"as_cstr","","Gets the C-representation of the string.",16,{"inputs":[{"name":"self"}],"output":{"name":"cstr"}}],[11,"as_string","","Convert the string into a Rust string.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"ContextRef","hllvm_sys","",null,null],[6,"TypeRef","","",null,null],[6,"ValueRef","","",null,null],[6,"TargetRef","","",null,null],[6,"TargetMachineRef","","",null,null],[6,"PassManagerRef","","",null,null],[6,"RawPWriteStreamRef","","",null,null],[6,"AttributeRef","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"opaqueattribute"}}]],"paths":[[4,"Linkage"],[4,"AtomicOrdering"],[4,"SynchronizationScope"],[4,"ThreadLocalMode"],[4,"FloatPredicateKind"],[4,"IntegerPredicateKind"],[4,"AtomicBinaryOp"],[4,"OpCode"],[4,"TerminatorOpCode"],[4,"BinaryOpCode"],[4,"LogicalOpCode"],[4,"MemoryOpCode"],[4,"CastOpCode"],[4,"OtherOpCode"],[4,"FileType"],[3,"CppBox"],[3,"CppString"],[4,"OpaqueAttribute"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[14,"lazy_static","lazy_static","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",16,null],[12,"sa_family","","",16,null],[12,"sa_data","","",16,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",17,null],[12,"sin6_family","","",17,null],[12,"sin6_port","","",17,null],[12,"sin6_flowinfo","","",17,null],[12,"sin6_addr","","",17,null],[12,"sin6_scope_id","","",17,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",18,null],[12,"sun_family","","",18,null],[12,"sun_path","","",18,null],[3,"passwd","","",null,null],[12,"pw_name","","",19,null],[12,"pw_passwd","","",19,null],[12,"pw_uid","","",19,null],[12,"pw_gid","","",19,null],[12,"pw_change","","",19,null],[12,"pw_class","","",19,null],[12,"pw_gecos","","",19,null],[12,"pw_dir","","",19,null],[12,"pw_shell","","",19,null],[12,"pw_expire","","",19,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",20,null],[12,"ifa_name","","",20,null],[12,"ifa_flags","","",20,null],[12,"ifa_addr","","",20,null],[12,"ifa_netmask","","",20,null],[12,"ifa_dstaddr","","",20,null],[12,"ifa_data","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"utsname","","",null,null],[12,"sysname","","",22,null],[12,"nodename","","",22,null],[12,"release","","",22,null],[12,"version","","",22,null],[12,"machine","","",22,null],[3,"msghdr","","",null,null],[12,"msg_name","","",23,null],[12,"msg_namelen","","",23,null],[12,"msg_iov","","",23,null],[12,"msg_iovlen","","",23,null],[12,"msg_control","","",23,null],[12,"msg_controllen","","",23,null],[12,"msg_flags","","",23,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",24,null],[12,"cmsg_level","","",24,null],[12,"cmsg_type","","",24,null],[3,"fsid_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",25,null],[12,"if_name","","",25,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",26,null],[12,"aio_offset","","",26,null],[12,"aio_buf","","",26,null],[12,"aio_nbytes","","",26,null],[12,"aio_reqprio","","",26,null],[12,"aio_sigevent","","",26,null],[12,"aio_lio_opcode","","",26,null],[3,"utmpx","","",null,null],[12,"ut_user","","",27,null],[12,"ut_id","","",27,null],[12,"ut_line","","",27,null],[12,"ut_pid","","",27,null],[12,"ut_type","","",27,null],[12,"ut_tv","","",27,null],[12,"ut_host","","",27,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",28,null],[12,"gl_offs","","",28,null],[12,"gl_pathv","","",28,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",29,null],[12,"ss_family","","",29,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",30,null],[12,"ai_family","","",30,null],[12,"ai_socktype","","",30,null],[12,"ai_protocol","","",30,null],[12,"ai_addrlen","","",30,null],[12,"ai_canonname","","",30,null],[12,"ai_addr","","",30,null],[12,"ai_next","","",30,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",31,null],[12,"denom","","",31,null],[3,"stat","","",null,null],[12,"st_dev","","",32,null],[12,"st_mode","","",32,null],[12,"st_nlink","","",32,null],[12,"st_ino","","",32,null],[12,"st_uid","","",32,null],[12,"st_gid","","",32,null],[12,"st_rdev","","",32,null],[12,"st_atime","","",32,null],[12,"st_atime_nsec","","",32,null],[12,"st_mtime","","",32,null],[12,"st_mtime_nsec","","",32,null],[12,"st_ctime","","",32,null],[12,"st_ctime_nsec","","",32,null],[12,"st_birthtime","","",32,null],[12,"st_birthtime_nsec","","",32,null],[12,"st_size","","",32,null],[12,"st_blocks","","",32,null],[12,"st_blksize","","",32,null],[12,"st_flags","","",32,null],[12,"st_gen","","",32,null],[12,"st_lspare","","",32,null],[12,"st_qspare","","",32,null],[3,"dirent","","",null,null],[12,"d_ino","","",33,null],[12,"d_seekoff","","",33,null],[12,"d_reclen","","",33,null],[12,"d_namlen","","",33,null],[12,"d_type","","",33,null],[12,"d_name","","",33,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",34,null],[12,"si_errno","","",34,null],[12,"si_code","","",34,null],[12,"si_pid","","",34,null],[12,"si_uid","","",34,null],[12,"si_status","","",34,null],[12,"si_addr","","",34,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",35,null],[12,"sa_mask","","",35,null],[12,"sa_flags","","",35,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",36,null],[12,"ss_size","","",36,null],[12,"ss_flags","","",36,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",37,null],[12,"fst_posmode","","",37,null],[12,"fst_offset","","",37,null],[12,"fst_length","","",37,null],[12,"fst_bytesalloc","","",37,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",38,null],[12,"ra_count","","",38,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",39,null],[12,"f_frsize","","",39,null],[12,"f_blocks","","",39,null],[12,"f_bfree","","",39,null],[12,"f_bavail","","",39,null],[12,"f_files","","",39,null],[12,"f_ffree","","",39,null],[12,"f_favail","","",39,null],[12,"f_fsid","","",39,null],[12,"f_flag","","",39,null],[12,"f_namemax","","",39,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",40,null],[12,"dli_fbase","","",40,null],[12,"dli_sname","","",40,null],[12,"dli_saddr","","",40,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",41,null],[12,"sin_family","","",41,null],[12,"sin_port","","",41,null],[12,"sin_addr","","",41,null],[12,"sin_zero","","",41,null],[3,"statfs","","",null,null],[12,"f_bsize","","",42,null],[12,"f_iosize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_fsid","","",42,null],[12,"f_owner","","",42,null],[12,"f_type","","",42,null],[12,"f_flags","","",42,null],[12,"f_fssubtype","","",42,null],[12,"f_fstypename","","",42,null],[12,"f_mntonname","","",42,null],[12,"f_mntfromname","","",42,null],[12,"f_reserved","","",42,null],[3,"kevent","","",null,null],[12,"ident","","",43,null],[12,"filter","","",43,null],[12,"flags","","",43,null],[12,"fflags","","",43,null],[12,"data","","",43,null],[12,"udata","","",43,null],[3,"kevent64_s","","",null,null],[12,"ident","","",44,null],[12,"filter","","",44,null],[12,"flags","","",44,null],[12,"fflags","","",44,null],[12,"data","","",44,null],[12,"udata","","",44,null],[12,"ext","","",44,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",45,null],[12,"dqb_bsoftlimit","","",45,null],[12,"dqb_curbytes","","",45,null],[12,"dqb_ihardlimit","","",45,null],[12,"dqb_isoftlimit","","",45,null],[12,"dqb_curinodes","","",45,null],[12,"dqb_btime","","",45,null],[12,"dqb_itime","","",45,null],[12,"dqb_id","","",45,null],[12,"dqb_spare","","",45,null],[3,"termios","","",null,null],[12,"c_iflag","","",46,null],[12,"c_oflag","","",46,null],[12,"c_cflag","","",46,null],[12,"c_lflag","","",46,null],[12,"c_cc","","",46,null],[12,"c_ispeed","","",46,null],[12,"c_ospeed","","",46,null],[3,"flock","","",null,null],[12,"l_start","","",47,null],[12,"l_len","","",47,null],[12,"l_pid","","",47,null],[12,"l_type","","",47,null],[12,"l_whence","","",47,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",48,null],[12,"hdr_cnt","","",48,null],[12,"trailers","","",48,null],[12,"trl_cnt","","",48,null],[3,"lconv","","",null,null],[12,"decimal_point","","",49,null],[12,"thousands_sep","","",49,null],[12,"grouping","","",49,null],[12,"int_curr_symbol","","",49,null],[12,"currency_symbol","","",49,null],[12,"mon_decimal_point","","",49,null],[12,"mon_thousands_sep","","",49,null],[12,"mon_grouping","","",49,null],[12,"positive_sign","","",49,null],[12,"negative_sign","","",49,null],[12,"int_frac_digits","","",49,null],[12,"frac_digits","","",49,null],[12,"p_cs_precedes","","",49,null],[12,"p_sep_by_space","","",49,null],[12,"n_cs_precedes","","",49,null],[12,"n_sep_by_space","","",49,null],[12,"p_sign_posn","","",49,null],[12,"n_sign_posn","","",49,null],[12,"int_p_cs_precedes","","",49,null],[12,"int_n_cs_precedes","","",49,null],[12,"int_p_sep_by_space","","",49,null],[12,"int_n_sep_by_space","","",49,null],[12,"int_p_sign_posn","","",49,null],[12,"int_n_sign_posn","","",49,null],[3,"sigevent","","",null,null],[12,"sigev_notify","","",50,null],[12,"sigev_signo","","",50,null],[12,"sigev_value","","",50,null],[12,"sigev_notify_attributes","","",50,null],[3,"pthread_attr_t","","",null,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"_WSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"getpwent","","",null,null],[5,"setpwent","","",null,null],[5,"getprogname","","",null,null],[5,"setprogname","","",null,null],[5,"getloadavg","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"getpeereid","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"utmpxname","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"localeconv_l","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"querylocale","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"initgroups","","",null,null],[5,"waitid","","",null,null],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"fstore_t"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"radvisory"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"kevent"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"sf_hdtr"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"nl_item","","",null,null],[6,"id_t","","",null,null],[6,"sem_t","","",null,null],[6,"idtype_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"NCCS","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"OXTABS","","",null,null],[17,"ONOEOT","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"_UTX_USERSIZE","","",null,null],[17,"_UTX_LINESIZE","","",null,null],[17,"_UTX_IDSIZE","","",null,null],[17,"_UTX_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"SIGNATURE","","",null,null],[17,"SHUTDOWN_TIME","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"CODESET","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"D_MD_ORDER","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGEMT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"TIOCMODG","","",null,null],[17,"TIOCMODS","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCFLUSH","","",null,null],[17,"TIOCGETD","","",null,null],[17,"TIOCSETD","","",null,null],[17,"TIOCIXON","","",null,null],[17,"TIOCIXOFF","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"TIOCSDTR","","",null,null],[17,"TIOCCDTR","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCNOTTY","","",null,null],[17,"TIOCPKT","","",null,null],[17,"TIOCPKT_DATA","","",null,null],[17,"TIOCPKT_FLUSHREAD","","",null,null],[17,"TIOCPKT_FLUSHWRITE","","",null,null],[17,"TIOCPKT_STOP","","",null,null],[17,"TIOCPKT_START","","",null,null],[17,"TIOCPKT_NOSTOP","","",null,null],[17,"TIOCPKT_DOSTOP","","",null,null],[17,"TIOCPKT_IOCTL","","",null,null],[17,"TIOCSTOP","","",null,null],[17,"TIOCSTART","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCREMOTE","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCUCNTL","","",null,null],[17,"TIOCSTAT","","",null,null],[17,"TIOCSCONS","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCEXT","","",null,null],[17,"TIOCSIG","","",null,null],[17,"TIOCDRAIN","","",null,null],[17,"TIOCMSDTRWAIT","","",null,null],[17,"TIOCMGDTRWAIT","","",null,null],[17,"TIOCSDRAINWAIT","","",null,null],[17,"TIOCGDRAINWAIT","","",null,null],[17,"TIOCDSIMICROCODE","","",null,null],[17,"TIOCPTYGRANT","","",null,null],[17,"TIOCPTYGNAME","","",null,null],[17,"TIOCPTYUNLK","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"B7200","","",null,null],[17,"B14400","","",null,null],[17,"B28800","","",null,null],[17,"B57600","","",null,null],[17,"B76800","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_IMPLINK","","",null,null],[17,"AF_PUP","","",null,null],[17,"AF_CHAOS","","",null,null],[17,"AF_NS","","",null,null],[17,"AF_ISO","","",null,null],[17,"AF_OSI","","",null,null],[17,"AF_ECMA","","",null,null],[17,"AF_DATAKIT","","",null,null],[17,"AF_CCITT","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_DLI","","",null,null],[17,"AF_LAT","","",null,null],[17,"AF_HYLINK","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_LINK","","",null,null],[17,"pseudo_AF_XTP","","",null,null],[17,"AF_COIP","","",null,null],[17,"AF_CNT","","",null,null],[17,"pseudo_AF_RTIP","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_SIP","","",null,null],[17,"pseudo_AF_PIP","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_E164","","",null,null],[17,"pseudo_AF_KEY","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NATM","","",null,null],[17,"AF_SYSTEM","","",null,null],[17,"AF_NETBIOS","","",null,null],[17,"AF_PPP","","",null,null],[17,"pseudo_AF_HDRCMPLT","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_IMPLINK","","",null,null],[17,"PF_PUP","","",null,null],[17,"PF_CHAOS","","",null,null],[17,"PF_NS","","",null,null],[17,"PF_ISO","","",null,null],[17,"PF_OSI","","",null,null],[17,"PF_ECMA","","",null,null],[17,"PF_DATAKIT","","",null,null],[17,"PF_CCITT","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_DLI","","",null,null],[17,"PF_LAT","","",null,null],[17,"PF_HYLINK","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_LINK","","",null,null],[17,"PF_XTP","","",null,null],[17,"PF_COIP","","",null,null],[17,"PF_CNT","","",null,null],[17,"PF_SIP","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_RTIP","","",null,null],[17,"PF_PIP","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_NATM","","",null,null],[17,"PF_SYSTEM","","",null,null],[17,"PF_NETBIOS","","",null,null],[17,"PF_PPP","","",null,null],[17,"NET_RT_DUMP","","",null,null],[17,"NET_RT_FLAGS","","",null,null],[17,"NET_RT_IFLIST","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"SOCK_MAXADDRLEN","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOF","","",null,null],[17,"MSG_FLUSH","","",null,null],[17,"MSG_HOLD","","",null,null],[17,"MSG_SEND","","",null,null],[17,"MSG_HAVEMORE","","",null,null],[17,"MSG_RCVMORE","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SCM_CREDS","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_DETAIL","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_EXIT_DETAIL_MASK","","",null,null],[17,"NOTE_EXIT_DECRYPTFAIL","","",null,null],[17,"NOTE_EXIT_MEMORY","","",null,null],[17,"NOTE_EXIT_CSERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_LEEWAY","","",null,null],[17,"NOTE_CRITICAL","","",null,null],[17,"NOTE_BACKGROUND","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"_WSTOPPED","","",null,null],[17,"LOG_NETINFO","","",null,null],[17,"LOG_REMOTEAUTH","","",null,null],[17,"LOG_INSTALL","","",null,null],[17,"LOG_RAS","","",null,null],[17,"LOG_LAUNCHD","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"CTLTYPE","","",null,null],[17,"CTLTYPE_NODE","","",null,null],[17,"CTLTYPE_INT","","",null,null],[17,"CTLTYPE_STRING","","",null,null],[17,"CTLTYPE_QUAD","","",null,null],[17,"CTLTYPE_OPAQUE","","",null,null],[17,"CTLTYPE_STRUCT","","",null,null],[17,"CTLFLAG_RD","","",null,null],[17,"CTLFLAG_WR","","",null,null],[17,"CTLFLAG_RW","","",null,null],[17,"CTLFLAG_NOLOCK","","",null,null],[17,"CTLFLAG_ANYBODY","","",null,null],[17,"CTLFLAG_SECURE","","",null,null],[17,"CTLFLAG_MASKED","","",null,null],[17,"CTLFLAG_NOAUTO","","",null,null],[17,"CTLFLAG_KERN","","",null,null],[17,"CTLFLAG_LOCKED","","",null,null],[17,"CTLFLAG_OID2","","",null,null],[17,"CTL_UNSPEC","","",null,null],[17,"CTL_KERN","","",null,null],[17,"CTL_VM","","",null,null],[17,"CTL_VFS","","",null,null],[17,"CTL_NET","","",null,null],[17,"CTL_DEBUG","","",null,null],[17,"CTL_HW","","",null,null],[17,"CTL_MACHDEP","","",null,null],[17,"CTL_USER","","",null,null],[17,"CTL_MAXID","","",null,null],[17,"KERN_OSTYPE","","",null,null],[17,"KERN_OSRELEASE","","",null,null],[17,"KERN_OSREV","","",null,null],[17,"KERN_VERSION","","",null,null],[17,"KERN_MAXVNODES","","",null,null],[17,"KERN_MAXPROC","","",null,null],[17,"KERN_MAXFILES","","",null,null],[17,"KERN_ARGMAX","","",null,null],[17,"KERN_SECURELVL","","",null,null],[17,"KERN_HOSTNAME","","",null,null],[17,"KERN_HOSTID","","",null,null],[17,"KERN_CLOCKRATE","","",null,null],[17,"KERN_VNODE","","",null,null],[17,"KERN_PROC","","",null,null],[17,"KERN_FILE","","",null,null],[17,"KERN_PROF","","",null,null],[17,"KERN_POSIX1","","",null,null],[17,"KERN_NGROUPS","","",null,null],[17,"KERN_JOB_CONTROL","","",null,null],[17,"KERN_SAVED_IDS","","",null,null],[17,"KERN_BOOTTIME","","",null,null],[17,"KERN_NISDOMAINNAME","","",null,null],[17,"KERN_DOMAINNAME","","",null,null],[17,"KERN_MAXPARTITIONS","","",null,null],[17,"KERN_KDEBUG","","",null,null],[17,"KERN_UPDATEINTERVAL","","",null,null],[17,"KERN_OSRELDATE","","",null,null],[17,"KERN_NTP_PLL","","",null,null],[17,"KERN_BOOTFILE","","",null,null],[17,"KERN_MAXFILESPERPROC","","",null,null],[17,"KERN_MAXPROCPERUID","","",null,null],[17,"KERN_DUMPDEV","","",null,null],[17,"KERN_IPC","","",null,null],[17,"KERN_DUMMY","","",null,null],[17,"KERN_PS_STRINGS","","",null,null],[17,"KERN_USRSTACK32","","",null,null],[17,"KERN_LOGSIGEXIT","","",null,null],[17,"KERN_SYMFILE","","",null,null],[17,"KERN_PROCARGS","","",null,null],[17,"KERN_NETBOOT","","",null,null],[17,"KERN_SYSV","","",null,null],[17,"KERN_AFFINITY","","",null,null],[17,"KERN_TRANSLATE","","",null,null],[17,"KERN_CLASSIC","","",null,null],[17,"KERN_EXEC","","",null,null],[17,"KERN_CLASSICHANDLER","","",null,null],[17,"KERN_AIOMAX","","",null,null],[17,"KERN_AIOPROCMAX","","",null,null],[17,"KERN_AIOTHREADS","","",null,null],[17,"KERN_COREFILE","","",null,null],[17,"KERN_COREDUMP","","",null,null],[17,"KERN_SUGID_COREDUMP","","",null,null],[17,"KERN_PROCDELAYTERM","","",null,null],[17,"KERN_SHREG_PRIVATIZABLE","","",null,null],[17,"KERN_LOW_PRI_WINDOW","","",null,null],[17,"KERN_LOW_PRI_DELAY","","",null,null],[17,"KERN_POSIX","","",null,null],[17,"KERN_USRSTACK64","","",null,null],[17,"KERN_NX_PROTECTION","","",null,null],[17,"KERN_TFP","","",null,null],[17,"KERN_PROCNAME","","",null,null],[17,"KERN_THALTSTACK","","",null,null],[17,"KERN_SPECULATIVE_READS","","",null,null],[17,"KERN_OSVERSION","","",null,null],[17,"KERN_SAFEBOOT","","",null,null],[17,"KERN_RAGEVNODE","","",null,null],[17,"KERN_TTY","","",null,null],[17,"KERN_CHECKOPENEVT","","",null,null],[17,"KERN_THREADNAME","","",null,null],[17,"KERN_MAXID","","",null,null],[17,"KERN_RAGE_PROC","","",null,null],[17,"KERN_RAGE_THREAD","","",null,null],[17,"KERN_UNRAGE_PROC","","",null,null],[17,"KERN_UNRAGE_THREAD","","",null,null],[17,"KERN_OPENEVT_PROC","","",null,null],[17,"KERN_UNOPENEVT_PROC","","",null,null],[17,"KERN_TFP_POLICY","","",null,null],[17,"KERN_TFP_POLICY_DENY","","",null,null],[17,"KERN_TFP_POLICY_DEFAULT","","",null,null],[17,"KERN_KDEFLAGS","","",null,null],[17,"KERN_KDDFLAGS","","",null,null],[17,"KERN_KDENABLE","","",null,null],[17,"KERN_KDSETBUF","","",null,null],[17,"KERN_KDGETBUF","","",null,null],[17,"KERN_KDSETUP","","",null,null],[17,"KERN_KDREMOVE","","",null,null],[17,"KERN_KDSETREG","","",null,null],[17,"KERN_KDGETREG","","",null,null],[17,"KERN_KDREADTR","","",null,null],[17,"KERN_KDPIDTR","","",null,null],[17,"KERN_KDTHRMAP","","",null,null],[17,"KERN_KDPIDEX","","",null,null],[17,"KERN_KDSETRTCDEC","","",null,null],[17,"KERN_KDGETENTROPY","","",null,null],[17,"KERN_KDWRITETR","","",null,null],[17,"KERN_KDWRITEMAP","","",null,null],[17,"KERN_KDENABLE_BG_TRACE","","",null,null],[17,"KERN_KDDISABLE_BG_TRACE","","",null,null],[17,"KERN_KDREADCURTHRMAP","","",null,null],[17,"KERN_KDSET_TYPEFILTER","","",null,null],[17,"KERN_KDBUFWAIT","","",null,null],[17,"KERN_KDCPUMAP","","",null,null],[17,"KERN_PROC_ALL","","",null,null],[17,"KERN_PROC_PID","","",null,null],[17,"KERN_PROC_PGRP","","",null,null],[17,"KERN_PROC_SESSION","","",null,null],[17,"KERN_PROC_TTY","","",null,null],[17,"KERN_PROC_UID","","",null,null],[17,"KERN_PROC_RUID","","",null,null],[17,"KERN_PROC_LCID","","",null,null],[17,"KIPC_MAXSOCKBUF","","",null,null],[17,"KIPC_SOCKBUF_WASTE","","",null,null],[17,"KIPC_SOMAXCONN","","",null,null],[17,"KIPC_MAX_LINKHDR","","",null,null],[17,"KIPC_MAX_PROTOHDR","","",null,null],[17,"KIPC_MAX_HDR","","",null,null],[17,"KIPC_MAX_DATALEN","","",null,null],[17,"KIPC_MBSTAT","","",null,null],[17,"KIPC_NMBCLUSTERS","","",null,null],[17,"KIPC_SOQLIMITCOMPAT","","",null,null],[17,"VM_METER","","",null,null],[17,"VM_LOADAVG","","",null,null],[17,"VM_MACHFACTOR","","",null,null],[17,"VM_SWAPUSAGE","","",null,null],[17,"VM_MAXID","","",null,null],[17,"HW_MACHINE","","",null,null],[17,"HW_MODEL","","",null,null],[17,"HW_NCPU","","",null,null],[17,"HW_BYTEORDER","","",null,null],[17,"HW_PHYSMEM","","",null,null],[17,"HW_USERMEM","","",null,null],[17,"HW_PAGESIZE","","",null,null],[17,"HW_DISKNAMES","","",null,null],[17,"HW_DISKSTATS","","",null,null],[17,"HW_EPOCH","","",null,null],[17,"HW_FLOATINGPT","","",null,null],[17,"HW_MACHINE_ARCH","","",null,null],[17,"HW_VECTORUNIT","","",null,null],[17,"HW_BUS_FREQ","","",null,null],[17,"HW_CPU_FREQ","","",null,null],[17,"HW_CACHELINE","","",null,null],[17,"HW_L1ICACHESIZE","","",null,null],[17,"HW_L1DCACHESIZE","","",null,null],[17,"HW_L2SETTINGS","","",null,null],[17,"HW_L2CACHESIZE","","",null,null],[17,"HW_L3SETTINGS","","",null,null],[17,"HW_L3CACHESIZE","","",null,null],[17,"HW_TB_FREQ","","",null,null],[17,"HW_MEMSIZE","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"HW_MAXID","","",null,null],[17,"USER_CS_PATH","","",null,null],[17,"USER_BC_BASE_MAX","","",null,null],[17,"USER_BC_DIM_MAX","","",null,null],[17,"USER_BC_SCALE_MAX","","",null,null],[17,"USER_BC_STRING_MAX","","",null,null],[17,"USER_COLL_WEIGHTS_MAX","","",null,null],[17,"USER_EXPR_NEST_MAX","","",null,null],[17,"USER_LINE_MAX","","",null,null],[17,"USER_RE_DUP_MAX","","",null,null],[17,"USER_POSIX2_VERSION","","",null,null],[17,"USER_POSIX2_C_BIND","","",null,null],[17,"USER_POSIX2_C_DEV","","",null,null],[17,"USER_POSIX2_CHAR_TERM","","",null,null],[17,"USER_POSIX2_FORT_DEV","","",null,null],[17,"USER_POSIX2_FORT_RUN","","",null,null],[17,"USER_POSIX2_LOCALEDEF","","",null,null],[17,"USER_POSIX2_SW_DEV","","",null,null],[17,"USER_POSIX2_UPE","","",null,null],[17,"USER_STREAM_MAX","","",null,null],[17,"USER_TZNAME_MAX","","",null,null],[17,"USER_MAXID","","",null,null],[17,"CTL_DEBUG_NAME","","",null,null],[17,"CTL_DEBUG_VALUE","","",null,null],[17,"CTL_DEBUG_MAXID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"PRIO_DARWIN_THREAD","","",null,null],[17,"PRIO_DARWIN_PROCESS","","",null,null],[17,"PRIO_DARWIN_BG","","",null,null],[17,"PRIO_DARWIN_NONUI","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"AIO_LISTIO_MAX","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"WEXITED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_CONDATTR_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null],[17,"TIOCTIMESTAMP","","",null,null],[17,"TIOCDCDTIMESTAMP","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"cmsghdr"],[3,"if_nameindex"],[3,"aiocb"],[3,"utmpx"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"sigevent"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlock_t"],[3,"fd_set"],[3,"fsid_t"]]};
searchIndex["libffi_sys"] = {"doc":"Low-level Rust bindings for libffi","items":[[3,"__BindgenUnionField","libffi_sys","",null,null],[3,"_ffi_type","","",null,null],[12,"size","","",0,null],[12,"alignment","","",0,null],[12,"type_","","",0,null],[12,"elements","","",0,null],[3,"ffi_cif","","",null,null],[12,"abi","","",1,null],[12,"nargs","","",1,null],[12,"arg_types","","",1,null],[12,"rtype","","",1,null],[12,"bytes","","",1,null],[12,"flags","","",1,null],[3,"ffi_raw","","",null,null],[12,"sint","","",2,null],[12,"uint","","",2,null],[12,"flt","","",2,null],[12,"data","","",2,null],[12,"ptr","","",2,null],[12,"bindgen_union_field","","",2,null],[3,"ffi_closure","","",null,null],[12,"tramp","","",3,null],[12,"cif","","",3,null],[12,"fun","","",3,null],[12,"user_data","","",3,null],[3,"ffi_raw_closure","","",null,null],[12,"tramp","","",4,null],[12,"cif","","",4,null],[12,"translate_args","","",4,null],[12,"this_closure","","",4,null],[12,"fun","","",4,null],[12,"user_data","","",4,null],[3,"ffi_java_raw_closure","","",null,null],[12,"tramp","","",5,null],[12,"cif","","",5,null],[12,"translate_args","","",5,null],[12,"this_closure","","",5,null],[12,"fun","","",5,null],[12,"user_data","","",5,null],[4,"ffi_abi","","",null,null],[13,"FFI_FIRST_ABI","","",6,null],[13,"FFI_SYSV","","",6,null],[13,"FFI_UNIX64","","",6,null],[13,"FFI_THISCALL","","",6,null],[13,"FFI_FASTCALL","","",6,null],[13,"FFI_STDCALL","","",6,null],[13,"FFI_PASCAL","","",6,null],[13,"FFI_REGISTER","","",6,null],[13,"FFI_LAST_ABI","","",6,null],[4,"ffi_status","","",null,null],[13,"FFI_OK","","",7,null],[13,"FFI_BAD_TYPEDEF","","",7,null],[13,"FFI_BAD_ABI","","",7,null],[4,"ffi_type_enum","","",null,null],[13,"STRUCT","","",8,null],[13,"COMPLEX","","",8,null],[7,"ffi_type_void","","",null,null],[7,"ffi_type_uint8","","",null,null],[7,"ffi_type_sint8","","",null,null],[7,"ffi_type_uint16","","",null,null],[7,"ffi_type_sint16","","",null,null],[7,"ffi_type_uint32","","",null,null],[7,"ffi_type_sint32","","",null,null],[7,"ffi_type_uint64","","",null,null],[7,"ffi_type_sint64","","",null,null],[7,"ffi_type_float","","",null,null],[7,"ffi_type_double","","",null,null],[7,"ffi_type_pointer","","",null,null],[7,"ffi_type_longdouble","","",null,null],[7,"ffi_type_complex_float","","",null,null],[7,"ffi_type_complex_double","","",null,null],[7,"ffi_type_complex_longdouble","","",null,null],[5,"ffi_prep_cif_core","","",null,null],[5,"ffi_raw_call","","",null,null],[5,"ffi_ptrarray_to_raw","","",null,null],[5,"ffi_raw_to_ptrarray","","",null,null],[5,"ffi_raw_size","","",null,null],[5,"ffi_java_raw_call","","",null,null],[5,"ffi_java_ptrarray_to_raw","","",null,null],[5,"ffi_java_raw_to_ptrarray","","",null,null],[5,"ffi_java_raw_size","","",null,null],[5,"ffi_closure_alloc","","",null,null],[5,"ffi_closure_free","","",null,null],[5,"ffi_prep_closure","","",null,null],[5,"ffi_prep_closure_loc","","",null,null],[5,"ffi_prep_raw_closure","","",null,null],[5,"ffi_prep_raw_closure_loc","","",null,null],[5,"ffi_prep_java_raw_closure","","",null,null],[5,"ffi_prep_java_raw_closure_loc","","",null,null],[5,"ffi_prep_cif","","",null,null],[5,"ffi_prep_cif_var","","",null,null],[5,"ffi_call","","",null,null],[6,"ffi_arg","","",null,null],[6,"ffi_sarg","","",null,null],[6,"wchar_t","","",null,null],[6,"ffi_type","","",null,null],[6,"FFI_TYPE","","",null,null],[6,"ffi_java_raw","","",null,null],[17,"FFI_CLOSURES","","",null,null],[17,"FFI_TRAMPOLINE_SIZE","","",null,null],[17,"FFI_NATIVE_RAW_API","","",null,null],[17,"__DARWIN_ONLY_64_BIT_INO_T","","",null,null],[17,"__DARWIN_ONLY_VERS_1050","","",null,null],[17,"__DARWIN_ONLY_UNIX_CONFORMANCE","","",null,null],[17,"__DARWIN_UNIX03","","",null,null],[17,"__DARWIN_64_BIT_INO_T","","",null,null],[17,"__DARWIN_VERS_1050","","",null,null],[17,"__DARWIN_NON_CANCELABLE","","",null,null],[17,"__DARWIN_SUF_64_BIT_INO_T","","",null,null],[17,"__DARWIN_SUF_1050","","",null,null],[17,"__DARWIN_SUF_EXTSN","","",null,null],[17,"__DARWIN_C_ANSI","","",null,null],[17,"__DARWIN_C_FULL","","",null,null],[17,"__DARWIN_C_LEVEL","","",null,null],[17,"__STDC_WANT_LIB_EXT1__","","",null,null],[17,"_DARWIN_FEATURE_64_BIT_INODE","","",null,null],[17,"_DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE","","",null,null],[17,"_DARWIN_FEATURE_UNIX_CONFORMANCE","","",null,null],[17,"__DARWIN_CLK_TCK","","",null,null],[17,"CHAR_BIT","","",null,null],[17,"MB_LEN_MAX","","",null,null],[17,"CLK_TCK","","",null,null],[17,"SCHAR_MAX","","",null,null],[17,"SCHAR_MIN","","",null,null],[17,"UCHAR_MAX","","",null,null],[17,"CHAR_MAX","","",null,null],[17,"CHAR_MIN","","",null,null],[17,"USHRT_MAX","","",null,null],[17,"SHRT_MAX","","",null,null],[17,"SHRT_MIN","","",null,null],[17,"UINT_MAX","","",null,null],[17,"INT_MAX","","",null,null],[17,"INT_MIN","","",null,null],[17,"ULONG_MAX","","",null,null],[17,"LONG_MAX","","",null,null],[17,"LONG_MIN","","",null,null],[17,"ULLONG_MAX","","",null,null],[17,"LLONG_MAX","","",null,null],[17,"LLONG_MIN","","",null,null],[17,"LONG_BIT","","",null,null],[17,"SSIZE_MAX","","",null,null],[17,"WORD_BIT","","",null,null],[17,"SIZE_T_MAX","","",null,null],[17,"UQUAD_MAX","","",null,null],[17,"QUAD_MAX","","",null,null],[17,"QUAD_MIN","","",null,null],[17,"ARG_MAX","","",null,null],[17,"CHILD_MAX","","",null,null],[17,"GID_MAX","","",null,null],[17,"LINK_MAX","","",null,null],[17,"MAX_CANON","","",null,null],[17,"MAX_INPUT","","",null,null],[17,"NAME_MAX","","",null,null],[17,"NGROUPS_MAX","","",null,null],[17,"UID_MAX","","",null,null],[17,"OPEN_MAX","","",null,null],[17,"PATH_MAX","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"BC_BASE_MAX","","",null,null],[17,"BC_DIM_MAX","","",null,null],[17,"BC_SCALE_MAX","","",null,null],[17,"BC_STRING_MAX","","",null,null],[17,"CHARCLASS_NAME_MAX","","",null,null],[17,"COLL_WEIGHTS_MAX","","",null,null],[17,"EQUIV_CLASS_MAX","","",null,null],[17,"EXPR_NEST_MAX","","",null,null],[17,"LINE_MAX","","",null,null],[17,"RE_DUP_MAX","","",null,null],[17,"NZERO","","",null,null],[17,"_POSIX_ARG_MAX","","",null,null],[17,"_POSIX_CHILD_MAX","","",null,null],[17,"_POSIX_LINK_MAX","","",null,null],[17,"_POSIX_MAX_CANON","","",null,null],[17,"_POSIX_MAX_INPUT","","",null,null],[17,"_POSIX_NAME_MAX","","",null,null],[17,"_POSIX_NGROUPS_MAX","","",null,null],[17,"_POSIX_OPEN_MAX","","",null,null],[17,"_POSIX_PATH_MAX","","",null,null],[17,"_POSIX_PIPE_BUF","","",null,null],[17,"_POSIX_SSIZE_MAX","","",null,null],[17,"_POSIX_STREAM_MAX","","",null,null],[17,"_POSIX_TZNAME_MAX","","",null,null],[17,"_POSIX2_BC_BASE_MAX","","",null,null],[17,"_POSIX2_BC_DIM_MAX","","",null,null],[17,"_POSIX2_BC_SCALE_MAX","","",null,null],[17,"_POSIX2_BC_STRING_MAX","","",null,null],[17,"_POSIX2_EQUIV_CLASS_MAX","","",null,null],[17,"_POSIX2_EXPR_NEST_MAX","","",null,null],[17,"_POSIX2_LINE_MAX","","",null,null],[17,"_POSIX2_RE_DUP_MAX","","",null,null],[17,"_POSIX_AIO_LISTIO_MAX","","",null,null],[17,"_POSIX_AIO_MAX","","",null,null],[17,"_POSIX_DELAYTIMER_MAX","","",null,null],[17,"_POSIX_MQ_OPEN_MAX","","",null,null],[17,"_POSIX_MQ_PRIO_MAX","","",null,null],[17,"_POSIX_RTSIG_MAX","","",null,null],[17,"_POSIX_SEM_NSEMS_MAX","","",null,null],[17,"_POSIX_SEM_VALUE_MAX","","",null,null],[17,"_POSIX_SIGQUEUE_MAX","","",null,null],[17,"_POSIX_TIMER_MAX","","",null,null],[17,"_POSIX_CLOCKRES_MIN","","",null,null],[17,"_POSIX_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_POSIX_THREAD_KEYS_MAX","","",null,null],[17,"_POSIX_THREAD_THREADS_MAX","","",null,null],[17,"PTHREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"PTHREAD_KEYS_MAX","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"_POSIX_HOST_NAME_MAX","","",null,null],[17,"_POSIX_LOGIN_NAME_MAX","","",null,null],[17,"_POSIX_SS_REPL_MAX","","",null,null],[17,"_POSIX_SYMLINK_MAX","","",null,null],[17,"_POSIX_SYMLOOP_MAX","","",null,null],[17,"_POSIX_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_POSIX_TRACE_NAME_MAX","","",null,null],[17,"_POSIX_TRACE_SYS_MAX","","",null,null],[17,"_POSIX_TRACE_USER_EVENT_MAX","","",null,null],[17,"_POSIX_TTY_NAME_MAX","","",null,null],[17,"_POSIX2_CHARCLASS_NAME_MAX","","",null,null],[17,"_POSIX2_COLL_WEIGHTS_MAX","","",null,null],[17,"_POSIX_RE_DUP_MAX","","",null,null],[17,"OFF_MIN","","",null,null],[17,"OFF_MAX","","",null,null],[17,"PASS_MAX","","",null,null],[17,"NL_ARGMAX","","",null,null],[17,"NL_LANGMAX","","",null,null],[17,"NL_MSGMAX","","",null,null],[17,"NL_NMAX","","",null,null],[17,"NL_SETMAX","","",null,null],[17,"NL_TEXTMAX","","",null,null],[17,"_XOPEN_IOV_MAX","","",null,null],[17,"IOV_MAX","","",null,null],[17,"_XOPEN_NAME_MAX","","",null,null],[17,"_XOPEN_PATH_MAX","","",null,null],[17,"FFI_64_BIT_MAX","","",null,null],[17,"FFI_SIZEOF_ARG","","",null,null],[17,"FFI_SIZEOF_JAVA_RAW","","",null,null],[17,"FFI_TYPE_VOID","","",null,null],[17,"FFI_TYPE_INT","","",null,null],[17,"FFI_TYPE_FLOAT","","",null,null],[17,"FFI_TYPE_DOUBLE","","",null,null],[17,"FFI_TYPE_LONGDOUBLE","","",null,null],[17,"FFI_TYPE_UINT8","","",null,null],[17,"FFI_TYPE_SINT8","","",null,null],[17,"FFI_TYPE_UINT16","","",null,null],[17,"FFI_TYPE_SINT16","","",null,null],[17,"FFI_TYPE_UINT32","","",null,null],[17,"FFI_TYPE_SINT32","","",null,null],[17,"FFI_TYPE_UINT64","","",null,null],[17,"FFI_TYPE_SINT64","","",null,null],[17,"FFI_TYPE_STRUCT","","",null,null],[17,"FFI_TYPE_POINTER","","",null,null],[17,"FFI_TYPE_COMPLEX","","",null,null],[17,"FFI_TYPE_LAST","","",null,null],[17,"ffi_abi_FFI_DEFAULT_ABI","","",null,null],[11,"new","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ffi_abi"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"ffi_abi"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"ffi_status"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"ffi_status"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"ffi_raw"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ffi_type_enum"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"ffi_type_enum"}],"output":{"name":"bool"}}],[11,"hash","","",8,null]],"paths":[[3,"_ffi_type"],[3,"ffi_cif"],[3,"ffi_raw"],[3,"ffi_closure"],[3,"ffi_raw_closure"],[3,"ffi_java_raw_closure"],[4,"ffi_abi"],[4,"ffi_status"],[4,"ffi_type_enum"],[3,"__BindgenUnionField"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["ncurses"] = {"doc":"","items":[[4,"CURSOR_VISIBILITY","ncurses","",null,null],[13,"CURSOR_INVISIBLE","","",0,null],[13,"CURSOR_VISIBLE","","",0,null],[13,"CURSOR_VERY_VISIBLE","","",0,null],[4,"WchResult","","",null,null],[13,"KeyCode","","",1,null],[13,"Char","","",1,null],[5,"addch","","",null,{"inputs":[{"name":"chtype"}],"output":{"name":"i32"}}],[5,"addchnstr","","",null,null],[5,"addchstr","","",null,null],[5,"addnstr","","",null,{"inputs":[{"name":"str"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"addstr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"i32"}}],[5,"assume_default_colors","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"attroff","","",null,{"inputs":[{"name":"ncurses_attr_t"}],"output":{"name":"i32"}}],[5,"attron","","",null,{"inputs":[{"name":"ncurses_attr_t"}],"output":{"name":"i32"}}],[5,"attrset","","",null,{"inputs":[{"name":"ncurses_attr_t"}],"output":{"name":"i32"}}],[5,"attr_get","","",null,{"inputs":[{"name":"attr_t"},{"name":"i16"}],"output":{"name":"i32"}}],[5,"attr_off","","",null,{"inputs":[{"name":"attr_t"}],"output":{"name":"i32"}}],[5,"attr_on","","",null,{"inputs":[{"name":"attr_t"}],"output":{"name":"i32"}}],[5,"attr_set","","",null,{"inputs":[{"name":"attr_t"},{"name":"i16"}],"output":{"name":"i32"}}],[5,"baudrate","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"beep","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"bkgd","","",null,{"inputs":[{"name":"chtype"}],"output":{"name":"i32"}}],[5,"bkgdset","","",null,{"inputs":[{"name":"chtype"}],"output":null}],[5,"border","","",null,{"inputs":[{"name":"chtype"},{"name":"chtype"},{"name":"chtype"},{"name":"chtype"},{"name":"chtype"},{"name":"chtype"},{"name":"chtype"},{"name":"chtype"}],"output":{"name":"i32"}}],[5,"box_","","",null,{"inputs":[{"name":"window"},{"name":"chtype"},{"name":"chtype"}],"output":{"name":"i32"}}],[5,"can_change_color","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"cbreak","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"chgat","","",null,{"inputs":[{"name":"i32"},{"name":"attr_t"},{"name":"i16"}],"output":{"name":"i32"}}],[5,"clear","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"clearok","","",null,{"inputs":[{"name":"window"},{"name":"bool"}],"output":{"name":"i32"}}],[5,"clrtobot","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"clrtoeol","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"color_content","","",null,{"inputs":[{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i32"}}],[5,"color_set","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"i32"}}],[5,"copywin","","",null,{"inputs":[{"name":"window"},{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"curs_set","","",null,{"inputs":[{"name":"cursor_visibility"}],"output":{"name":"option"}}],[5,"def_prog_mode","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"def_shell_mode","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"delay_output","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"delch","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"delscreen","","",null,{"inputs":[{"name":"screen"}],"output":null}],[5,"delwin","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"deleteln","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"derwin","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"window"}}],[5,"doupdate","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"dupwin","","",null,{"inputs":[{"name":"window"}],"output":{"name":"window"}}],[5,"echo","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"echochar","","",null,{"inputs":[{"name":"chtype"}],"output":{"name":"i32"}}],[5,"erase","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"endwin","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"erasechar","","",null,{"inputs":[],"output":{"name":"char"}}],[5,"filter","","",null,{"inputs":[],"output":null}],[5,"flash","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"flushinp","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"getbkgd","","",null,{"inputs":[{"name":"window"}],"output":{"name":"chtype"}}],[5,"getch","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"get_wch","","",null,{"inputs":[],"output":{"name":"option"}}],[5,"mvget_wch","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[5,"wget_wch","","",null,{"inputs":[{"name":"window"}],"output":{"name":"option"}}],[5,"mvwget_wch","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"option"}}],[5,"unget_wch","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"i32"}}],[5,"getnstr","","",null,{"inputs":[{"name":"string"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"getstr","","",null,{"inputs":[{"name":"string"}],"output":{"name":"i32"}}],[5,"getwin","","",null,null],[5,"getattrs","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"getcurx","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"getcury","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"getbegx","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"getbegy","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"getmaxx","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"getmaxy","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"getparx","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"getpary","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"halfdelay","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"has_colors","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_ic","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"has_il","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"hline","","",null,{"inputs":[{"name":"chtype"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"idcok","","",null,{"inputs":[{"name":"window"},{"name":"bool"}],"output":null}],[5,"idlok","","",null,{"inputs":[{"name":"window"},{"name":"bool"}],"output":{"name":"i32"}}],[5,"immedok","","",null,{"inputs":[{"name":"window"},{"name":"bool"}],"output":null}],[5,"inch","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"inchnstr","","",null,{"inputs":[{"name":"vec"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"inchstr","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"i32"}}],[5,"initscr","","",null,{"inputs":[],"output":{"name":"window"}}],[5,"init_color","","",null,{"inputs":[{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i32"}}],[5,"init_pair","","",null,{"inputs":[{"name":"i16"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i32"}}],[5,"innstr","","",null,{"inputs":[{"name":"string"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"insch","","",null,{"inputs":[{"name":"chtype"}],"output":{"name":"i32"}}],[5,"insdelln","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"insertln","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"insnstr","","",null,{"inputs":[{"name":"str"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"insstr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"i32"}}],[5,"instr","","",null,{"inputs":[{"name":"string"}],"output":{"name":"i32"}}],[5,"intrflush","","",null,{"inputs":[{"name":"window"},{"name":"bool"}],"output":{"name":"i32"}}],[5,"isendwin","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"is_linetouched","","",null,{"inputs":[{"name":"window"},{"name":"i32"}],"output":{"name":"bool"}}],[5,"is_wintouched","","",null,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[5,"is_cleared","","",null,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[5,"is_idcok","","",null,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[5,"is_idlok","","",null,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[5,"is_immedok","","",null,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[5,"is_keypad","","",null,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[5,"is_leaveok","","",null,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[5,"is_nodelay","","",null,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[5,"is_notimeout","","",null,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[5,"is_scrollok","","",null,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[5,"is_syncok","","",null,{"inputs":[{"name":"window"}],"output":{"name":"bool"}}],[5,"keyname","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"string"}}],[5,"keypad","","",null,{"inputs":[{"name":"window"},{"name":"bool"}],"output":{"name":"i32"}}],[5,"killchar","","",null,{"inputs":[],"output":{"name":"char"}}],[5,"leaveok","","",null,{"inputs":[{"name":"window"},{"name":"bool"}],"output":{"name":"i32"}}],[5,"longname","","",null,{"inputs":[],"output":{"name":"string"}}],[5,"meta","","",null,{"inputs":[{"name":"window"},{"name":"bool"}],"output":{"name":"i32"}}],[5,"mv","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvaddch","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"chtype"}],"output":{"name":"i32"}}],[5,"mvaddchnstr","","",null,null],[5,"mvaddchstr","","",null,null],[5,"mvaddnstr","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"str"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvaddstr","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"str"}],"output":{"name":"i32"}}],[5,"mvchgat","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"attr_t"},{"name":"i16"}],"output":{"name":"i32"}}],[5,"mvcur","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvdelch","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvderwin","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvgetch","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvgetnstr","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"string"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvgetstr","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"string"}],"output":{"name":"i32"}}],[5,"mvhline","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"chtype"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvinch","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"chtype"}}],[5,"mvinchnstr","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"vec"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvinchstr","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"vec"}],"output":{"name":"i32"}}],[5,"mvinnstr","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"string"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvinsch","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"chtype"}],"output":{"name":"i32"}}],[5,"mvinsnstr","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"str"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvinsstr","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"str"}],"output":{"name":"i32"}}],[5,"mvinstr","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"string"}],"output":{"name":"i32"}}],[5,"mvprintw","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"str"}],"output":{"name":"i32"}}],[5,"mvvline","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"chtype"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvwaddch","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"chtype"}],"output":{"name":"i32"}}],[5,"mvwaddchnstr","","",null,null],[5,"mvwaddchstr","","",null,null],[5,"mvwaddnstr","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"str"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvwaddstr","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"str"}],"output":{"name":"i32"}}],[5,"mvwchgat","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"attr_t"},{"name":"i16"}],"output":{"name":"i32"}}],[5,"mvwdelch","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvwgetch","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvwgetnstr","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"string"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvwgetstr","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"string"}],"output":{"name":"i32"}}],[5,"mvwhline","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"chtype"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvwin","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvwinch","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"chtype"}}],[5,"mvwinchnstr","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"vec"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvwinchstr","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"vec"}],"output":{"name":"i32"}}],[5,"mvwinnstr","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"string"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvwinsch","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"chtype"}],"output":{"name":"i32"}}],[5,"mvwinsnstr","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"str"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"mvwinsstr","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"str"}],"output":{"name":"i32"}}],[5,"mvwinstr","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"string"}],"output":{"name":"i32"}}],[5,"mvwprintw","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"str"}],"output":{"name":"i32"}}],[5,"mvwvline","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"chtype"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"napms","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"newpad","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"window"}}],[5,"newterm","","",null,{"inputs":[{"name":"option"},{"name":"file_p"},{"name":"file_p"}],"output":{"name":"screen"}}],[5,"newwin","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"window"}}],[5,"nl","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"nocbreak","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"nodelay","","",null,{"inputs":[{"name":"window"},{"name":"bool"}],"output":{"name":"i32"}}],[5,"noecho","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"nonl","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"noqiflush","","",null,{"inputs":[],"output":null}],[5,"noraw","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"notimeout","","",null,{"inputs":[{"name":"window"},{"name":"bool"}],"output":{"name":"i32"}}],[5,"overlay","","",null,{"inputs":[{"name":"window"},{"name":"window"}],"output":{"name":"i32"}}],[5,"overwrite","","",null,{"inputs":[{"name":"window"},{"name":"window"}],"output":{"name":"i32"}}],[5,"pair_content","","",null,{"inputs":[{"name":"i16"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i32"}}],[5,"PAIR_NUMBER","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"pechochar","","",null,{"inputs":[{"name":"window"},{"name":"chtype"}],"output":{"name":"i32"}}],[5,"pnoutrefresh","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"prefresh","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"printw","","",null,{"inputs":[{"name":"str"}],"output":{"name":"i32"}}],[5,"putp","","",null,{"inputs":[{"name":"str"}],"output":{"name":"i32"}}],[5,"putwin","","",null,{"inputs":[{"name":"window"},{"name":"file_p"}],"output":{"name":"i32"}}],[5,"qiflush","","",null,{"inputs":[],"output":null}],[5,"raw","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"redrawwin","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"refresh","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"resetty","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"reset_prog_mode","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"reset_shell_mode","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"savetty","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"scr_dump","","",null,{"inputs":[{"name":"str"}],"output":{"name":"i32"}}],[5,"scr_init","","",null,{"inputs":[{"name":"str"}],"output":{"name":"i32"}}],[5,"scrl","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"scroll","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"scrollok","","",null,{"inputs":[{"name":"window"},{"name":"bool"}],"output":{"name":"i32"}}],[5,"scr_restore","","",null,{"inputs":[{"name":"str"}],"output":{"name":"i32"}}],[5,"scr_set","","",null,{"inputs":[{"name":"str"}],"output":{"name":"i32"}}],[5,"setlocale","","",null,{"inputs":[{"name":"lccategory"},{"name":"str"}],"output":{"name":"string"}}],[5,"setscrreg","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"set_term","","",null,{"inputs":[{"name":"screen"}],"output":{"name":"screen"}}],[5,"slk_attroff","","",null,{"inputs":[{"name":"chtype"}],"output":{"name":"i32"}}],[5,"slk_attron","","",null,{"inputs":[{"name":"chtype"}],"output":{"name":"i32"}}],[5,"slk_attrset","","",null,{"inputs":[{"name":"chtype"}],"output":{"name":"i32"}}],[5,"slk_attr","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"slk_attr_set","","",null,{"inputs":[{"name":"attr_t"},{"name":"i16"}],"output":{"name":"i32"}}],[5,"slk_clear","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"slk_color","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"i32"}}],[5,"slk_init","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"slk_label","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"string"}}],[5,"slk_noutrefresh","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"slk_refresh","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"slk_restore","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"slk_set","","",null,{"inputs":[{"name":"i32"},{"name":"str"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"slk_touch","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"standout","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"standend","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"start_color","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"subpad","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"window"}}],[5,"subwin","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"window"}}],[5,"syncok","","",null,{"inputs":[{"name":"window"},{"name":"bool"}],"output":{"name":"i32"}}],[5,"termattrs","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"termname","","",null,{"inputs":[],"output":{"name":"string"}}],[5,"timeout","","",null,{"inputs":[{"name":"i32"}],"output":null}],[5,"touchline","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"touchwin","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"typeahead","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"tigetflag","","",null,{"inputs":[{"name":"str"}],"output":{"name":"i32"}}],[5,"tigetnum","","",null,{"inputs":[{"name":"str"}],"output":{"name":"i32"}}],[5,"tigetstr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"tparm","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"ungetch","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"untouchwin","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"use_env","","",null,{"inputs":[{"name":"bool"}],"output":null}],[5,"use_default_colors","","",null,{"inputs":[],"output":{"name":"i32"}}],[5,"vidattr","","",null,{"inputs":[{"name":"chtype"}],"output":{"name":"i32"}}],[5,"vline","","",null,{"inputs":[{"name":"chtype"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"waddch","","",null,{"inputs":[{"name":"window"},{"name":"chtype"}],"output":{"name":"i32"}}],[5,"waddchnstr","","",null,null],[5,"waddchstr","","",null,null],[5,"waddnstr","","",null,{"inputs":[{"name":"window"},{"name":"str"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"waddstr","","",null,{"inputs":[{"name":"window"},{"name":"str"}],"output":{"name":"i32"}}],[5,"wattron","","",null,{"inputs":[{"name":"window"},{"name":"ncurses_attr_t"}],"output":{"name":"i32"}}],[5,"wattroff","","",null,{"inputs":[{"name":"window"},{"name":"ncurses_attr_t"}],"output":{"name":"i32"}}],[5,"wattrset","","",null,{"inputs":[{"name":"window"},{"name":"ncurses_attr_t"}],"output":{"name":"i32"}}],[5,"wattr_get","","",null,{"inputs":[{"name":"window"},{"name":"attr_t"},{"name":"i16"}],"output":{"name":"i32"}}],[5,"wattr_on","","",null,{"inputs":[{"name":"window"},{"name":"attr_t"}],"output":{"name":"i32"}}],[5,"wattr_off","","",null,{"inputs":[{"name":"window"},{"name":"attr_t"}],"output":{"name":"i32"}}],[5,"wattr_set","","",null,{"inputs":[{"name":"window"},{"name":"attr_t"},{"name":"i16"}],"output":{"name":"i32"}}],[5,"wbkgd","","",null,{"inputs":[{"name":"window"},{"name":"chtype"}],"output":{"name":"i32"}}],[5,"wbkgdset","","",null,{"inputs":[{"name":"window"},{"name":"chtype"}],"output":null}],[5,"wborder","","",null,{"inputs":[{"name":"window"},{"name":"chtype"},{"name":"chtype"},{"name":"chtype"},{"name":"chtype"},{"name":"chtype"},{"name":"chtype"},{"name":"chtype"},{"name":"chtype"}],"output":{"name":"i32"}}],[5,"wchgat","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"attr_t"},{"name":"i16"}],"output":{"name":"i32"}}],[5,"wclear","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"wclrtobot","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"wclrtoeol","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"wcolor_set","","",null,{"inputs":[{"name":"window"},{"name":"i16"}],"output":{"name":"i32"}}],[5,"wcursyncup","","",null,{"inputs":[{"name":"window"}],"output":null}],[5,"wdelch","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"wdeleteln","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"wechochar","","",null,{"inputs":[{"name":"window"},{"name":"chtype"}],"output":{"name":"i32"}}],[5,"werase","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"wgetch","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"wgetnstr","","",null,{"inputs":[{"name":"window"},{"name":"string"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"wgetstr","","",null,{"inputs":[{"name":"window"},{"name":"string"}],"output":{"name":"i32"}}],[5,"whline","","",null,{"inputs":[{"name":"window"},{"name":"chtype"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"winch","","",null,{"inputs":[{"name":"window"}],"output":{"name":"chtype"}}],[5,"winchnstr","","",null,{"inputs":[{"name":"window"},{"name":"vec"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"winchstr","","",null,{"inputs":[{"name":"window"},{"name":"vec"}],"output":{"name":"i32"}}],[5,"winnstr","","",null,{"inputs":[{"name":"window"},{"name":"string"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"winsch","","",null,{"inputs":[{"name":"window"},{"name":"chtype"}],"output":{"name":"i32"}}],[5,"winsdelln","","",null,{"inputs":[{"name":"window"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"winsertln","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"winsnstr","","",null,{"inputs":[{"name":"window"},{"name":"str"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"winsstr","","",null,{"inputs":[{"name":"window"},{"name":"str"}],"output":{"name":"i32"}}],[5,"winstr","","",null,{"inputs":[{"name":"window"},{"name":"string"}],"output":{"name":"i32"}}],[5,"wmove","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"wnoutrefresh","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"wprintw","","",null,{"inputs":[{"name":"window"},{"name":"str"}],"output":{"name":"i32"}}],[5,"wredrawln","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"wrefresh","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"wresize","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"wscrl","","",null,{"inputs":[{"name":"window"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"wsetscrreg","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"wstandout","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"wstandend","","",null,{"inputs":[{"name":"window"}],"output":{"name":"i32"}}],[5,"wsyncdown","","",null,{"inputs":[{"name":"window"}],"output":null}],[5,"wsyncup","","",null,{"inputs":[{"name":"window"}],"output":null}],[5,"wtimeout","","",null,{"inputs":[{"name":"window"},{"name":"i32"}],"output":null}],[5,"wtouchln","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"wvline","","",null,{"inputs":[{"name":"window"},{"name":"chtype"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"wgetparent","","",null,{"inputs":[{"name":"window"}],"output":{"name":"window"}}],[5,"wgetscrreg","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"NCURSES_BITS","","",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"A_NORMAL","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_ATTRIBUTES","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_CHARTEXT","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_COLOR","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_STANDOUT","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_UNDERLINE","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_REVERSE","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_BLINK","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_DIM","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_BOLD","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_ALTCHARSET","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_INVIS","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_PROTECT","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_HORIZONTAL","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_LEFT","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_LOW","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_RIGHT","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_TOP","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"A_VERTICAL","","",null,{"inputs":[],"output":{"name":"attr_t"}}],[5,"COLOR_PAIR","","",null,{"inputs":[{"name":"i16"}],"output":{"name":"attr_t"}}],[5,"getyx","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":null}],[5,"getbegyx","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":null}],[5,"getmaxyx","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":null}],[5,"getparyx","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":null}],[5,"getsyx","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":null}],[5,"setsyx","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":null}],[5,"NCURSES_ACS","","",null,{"inputs":[{"name":"char"}],"output":{"name":"chtype"}}],[5,"ACS_ULCORNER","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_LLCORNER","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_URCORNER","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_LRCORNER","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_LTEE","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_RTEE","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_BTEE","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_TTEE","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_HLINE","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_VLINE","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_PLUS","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_S1","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_S9","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_DIAMOND","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_CKBOARD","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_DEGREE","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_PLMINUS","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_BULLET","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_LARROW","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_RARROW","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_DARROW","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_UARROW","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_BOARD","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_LANTERN","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_BLOCK","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_S3","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_S7","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_LEQUAL","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_GEQUAL","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_PI","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_NEQUAL","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_STERLING","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_BSSB","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_SSBB","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_BBSS","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_SBBS","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_SBSS","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_SSSB","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_SSBS","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_BSSS","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_BSBS","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_SBSB","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"ACS_SSSS","","",null,{"inputs":[],"output":{"name":"chtype"}}],[5,"KEY_F","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"i32"}}],[5,"has_mouse","","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"getmouse","","",null,null],[5,"ungetmouse","","",null,null],[5,"mouseinterval","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"mousemask","","",null,{"inputs":[{"name":"mmask_t"},{"name":"option"}],"output":{"name":"mmask_t"}}],[5,"wenclose","","",null,{"inputs":[{"name":"window"},{"name":"i32"},{"name":"i32"}],"output":{"name":"bool"}}],[5,"wmouse_trafo","","",null,null],[5,"mouse_trafo","","",null,null],[0,"ll","","",null,null],[3,"MEVENT","ncurses::ll","",null,null],[12,"id","","",2,null],[12,"x","","",2,null],[12,"y","","",2,null],[12,"z","","",2,null],[12,"bstate","","",2,null],[5,"addch","","",null,null],[5,"addchnstr","","",null,null],[5,"addchstr","","",null,null],[5,"addnstr","","",null,null],[5,"addstr","","",null,null],[5,"assume_default_colors","","",null,null],[5,"attroff","","",null,null],[5,"attron","","",null,null],[5,"attrset","","",null,null],[5,"attr_get","","",null,null],[5,"attr_off","","",null,null],[5,"attr_on","","",null,null],[5,"attr_set","","",null,null],[5,"baudrate","","",null,null],[5,"beep","","",null,null],[5,"bkgd","","",null,null],[5,"bkgdset","","",null,null],[5,"border","","",null,null],[5,"box_","","",null,null],[5,"can_change_color","","",null,null],[5,"cbreak","","",null,null],[5,"chgat","","",null,null],[5,"clear","","",null,null],[5,"clearok","","",null,null],[5,"clrtobot","","",null,null],[5,"clrtoeol","","",null,null],[5,"color_content","","",null,null],[5,"color_set","","",null,null],[5,"COLOR_PAIR","","",null,null],[5,"copywin","","",null,null],[5,"curs_set","","",null,null],[5,"def_prog_mode","","",null,null],[5,"def_shell_mode","","",null,null],[5,"delay_output","","",null,null],[5,"delch","","",null,null],[5,"delscreen","","",null,null],[5,"delwin","","",null,null],[5,"deleteln","","",null,null],[5,"derwin","","",null,null],[5,"doupdate","","",null,null],[5,"dupwin","","",null,null],[5,"echo","","",null,null],[5,"echochar","","",null,null],[5,"erase","","",null,null],[5,"endwin","","",null,null],[5,"erasechar","","",null,null],[5,"filter","","",null,null],[5,"flash","","",null,null],[5,"flushinp","","",null,null],[5,"getbkgd","","",null,null],[5,"getch","","",null,null],[5,"getnstr","","",null,null],[5,"getstr","","",null,null],[5,"getwin","","",null,null],[5,"halfdelay","","",null,null],[5,"has_colors","","",null,null],[5,"has_ic","","",null,null],[5,"has_il","","",null,null],[5,"hline","","",null,null],[5,"idcok","","",null,null],[5,"idlok","","",null,null],[5,"immedok","","",null,null],[5,"inch","","",null,null],[5,"inchnstr","","",null,null],[5,"inchstr","","",null,null],[5,"initscr","","",null,null],[5,"init_color","","",null,null],[5,"init_pair","","",null,null],[5,"innstr","","",null,null],[5,"insch","","",null,null],[5,"insdelln","","",null,null],[5,"insertln","","",null,null],[5,"insnstr","","",null,null],[5,"insstr","","",null,null],[5,"instr","","",null,null],[5,"intrflush","","",null,null],[5,"isendwin","","",null,null],[5,"is_linetouched","","",null,null],[5,"is_wintouched","","",null,null],[5,"keyname","","",null,null],[5,"keypad","","",null,null],[5,"killchar","","",null,null],[5,"leaveok","","",null,null],[5,"longname","","",null,null],[5,"meta","","",null,null],[5,"mv","","",null,null],[5,"mvaddch","","",null,null],[5,"mvaddchnstr","","",null,null],[5,"mvaddchstr","","",null,null],[5,"mvaddnstr","","",null,null],[5,"mvaddstr","","",null,null],[5,"mvchgat","","",null,null],[5,"mvcur","","",null,null],[5,"mvdelch","","",null,null],[5,"mvderwin","","",null,null],[5,"mvgetch","","",null,null],[5,"mvgetnstr","","",null,null],[5,"mvgetstr","","",null,null],[5,"mvhline","","",null,null],[5,"mvinch","","",null,null],[5,"mvinchnstr","","",null,null],[5,"mvinchstr","","",null,null],[5,"mvinnstr","","",null,null],[5,"mvinsch","","",null,null],[5,"mvinsnstr","","",null,null],[5,"mvinsstr","","",null,null],[5,"mvinstr","","",null,null],[5,"mvprintw","","",null,null],[5,"mvvline","","",null,null],[5,"mvwaddch","","",null,null],[5,"mvwaddchnstr","","",null,null],[5,"mvwaddchstr","","",null,null],[5,"mvwaddnstr","","",null,null],[5,"mvwaddstr","","",null,null],[5,"mvwchgat","","",null,null],[5,"mvwdelch","","",null,null],[5,"mvwgetch","","",null,null],[5,"mvwgetnstr","","",null,null],[5,"mvwgetstr","","",null,null],[5,"mvwhline","","",null,null],[5,"mvwin","","",null,null],[5,"mvwinch","","",null,null],[5,"mvwinchnstr","","",null,null],[5,"mvwinchstr","","",null,null],[5,"mvwinnstr","","",null,null],[5,"mvwinsch","","",null,null],[5,"mvwinsnstr","","",null,null],[5,"mvwinsstr","","",null,null],[5,"mvwinstr","","",null,null],[5,"mvwprintw","","",null,null],[5,"mvwvline","","",null,null],[5,"napms","","",null,null],[5,"newpad","","",null,null],[5,"newterm","","",null,null],[5,"newwin","","",null,null],[5,"nl","","",null,null],[5,"nocbreak","","",null,null],[5,"nodelay","","",null,null],[5,"noecho","","",null,null],[5,"nonl","","",null,null],[5,"noqiflush","","",null,null],[5,"noraw","","",null,null],[5,"notimeout","","",null,null],[5,"overlay","","",null,null],[5,"overwrite","","",null,null],[5,"pair_content","","",null,null],[5,"PAIR_NUMBER","","",null,null],[5,"pechochar","","",null,null],[5,"pnoutrefresh","","",null,null],[5,"prefresh","","",null,null],[5,"printw","","",null,null],[5,"putwin","","",null,null],[5,"qiflush","","",null,null],[5,"raw","","",null,null],[5,"redrawwin","","",null,null],[5,"refresh","","",null,null],[5,"resetty","","",null,null],[5,"reset_prog_mode","","",null,null],[5,"reset_shell_mode","","",null,null],[5,"savetty","","",null,null],[5,"scr_dump","","",null,null],[5,"scr_init","","",null,null],[5,"scrl","","",null,null],[5,"scroll","","",null,null],[5,"scrollok","","",null,null],[5,"scr_restore","","",null,null],[5,"scr_set","","",null,null],[5,"setlocale","","",null,null],[5,"setscrreg","","",null,null],[5,"set_term","","",null,null],[5,"slk_attroff","","",null,null],[5,"slk_attr_off","","",null,null],[5,"slk_attron","","",null,null],[5,"slk_attr_on","","",null,null],[5,"slk_attrset","","",null,null],[5,"slk_attr","","",null,null],[5,"slk_attr_set","","",null,null],[5,"slk_clear","","",null,null],[5,"slk_color","","",null,null],[5,"slk_init","","",null,null],[5,"slk_label","","",null,null],[5,"slk_noutrefresh","","",null,null],[5,"slk_refresh","","",null,null],[5,"slk_restore","","",null,null],[5,"slk_set","","",null,null],[5,"slk_touch","","",null,null],[5,"standout","","",null,null],[5,"standend","","",null,null],[5,"start_color","","",null,null],[5,"subpad","","",null,null],[5,"subwin","","",null,null],[5,"syncok","","",null,null],[5,"termattrs","","",null,null],[5,"termname","","",null,null],[5,"timeout","","",null,null],[5,"touchline","","",null,null],[5,"touchwin","","",null,null],[5,"typeahead","","",null,null],[5,"ungetch","","",null,null],[5,"untouchwin","","",null,null],[5,"use_env","","",null,null],[5,"use_default_colors","","",null,null],[5,"vidattr","","",null,null],[5,"vline","","",null,null],[5,"vwprintw","","",null,null],[5,"vw_printw","","",null,null],[5,"waddch","","",null,null],[5,"waddchnstr","","",null,null],[5,"waddchstr","","",null,null],[5,"waddnstr","","",null,null],[5,"waddstr","","",null,null],[5,"wattron","","",null,null],[5,"wattroff","","",null,null],[5,"wattrset","","",null,null],[5,"wattr_get","","",null,null],[5,"wattr_on","","",null,null],[5,"wattr_off","","",null,null],[5,"wattr_set","","",null,null],[5,"wbkgd","","",null,null],[5,"wbkgdset","","",null,null],[5,"wborder","","",null,null],[5,"wchgat","","",null,null],[5,"wclear","","",null,null],[5,"wclrtobot","","",null,null],[5,"wclrtoeol","","",null,null],[5,"wcolor_set","","",null,null],[5,"wcursyncup","","",null,null],[5,"wdelch","","",null,null],[5,"wdeleteln","","",null,null],[5,"wechochar","","",null,null],[5,"werase","","",null,null],[5,"wgetch","","",null,null],[5,"wget_wch","","",null,null],[5,"mvwget_wch","","",null,null],[5,"mvget_wch","","",null,null],[5,"get_wch","","",null,null],[5,"unget_wch","","",null,null],[5,"wgetnstr","","",null,null],[5,"wgetstr","","",null,null],[5,"whline","","",null,null],[5,"winch","","",null,null],[5,"winchnstr","","",null,null],[5,"winchstr","","",null,null],[5,"winnstr","","",null,null],[5,"winsch","","",null,null],[5,"winsdelln","","",null,null],[5,"winsertln","","",null,null],[5,"winsnstr","","",null,null],[5,"winsstr","","",null,null],[5,"winstr","","",null,null],[5,"wmove","","",null,null],[5,"wnoutrefresh","","",null,null],[5,"wprintw","","",null,null],[5,"wredrawln","","",null,null],[5,"wrefresh","","",null,null],[5,"wresize","","",null,null],[5,"wscrl","","",null,null],[5,"wsetscrreg","","",null,null],[5,"wstandout","","",null,null],[5,"wstandend","","",null,null],[5,"wsyncdown","","",null,null],[5,"wsyncup","","",null,null],[5,"wtimeout","","",null,null],[5,"wtouchln","","",null,null],[5,"wvline","","",null,null],[5,"tigetflag","","",null,null],[5,"tigetnum","","",null,null],[5,"tigetstr","","",null,null],[5,"putp","","",null,null],[5,"tparm","","",null,null],[5,"getattrs","","",null,null],[5,"getcurx","","",null,null],[5,"getcury","","",null,null],[5,"getbegx","","",null,null],[5,"getbegy","","",null,null],[5,"getmaxx","","",null,null],[5,"getmaxy","","",null,null],[5,"getparx","","",null,null],[5,"getpary","","",null,null],[5,"wgetparent","","",null,null],[5,"is_cleared","","",null,null],[5,"is_idcok","","",null,null],[5,"is_idlok","","",null,null],[5,"is_immedok","","",null,null],[5,"is_keypad","","",null,null],[5,"is_leaveok","","",null,null],[5,"is_nodelay","","",null,null],[5,"is_notimeout","","",null,null],[5,"is_scrollok","","",null,null],[5,"is_syncok","","",null,null],[5,"wgetscrreg","","",null,null],[5,"has_mouse","","",null,null],[5,"getmouse","","",null,null],[5,"ungetmouse","","",null,null],[5,"mousemask","","",null,null],[5,"wenclose","","",null,null],[5,"mouseinterval","","",null,null],[5,"wmouse_trafo","","",null,null],[5,"mouse_trafo","","",null,null],[6,"c_bool","","",null,null],[6,"chtype","","",null,null],[6,"winttype","","",null,null],[6,"mmask_t","","",null,null],[6,"attr_t","","",null,null],[6,"NCURSES_ATTR_T","","",null,null],[6,"attr_t_p","","",null,null],[6,"short_p","","",null,null],[6,"void_p","","",null,null],[6,"char_p","","",null,null],[6,"chtype_p","","",null,null],[6,"WINDOW","","",null,null],[6,"SCREEN","","",null,null],[6,"FILE_p","","",null,null],[6,"va_list","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"mevent"}}],[0,"constants","ncurses","",null,null],[4,"LcCategory","ncurses::constants","",null,null],[13,"all","","",3,null],[13,"collate","","",3,null],[13,"ctype","","",3,null],[13,"monetary","","",3,null],[13,"numeric","","",3,null],[13,"time","","",3,null],[13,"messages","","",3,null],[5,"curscr","","",null,{"inputs":[],"output":{"name":"window"}}],[5,"newscr","","",null,{"inputs":[],"output":{"name":"window"}}],[5,"stdscr","","",null,{"inputs":[],"output":{"name":"window"}}],[5,"ttytype","","",null,null],[5,"COLORS","","",null,{"inputs":[],"output":{"name":"c_int"}}],[5,"COLOR_PAIRS","","",null,{"inputs":[],"output":{"name":"c_int"}}],[5,"COLS","","",null,{"inputs":[],"output":{"name":"c_int"}}],[5,"ESCDELAY","","",null,{"inputs":[],"output":{"name":"c_int"}}],[5,"LINES","","",null,{"inputs":[],"output":{"name":"c_int"}}],[5,"TABSIZE","","",null,{"inputs":[],"output":{"name":"c_int"}}],[5,"acs_map","","",null,null],[17,"ERR","","",null,null],[17,"OK","","",null,null],[17,"TRUE","","",null,null],[17,"FALSE","","",null,null],[17,"NCURSES_ATTR_SHIFT","","",null,null],[17,"COLOR_BLACK","","",null,null],[17,"COLOR_RED","","",null,null],[17,"COLOR_GREEN","","",null,null],[17,"COLOR_YELLOW","","",null,null],[17,"COLOR_BLUE","","",null,null],[17,"COLOR_MAGENTA","","",null,null],[17,"COLOR_CYAN","","",null,null],[17,"COLOR_WHITE","","",null,null],[17,"_SUBWIN","","",null,null],[17,"_ENDLINE","","",null,null],[17,"_FULLWIN","","",null,null],[17,"_SCROLLWIN","","",null,null],[17,"_ISPAD","","",null,null],[17,"_HASMOVED","","",null,null],[17,"_WRAPPED","","",null,null],[17,"_NOCHANGE","","",null,null],[17,"_NEWINDEX","","",null,null],[17,"KEY_CODE_YES","","",null,null],[17,"KEY_MIN","","",null,null],[17,"KEY_BREAK","","",null,null],[17,"KEY_SRESET","","",null,null],[17,"KEY_RESET","","",null,null],[17,"KEY_DOWN","","",null,null],[17,"KEY_UP","","",null,null],[17,"KEY_LEFT","","",null,null],[17,"KEY_RIGHT","","",null,null],[17,"KEY_HOME","","",null,null],[17,"KEY_BACKSPACE","","",null,null],[17,"KEY_F0","","",null,null],[17,"KEY_F1","","",null,null],[17,"KEY_F2","","",null,null],[17,"KEY_F3","","",null,null],[17,"KEY_F4","","",null,null],[17,"KEY_F5","","",null,null],[17,"KEY_F6","","",null,null],[17,"KEY_F7","","",null,null],[17,"KEY_F8","","",null,null],[17,"KEY_F9","","",null,null],[17,"KEY_F10","","",null,null],[17,"KEY_F11","","",null,null],[17,"KEY_F12","","",null,null],[17,"KEY_F13","","",null,null],[17,"KEY_F14","","",null,null],[17,"KEY_F15","","",null,null],[17,"KEY_DL","","",null,null],[17,"KEY_IL","","",null,null],[17,"KEY_DC","","",null,null],[17,"KEY_IC","","",null,null],[17,"KEY_EIC","","",null,null],[17,"KEY_CLEAR","","",null,null],[17,"KEY_EOS","","",null,null],[17,"KEY_EOL","","",null,null],[17,"KEY_SF","","",null,null],[17,"KEY_SR","","",null,null],[17,"KEY_NPAGE","","",null,null],[17,"KEY_PPAGE","","",null,null],[17,"KEY_STAB","","",null,null],[17,"KEY_CTAB","","",null,null],[17,"KEY_CATAB","","",null,null],[17,"KEY_ENTER","","",null,null],[17,"KEY_PRINT","","",null,null],[17,"KEY_LL","","",null,null],[17,"KEY_A1","","",null,null],[17,"KEY_A3","","",null,null],[17,"KEY_B2","","",null,null],[17,"KEY_C1","","",null,null],[17,"KEY_C3","","",null,null],[17,"KEY_BTAB","","",null,null],[17,"KEY_BEG","","",null,null],[17,"KEY_CANCEL","","",null,null],[17,"KEY_CLOSE","","",null,null],[17,"KEY_COMMAND","","",null,null],[17,"KEY_COPY","","",null,null],[17,"KEY_CREATE","","",null,null],[17,"KEY_END","","",null,null],[17,"KEY_EXIT","","",null,null],[17,"KEY_FIND","","",null,null],[17,"KEY_HELP","","",null,null],[17,"KEY_MARK","","",null,null],[17,"KEY_MESSAGE","","",null,null],[17,"KEY_MOVE","","",null,null],[17,"KEY_NEXT","","",null,null],[17,"KEY_OPEN","","",null,null],[17,"KEY_OPTIONS","","",null,null],[17,"KEY_PREVIOUS","","",null,null],[17,"KEY_REDO","","",null,null],[17,"KEY_REFERENCE","","",null,null],[17,"KEY_REFRESH","","",null,null],[17,"KEY_REPLACE","","",null,null],[17,"KEY_RESTART","","",null,null],[17,"KEY_RESUME","","",null,null],[17,"KEY_SAVE","","",null,null],[17,"KEY_SBEG","","",null,null],[17,"KEY_SCANCEL","","",null,null],[17,"KEY_SCOMMAND","","",null,null],[17,"KEY_SCOPY","","",null,null],[17,"KEY_SCREATE","","",null,null],[17,"KEY_SDC","","",null,null],[17,"KEY_SDL","","",null,null],[17,"KEY_SELECT","","",null,null],[17,"KEY_SEND","","",null,null],[17,"KEY_SEOL","","",null,null],[17,"KEY_SEXIT","","",null,null],[17,"KEY_SFIND","","",null,null],[17,"KEY_SHELP","","",null,null],[17,"KEY_SHOME","","",null,null],[17,"KEY_SIC","","",null,null],[17,"KEY_SLEFT","","",null,null],[17,"KEY_SMESSAGE","","",null,null],[17,"KEY_SMOVE","","",null,null],[17,"KEY_SNEXT","","",null,null],[17,"KEY_SOPTIONS","","",null,null],[17,"KEY_SPREVIOUS","","",null,null],[17,"KEY_SPRINT","","",null,null],[17,"KEY_SREDO","","",null,null],[17,"KEY_SREPLACE","","",null,null],[17,"KEY_SRIGHT","","",null,null],[17,"KEY_SRSUME","","",null,null],[17,"KEY_SSAVE","","",null,null],[17,"KEY_SSUSPEND","","",null,null],[17,"KEY_SUNDO","","",null,null],[17,"KEY_SUSPEND","","",null,null],[17,"KEY_UNDO","","",null,null],[17,"KEY_MOUSE","","",null,null],[17,"KEY_RESIZE","","",null,null],[17,"KEY_EVENT","","",null,null],[17,"KEY_MAX","","",null,null],[17,"NCURSES_BUTTON_RELEASED","","",null,null],[17,"NCURSES_BUTTON_PRESSED","","",null,null],[17,"NCURSES_BUTTON_CLICKED","","",null,null],[17,"NCURSES_DOUBLE_CLICKED","","",null,null],[17,"NCURSES_TRIPLE_CLICKED","","",null,null],[17,"NCURSES_RESERVED_EVENT","","",null,null],[17,"BUTTON1_RELEASED","","",null,null],[17,"BUTTON1_PRESSED","","",null,null],[17,"BUTTON1_CLICKED","","",null,null],[17,"BUTTON1_DOUBLE_CLICKED","","",null,null],[17,"BUTTON1_TRIPLE_CLICKED","","",null,null],[17,"BUTTON2_RELEASED","","",null,null],[17,"BUTTON2_PRESSED","","",null,null],[17,"BUTTON2_CLICKED","","",null,null],[17,"BUTTON2_DOUBLE_CLICKED","","",null,null],[17,"BUTTON2_TRIPLE_CLICKED","","",null,null],[17,"BUTTON3_RELEASED","","",null,null],[17,"BUTTON3_PRESSED","","",null,null],[17,"BUTTON3_CLICKED","","",null,null],[17,"BUTTON3_DOUBLE_CLICKED","","",null,null],[17,"BUTTON3_TRIPLE_CLICKED","","",null,null],[17,"BUTTON4_RELEASED","","",null,null],[17,"BUTTON4_PRESSED","","",null,null],[17,"BUTTON4_CLICKED","","",null,null],[17,"BUTTON4_DOUBLE_CLICKED","","",null,null],[17,"BUTTON4_TRIPLE_CLICKED","","",null,null],[17,"BUTTON5_RELEASED","","",null,null],[17,"BUTTON5_PRESSED","","",null,null],[17,"BUTTON5_CLICKED","","",null,null],[17,"BUTTON5_DOUBLE_CLICKED","","",null,null],[17,"BUTTON5_TRIPLE_CLICKED","","",null,null],[17,"BUTTON_CTRL","","",null,null],[17,"BUTTON_SHIFT","","",null,null],[17,"BUTTON_ALT","","",null,null],[17,"REPORT_MOUSE_POSITION","","",null,null],[17,"ALL_MOUSE_EVENTS","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[0,"panel","ncurses","",null,null],[0,"wrapper","ncurses::panel","",null,null],[6,"PANEL","ncurses::panel::wrapper","",null,null],[0,"menu","ncurses","",null,null],[0,"wrapper","ncurses::menu","",null,null],[5,"ptr_to_string","ncurses::menu::wrapper","",null,null],[6,"MENU","","",null,null],[6,"ITEM","","",null,null],[6,"HOOK","","",null,null],[0,"constants","ncurses::menu","",null,null],[17,"O_ONEVALUE","ncurses::menu::constants","",null,null],[17,"O_SHOWDESC","","",null,null],[17,"O_ROWMAJOR","","",null,null],[17,"O_IGNORECASE","","",null,null],[17,"O_SHOWMATCH","","",null,null],[17,"O_NONCYCLIC","","",null,null],[17,"O_SELECTABLE","","",null,null],[17,"REQ_LEFT_ITEM","","",null,null],[17,"REQ_RIGHT_ITEM","","",null,null],[17,"REQ_UP_ITEM","","",null,null],[17,"REQ_DOWN_ITEM","","",null,null],[17,"REQ_SCR_ULINE","","",null,null],[17,"REQ_SCR_DLINE","","",null,null],[17,"REQ_SCR_DPAGE","","",null,null],[17,"REQ_SCR_UPAGE","","",null,null],[17,"REQ_FIRST_ITEM","","",null,null],[17,"REQ_LAST_ITEM","","",null,null],[17,"REQ_NEXT_ITEM","","",null,null],[17,"REQ_PREV_ITEM","","",null,null],[17,"REQ_TOGGLE_ITEM","","",null,null],[17,"REQ_CLEAR_PATTERN","","",null,null],[17,"REQ_BACK_PATTERN","","",null,null],[17,"REQ_NEXT_MATCH","","",null,null],[17,"REQ_PREV_MATCH","","",null,null],[17,"MIN_MENU_COMMAND","","",null,null],[17,"MAX_MENU_COMMAND","","",null,null],[6,"chtype","ncurses","",null,null],[6,"winttype","","",null,null],[6,"mmask_t","","",null,null],[6,"attr_t","","",null,null],[6,"NCURSES_ATTR_T","","",null,null],[6,"WINDOW","","",null,null],[6,"SCREEN","","",null,null],[6,"mmaskt","","",null,null],[6,"MEVENT","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"cursor_visibility"}}]],"paths":[[4,"CURSOR_VISIBILITY"],[4,"WchResult"],[3,"MEVENT"],[4,"LcCategory"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["syntex_errors"] = {"doc":"","items":[[3,"CodeSuggestion","syntex_errors","",null,null],[12,"msp","","",0,null],[12,"substitutes","","",0,null],[3,"FatalError","","Used as a return value to signify a fatal error occurred. (It is also used as the argument to panic at the moment, but that will eventually not be true.)",null,null],[3,"ExplicitBug","","Signifies that the compiler died with an explicit call to `.bug` or `.span_bug` rather than a failed assertion, etc.",null,null],[3,"DiagnosticBuilder","","Used for emitting structured error messages and other diagnostic information.",null,null],[12,"level","","",1,null],[12,"message","","",1,null],[12,"code","","",1,null],[12,"span","","",1,null],[12,"children","","",1,null],[3,"SubDiagnostic","","For example a note attached to an error.",null,null],[12,"level","","",2,null],[12,"message","","",2,null],[12,"span","","",2,null],[12,"render_span","","",2,null],[3,"Handler","","A handler deals with errors; certain errors (fatal, bug, unimpl) may cause immediate exit, others log errors for later reporting.",null,null],[12,"can_emit_warnings","","",3,null],[4,"RenderSpan","","",null,null],[13,"FullSpan","","A FullSpan renders with both with an initial line for the message, prefixed by file:linenum, followed by a summary of the source code covered by the span.",4,null],[13,"Suggestion","","A suggestion renders with both with an initial line for the message, prefixed by file:linenum, followed by a summary of hypothetical source code, where each `String` is spliced into the lines in place of the code covered by each span.",4,null],[4,"Level","","",null,null],[13,"Bug","","",5,null],[13,"Fatal","","",5,null],[13,"PhaseFatal","","",5,null],[13,"Error","","",5,null],[13,"Warning","","",5,null],[13,"Note","","",5,null],[13,"Help","","",5,null],[13,"Cancelled","","",5,null],[5,"expect","","",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"m"}],"output":{"name":"t"}}],[0,"emitter","","",null,null],[3,"EmitterWriter","syntex_errors::emitter","",null,null],[4,"ColorConfig","","",null,null],[13,"Auto","","",6,null],[13,"Always","","",6,null],[13,"Never","","",6,null],[4,"Destination","","",null,null],[13,"Terminal","","",7,null],[13,"Raw","","",7,null],[17,"MAX_HIGHLIGHT_LINES","","maximum number of lines we will print for each error; arbitrary.",null,null],[8,"Emitter","","Emitter trait for emitting errors.",null,null],[10,"emit","","Emit a structured diagnostic.",8,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"emit","","",9,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"colorconfig"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"colorconfig"}],"output":{"name":"bool"}}],[11,"stderr","","",9,{"inputs":[{"name":"colorconfig"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"new","","",9,{"inputs":[{"name":"box"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"snippet","syntex_errors","",null,null],[3,"SnippetData","syntex_errors::snippet","",null,null],[3,"FileInfo","","",null,null],[3,"Line","","",null,null],[12,"line_index","","",10,null],[12,"annotations","","",10,null],[3,"Annotation","","",null,null],[12,"start_col","","Start column, 0-based indexing -- counting characters, not utf-8 bytes. Note that it is important that this field goes first, so that when we sort, we sort orderings by start column.",11,null],[12,"end_col","","End column within the line (exclusive)",11,null],[12,"is_primary","","Is this annotation derived from primary span",11,null],[12,"is_minimized","","Is this a large span minimized down to a smaller span",11,null],[12,"label","","Optional label to display adjacent to the annotation.",11,null],[3,"StyledString","","",null,null],[12,"text","","",12,null],[12,"style","","",12,null],[4,"Style","","",null,null],[13,"HeaderMsg","","",13,null],[13,"FileNameStyle","","",13,null],[13,"LineAndColumn","","",13,null],[13,"LineNumber","","",13,null],[13,"Quotation","","",13,null],[13,"UnderlinePrimary","","",13,null],[13,"UnderlineSecondary","","",13,null],[13,"LabelPrimary","","",13,null],[13,"LabelSecondary","","",13,null],[13,"OldSchoolNoteText","","",13,null],[13,"OldSchoolNote","","",13,null],[13,"NoStyle","","",13,null],[13,"ErrorCode","","",13,null],[13,"Level","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"snippetdata"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"fileinfo"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"line"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"ordering"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"annotation"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"ordering"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"annotation"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[0,"registry","syntex_errors","",null,null],[3,"Registry","syntex_errors::registry","",null,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"registry"}}],[11,"new","","",16,null],[11,"find_description","","",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[0,"styled_buffer","syntex_errors","",null,null],[3,"StyledBuffer","syntex_errors::styled_buffer","",null,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"styledbuffer"}}],[11,"copy_tabs","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"render","","",17,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"putc","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"char"},{"name":"style"}],"output":null}],[11,"puts","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"str"},{"name":"style"}],"output":null}],[11,"set_style","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"style"}],"output":null}],[11,"prepend","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"},{"name":"style"}],"output":null}],[11,"append","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"},{"name":"style"}],"output":null}],[11,"num_lines","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"CodeMapper","syntex_errors","",null,null],[10,"lookup_char_pos","","",18,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[10,"span_to_lines","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[10,"span_to_string","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[10,"span_to_filename","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[10,"macro_backtrace","","",18,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"vec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"renderspan"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"codesuggestion"}}],[11,"splice_lines","","Returns the assembled code suggestion.",0,{"inputs":[{"name":"self"},{"name":"codemapper"}],"output":{"name":"string"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"fatalerror"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"explicitbug"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticbuilder"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"subdiagnostic"}}],[11,"emit","","Emit the diagnostic.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or cancelled or it will panic when dropped). BEWARE: if this DiagnosticBuilder is an error, then creating it will bump the error count on the Handler and cancelling it won't undo that. If you want to decrement the error count you should use `Handler::cancel`.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"cancelled","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_fatal","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span_label","","Add a span/label to be included in the resulting snippet. This is pushed onto the `MultiSpan` that was created when the diagnostic was first built. If you don't call this function at all, and you just supplied a `Span` to create the diagnostic, then the snippet will just include that `Span`, which is called the primary span.",1,{"inputs":[{"name":"self"},{"name":"span"},{"name":"display"}],"output":{"name":"diagnosticbuilder"}}],[11,"note_expected_found","","",1,{"inputs":[{"name":"self"},{"name":"display"},{"name":"display"},{"name":"display"}],"output":{"name":"diagnosticbuilder"}}],[11,"note","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_note","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"warn","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_warn","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"help","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_help","","",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",1,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"string"}],"output":{"name":"diagnosticbuilder"}}],[11,"set_span","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"code","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"self"}}],[11,"message","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","",1,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"with_tty_emitter","","",3,{"inputs":[{"name":"colorconfig"},{"name":"bool"},{"name":"bool"},{"name":"option"}],"output":{"name":"handler"}}],[11,"with_emitter","","",3,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"box"}],"output":{"name":"handler"}}],[11,"set_continue_after_error","","",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"struct_dummy","","",3,{"inputs":[{"name":"self"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_warn_with_code","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_warn","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err_with_code","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_err","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal_with_code","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_fatal","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"cancel","","",3,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[11,"span_fatal","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_fatal_with_code","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_err","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_err_with_code","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"span_warn","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_warn_with_code","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"str"}],"output":null}],[11,"span_bug","","",3,null],[11,"delay_span_bug","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_bug_no_panic","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_note_without_error","","",3,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"}],"output":null}],[11,"span_unimpl","","",3,null],[11,"fatal","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"warn","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"note_without_error","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"bug","","",3,null],[11,"unimpl","","",3,null],[11,"bump_err_count","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"err_count","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_errors","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"emit","","",3,{"inputs":[{"name":"self"},{"name":"multispan"},{"name":"str"},{"name":"level"}],"output":null}],[11,"emit_with_code","","",3,{"inputs":[{"name":"self"},{"name":"multispan"},{"name":"str"},{"name":"str"},{"name":"level"}],"output":null}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"level"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"level"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"color","","",5,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"to_str","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"CodeSuggestion"],[3,"DiagnosticBuilder"],[3,"SubDiagnostic"],[3,"Handler"],[4,"RenderSpan"],[4,"Level"],[4,"ColorConfig"],[4,"Destination"],[8,"Emitter"],[3,"EmitterWriter"],[3,"Line"],[3,"Annotation"],[3,"StyledString"],[4,"Style"],[3,"SnippetData"],[3,"FileInfo"],[3,"Registry"],[3,"StyledBuffer"],[8,"CodeMapper"],[3,"FatalError"],[3,"ExplicitBug"]]};
searchIndex["syntex_pos"] = {"doc":"The source positions and related helper functions","items":[[3,"Span","syntex_pos","Spans represent a region of code, used for error reporting. Positions in spans are absolute positions from the beginning of the codemap, not positions relative to FileMaps. Methods on the CodeMap can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in codemap and you cannot assume that the length of the span = hi - lo; there may be space in the BytePos range between files.",null,null],[12,"lo","","",0,null],[12,"hi","","",0,null],[12,"expn_id","","Information about where the macro came from, if this piece of code was created by a macro expansion.",0,null],[3,"MultiSpan","","A collection of spans. Spans have two orthogonal attributes:",null,null],[3,"SpanLabel","","",null,null],[12,"span","","The span we are going to include in the final snippet.",1,null],[12,"is_primary","","Is this a primary span? This is the \"locus\" of the message, and is indicated with a `^^^^` underline, versus `----`.",1,null],[12,"label","","What label should we attach to this span (if any)?",1,null],[3,"ExpnId","","",null,null],[12,"0","","",2,null],[3,"MultiByteChar","","Identifies an offset of a multi-byte character in a FileMap",null,null],[12,"pos","","The absolute offset of the character in the CodeMap",3,null],[12,"bytes","","The number of bytes, >=2",3,null],[3,"FileMap","","A single source in the CodeMap.",null,null],[12,"name","","The name of the file that the source came from, source that doesn't originate from files has names between angle brackets by convention, e.g. `<anon>`",4,null],[12,"abs_path","","The absolute path of the file that the source came from.",4,null],[12,"src","","The complete source code",4,null],[12,"start_pos","","The start position of this source in the CodeMap",4,null],[12,"end_pos","","The end position of this source in the CodeMap",4,null],[12,"lines","","Locations of lines beginnings in the source code",4,null],[12,"multibyte_chars","","Locations of multi-byte characters in the source code",4,null],[3,"BytePos","","A byte offset. Keep this small (currently 32-bits), as AST contains a lot of them.",null,null],[12,"0","","",5,null],[3,"CharPos","","A character offset. Because of multibyte utf8 characters, a byte offset is not equivalent to a character offset. The CodeMap will convert BytePos values to CharPos values as necessary.",null,null],[12,"0","","",6,null],[3,"Loc","","A source code location used for error reporting",null,null],[12,"file","","Information about the original source",7,null],[12,"line","","The (1-based) line number",7,null],[12,"col","","The (0-based) column offset",7,null],[3,"LocWithOpt","","A source code location used as the result of lookup_char_pos_adj",null,null],[12,"filename","","",8,null],[12,"line","","",8,null],[12,"col","","",8,null],[12,"file","","",8,null],[3,"FileMapAndLine","","",null,null],[12,"fm","","",9,null],[12,"line","","",9,null],[3,"FileMapAndBytePos","","",null,null],[12,"fm","","",10,null],[12,"pos","","",10,null],[3,"LineInfo","","",null,null],[12,"line_index","","Index of line, starting from 0.",11,null],[12,"start_col","","Column in line where span begins, starting from 0.",11,null],[12,"end_col","","Column in line where span ends, starting from 0, exclusive.",11,null],[3,"FileLines","","",null,null],[12,"file","","",12,null],[12,"lines","","",12,null],[3,"MacroBacktrace","","",null,null],[12,"call_site","","span where macro was applied to generate this code",13,null],[12,"macro_decl_name","","name of macro that was applied (e.g., \"foo!\" or \"#[derive(Eq)]\")",13,null],[12,"def_site_span","","span where macro was defined (if known)",13,null],[3,"DistinctSources","","",null,null],[12,"begin","","",14,null],[12,"end","","",14,null],[3,"MalformedCodemapPositions","","",null,null],[12,"name","","",15,null],[12,"source_len","","",15,null],[12,"begin_pos","","",15,null],[12,"end_pos","","",15,null],[4,"SpanLinesError","","",null,null],[13,"IllFormedSpan","","",16,null],[13,"DistinctSources","","",16,null],[4,"SpanSnippetError","","",null,null],[13,"IllFormedSpan","","",17,null],[13,"DistinctSources","","",17,null],[13,"MalformedForCodemap","","",17,null],[13,"SourceNotAvailable","","",17,null],[12,"filename","syntex_pos::SpanSnippetError","",17,null],[5,"mk_sp","syntex_pos","",null,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"span"}}],[6,"FileName","","",null,null],[6,"FileLinesResult","","",null,null],[7,"SPAN_DEBUG","","",null,null],[17,"DUMMY_SP","","",null,null],[17,"COMMAND_LINE_SP","","",null,null],[17,"NO_EXPANSION","","",null,null],[17,"COMMAND_LINE_EXPN","","",null,null],[17,"PROC_EXPN","","",null,null],[8,"Pos","","",null,null],[10,"from_usize","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"to_usize","","",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"multispan"}}],[11,"end_point","","Returns a new span representing just the end-point of this span",0,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"contains","","",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"merge","","Returns `Some(span)`, a union of `self` and `other`, on overlap.",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",0,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"spanlabel"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"multispan"}}],[11,"from_span","","",19,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"from_spans","","",19,{"inputs":[{"name":"vec"}],"output":{"name":"multispan"}}],[11,"push_span_label","","",19,{"inputs":[{"name":"self"},{"name":"span"},{"name":"string"}],"output":null}],[11,"primary_span","","Selects the first primary span (if any)",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"primary_spans","","Returns all primary spans.",19,null],[11,"span_labels","","Returns the strings to highlight. We always ensure that there is an entry for each of the primary spans -- for each primary span P, if there is at least one label with span P, we return those labels (marked as primary). But otherwise we return `SpanLabel` instances with empty labels.",19,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from","","",19,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"expnid"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"from_u32","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"expnid"}}],[11,"into_u32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"multibytechar"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_line","","EFFECT: register a start-of-line offset in the table of line-beginnings. UNCHECKED INVARIANT: these offsets must be added in the right order and must be in the right places; there is shared knowledge about what ends a line between this file and parse.rs WARNING: pos param here is the offset relative to start of CodeMap, and CodeMap will append a newline when adding a filemap without a newline at the end, so the safe way to call this is with value calculated as filemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",4,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":null}],[11,"get_line","","get a line from the list of pre-computed line-beginnings. line-number here is 0-based.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"record_multibyte_char","","",4,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"usize"}],"output":null}],[11,"is_real_file","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_imported","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"count_lines","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"ordering"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"charpos"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"ordering"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_usize","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"encode","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_usize","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"charpos"}}],[11,"to_usize","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"loc"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lineinfo"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"spanlineserror"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"spansnippeterror"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"distinctsources"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"malformedcodemappositions"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Span"],[3,"SpanLabel"],[3,"ExpnId"],[3,"MultiByteChar"],[3,"FileMap"],[3,"BytePos"],[3,"CharPos"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[3,"LineInfo"],[3,"FileLines"],[3,"MacroBacktrace"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[4,"SpanLinesError"],[4,"SpanSnippetError"],[8,"Pos"],[3,"MultiSpan"]]};
searchIndex["syntex_syntax"] = {"doc":"The Rust parser and macro expander.","items":[[0,"diagnostics","syntex_syntax","",null,null],[0,"macros","syntex_syntax::diagnostics","",null,null],[0,"plugin","","",null,null],[3,"ErrorInfo","syntex_syntax::diagnostics::plugin","Error information type.",null,null],[12,"description","","",0,null],[12,"use_site","","",0,null],[5,"expand_diagnostic_used","","",null,null],[5,"expand_register_diagnostic","","",null,null],[5,"expand_build_diagnostic_array","","",null,null],[6,"ErrorMap","","Mapping from error codes to metadata.",null,null],[0,"metadata","syntex_syntax::diagnostics","This module contains utilities for outputting metadata for diagnostic errors.",null,null],[3,"ErrorMetadata","syntex_syntax::diagnostics::metadata","JSON encodable/decodable version of `ErrorInfo`.",null,null],[12,"description","","",1,null],[12,"use_site","","",1,null],[3,"ErrorLocation","","JSON encodable error location type with filename and line number.",null,null],[12,"filename","","",2,null],[12,"line","","",2,null],[5,"get_metadata_dir","","Get the directory where metadata for a given `prefix` should be stored.",null,{"inputs":[{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"output_metadata","","Write metadata for the errors in `err_map` to disk, to a file corresponding to `prefix/name`.",null,{"inputs":[{"name":"extctxt"},{"name":"str"},{"name":"str"},{"name":"errormap"}],"output":{"name":"result"}}],[6,"ErrorMetadataMap","","Mapping from error codes to metadata that can be (de)serialized.",null,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_span","","Create an error location from a span.",2,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"errorlocation"}}],[0,"diagnostic_list","syntex_syntax","",null,null],[0,"util","","",null,null],[3,"ThinVec","syntex_syntax::util","A vector type optimized for cases where this size is usually 0 (c.f. `SmallVector`). The `Option<Box<..>>` wrapping allows us to represent a zero sized vector with `None`, which uses only a single (null) pointer.",null,null],[0,"interner","","An \"interner\" is a data structure that associates values with usize tags and allows bidirectional lookup; i.e. given a value, one can easily find the type, and vice versa.",null,null],[3,"Interner","syntex_syntax::util::interner","",null,null],[11,"default","","",3,{"inputs":[],"output":{"name":"interner"}}],[11,"new","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"prefill","","",3,null],[11,"intern","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"name"}}],[11,"gensym","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"name"}}],[11,"gensym_copy","","Create a gensym with the same name as an existing entry.",3,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"name"}}],[11,"get","","",3,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"rc"}}],[11,"find","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[0,"lev_distance","syntex_syntax::util","",null,null],[5,"lev_distance","syntex_syntax::util::lev_distance","To find the Levenshtein distance between two strings",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"find_best_match_for_name","","To find the best match for a given string from an iterator of names As a loose rule to avoid the obviously incorrect suggestions, it takes an optional limit for the maximum allowable edit distance, which defaults to one-third of the given word",null,{"inputs":[{"name":"t"},{"name":"str"},{"name":"option"}],"output":{"name":"option"}}],[0,"node_count","syntex_syntax::util","",null,null],[3,"NodeCounter","syntex_syntax::util::node_count","",null,null],[12,"count","","",4,null],[11,"new","","",4,{"inputs":[],"output":{"name":"nodecounter"}}],[11,"visit_ident","","",4,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":null}],[11,"visit_mod","","",4,{"inputs":[{"name":"self"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_foreign_item","","",4,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_item","","",4,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_local","","",4,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_block","","",4,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_stmt","","",4,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_arm","","",4,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_pat","","",4,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",4,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",4,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",4,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_fn","","",4,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_trait_item","","",4,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",4,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_trait_ref","","",4,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":null}],[11,"visit_ty_param_bound","","",4,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",4,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",4,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",4,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":null}],[11,"visit_enum_def","","",4,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_variant","","",4,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_lifetime","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",4,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_mac","","",4,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[11,"visit_path","","",4,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_path_list_item","","",4,{"inputs":[{"name":"self"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[11,"visit_path_parameters","","",4,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",4,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",4,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_macro_def","","",4,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":null}],[0,"parser","syntex_syntax::util","",null,null],[4,"AssocOp","syntex_syntax::util::parser","Associative operator with precedence.",null,null],[13,"Add","","`+`",5,null],[13,"Subtract","","`-`",5,null],[13,"Multiply","","`*`",5,null],[13,"Divide","","`/`",5,null],[13,"Modulus","","`%`",5,null],[13,"LAnd","","`&&`",5,null],[13,"LOr","","`||`",5,null],[13,"BitXor","","`^`",5,null],[13,"BitAnd","","`&`",5,null],[13,"BitOr","","`|`",5,null],[13,"ShiftLeft","","`<<`",5,null],[13,"ShiftRight","","`>>`",5,null],[13,"Equal","","`==`",5,null],[13,"Less","","`<`",5,null],[13,"LessEqual","","`<=`",5,null],[13,"NotEqual","","`!=`",5,null],[13,"Greater","","`>`",5,null],[13,"GreaterEqual","","`>=`",5,null],[13,"Assign","","`=`",5,null],[13,"Inplace","","`<-`",5,null],[13,"AssignOp","","`?=` where ? is one of the BinOpToken",5,null],[13,"As","","`as`",5,null],[13,"DotDot","","`..` range",5,null],[13,"DotDotDot","","`...` range",5,null],[13,"Colon","","`:`",5,null],[4,"Fixity","","",null,null],[13,"Left","","The operator is left-associative",6,null],[13,"Right","","The operator is right-associative",6,null],[13,"None","","The operator is not associative",6,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"assocop"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"assocop"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fixity"}],"output":{"name":"bool"}}],[11,"from_token","","Create a new AssocOP from a token",5,{"inputs":[{"name":"token"}],"output":{"name":"option"}}],[11,"from_ast_binop","","Create a new AssocOp from ast::BinOpKind.",5,{"inputs":[{"name":"binopkind"}],"output":{"name":"self"}}],[11,"precedence","","Gets the precedence of this operator",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fixity","","Gets the fixity of this operator",5,{"inputs":[{"name":"self"}],"output":{"name":"fixity"}}],[11,"is_comparison","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_assign_like","","",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_ast_binop","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"small_vector","syntex_syntax::util","",null,null],[3,"SmallVector","syntex_syntax::util::small_vector","A vector type optimized for cases where the size is almost always 0 or 1",null,null],[3,"IntoIter","","",null,null],[11,"into","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"smallvector"}}],[11,"extend","","",7,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"zero","","",7,{"inputs":[],"output":{"name":"smallvector"}}],[11,"one","","",7,{"inputs":[{"name":"t"}],"output":{"name":"smallvector"}}],[11,"many","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"smallvector"}}],[11,"as_slice","","",7,null],[11,"pop","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"push","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"push_all","","",7,{"inputs":[{"name":"self"},{"name":"smallvector"}],"output":null}],[11,"get","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"expect_one","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"map","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"smallvector"}}],[11,"into_iter","","",7,null],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"move_flat_map","","",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"move_map","syntex_syntax::util","",null,null],[8,"MoveMap","syntex_syntax::util::move_map","",null,null],[11,"move_map","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"move_flat_map","","",9,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"clone","syntex_syntax::util","",10,{"inputs":[{"name":"self"}],"output":{"name":"thinvec"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"bool"}}],[11,"encode","","",10,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref","","",10,null],[11,"extend","","",10,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[0,"json","syntex_syntax","A JSON emitter for errors.",null,null],[3,"JsonEmitter","syntex_syntax::json","",null,null],[11,"basic","","",11,{"inputs":[],"output":{"name":"jsonemitter"}}],[11,"stderr","","",11,{"inputs":[{"name":"option"},{"name":"rc"}],"output":{"name":"jsonemitter"}}],[11,"emit","","",11,{"inputs":[{"name":"self"},{"name":"diagnosticbuilder"}],"output":null}],[0,"syntax","syntex_syntax","",null,null],[0,"abi","","",null,null],[3,"AbiData","syntex_syntax::abi","",null,null],[4,"Os","","",null,null],[13,"Windows","","",12,null],[13,"Macos","","",12,null],[13,"Linux","","",12,null],[13,"Android","","",12,null],[13,"Freebsd","","",12,null],[13,"iOS","","",12,null],[13,"Dragonfly","","",12,null],[13,"Bitrig","","",12,null],[13,"Netbsd","","",12,null],[13,"Openbsd","","",12,null],[13,"NaCl","","",12,null],[13,"Solaris","","",12,null],[4,"Abi","","",null,null],[13,"Cdecl","","",13,null],[13,"Stdcall","","",13,null],[13,"Fastcall","","",13,null],[13,"Vectorcall","","",13,null],[13,"Aapcs","","",13,null],[13,"Win64","","",13,null],[13,"Rust","","",13,null],[13,"C","","",13,null],[13,"System","","",13,null],[13,"RustIntrinsic","","",13,null],[13,"RustCall","","",13,null],[13,"PlatformIntrinsic","","",13,null],[4,"Architecture","","",null,null],[13,"X86","","",14,null],[13,"X86_64","","",14,null],[13,"Arm","","",14,null],[13,"Mips","","",14,null],[13,"Mipsel","","",14,null],[4,"AbiArchitecture","","",null,null],[13,"Rust","","Not a real ABI (e.g., intrinsic)",15,null],[13,"All","","An ABI that specifies cross-platform defaults (e.g., \"C\")",15,null],[13,"Archs","","Multiple architectures (bitset)",15,null],[5,"lookup","","Returns the ABI with the given name (if any).",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"all_names","","",null,{"inputs":[],"output":{"name":"vec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"os"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"os"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"encode","","",13,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"architecture"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"architecture"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"abidata"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"abiarchitecture"}}],[11,"index","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"data","","",13,{"inputs":[{"name":"self"}],"output":{"name":"abidata"}}],[11,"name","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ast","syntex_syntax","",null,null],[3,"ThinVec","syntex_syntax::ast","A vector type optimized for cases where this size is usually 0 (c.f. `SmallVector`). The `Option<Box<..>>` wrapping allows us to represent a zero sized vector with `None`, which uses only a single (null) pointer.",null,null],[3,"Name","","A name is a part of an identifier, representing a string or gensym. It's the result of interning.",null,null],[12,"0","","",17,null],[3,"Ident","","An identifier contains a Name (index into the interner table) and a SyntaxContext to track renaming and macro expansion per Flatt et al., \"Macros That Work Together\"",null,null],[12,"name","","",18,null],[12,"ctxt","","",18,null],[3,"Lifetime","","",null,null],[12,"id","","",19,null],[12,"span","","",19,null],[12,"name","","",19,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"lifetime","","",20,null],[12,"bounds","","",20,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"span","","",21,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",21,null],[12,"segments","","The segments in the path: the things separated by `::`.",21,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"identifier","","The identifier portion of this path segment.",22,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",22,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",23,null],[12,"types","","The type parameters for this path segment, if present.",23,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",23,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"span","","Overall span",24,null],[12,"inputs","","`(A,B)`",24,null],[12,"output","","`C`",24,null],[3,"TyParam","","",null,null],[12,"ident","","",25,null],[12,"id","","",25,null],[12,"bounds","","",25,null],[12,"default","","",25,null],[12,"span","","",25,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",26,null],[12,"ty_params","","",26,null],[12,"where_clause","","",26,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"id","","",27,null],[12,"predicates","","",27,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"span","","",28,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",28,null],[12,"bounded_ty","","The type being bounded",28,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",28,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"span","","",29,null],[12,"lifetime","","",29,null],[12,"bounds","","",29,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"id","","",30,null],[12,"span","","",30,null],[12,"path","","",30,null],[12,"ty","","",30,null],[3,"Crate","","",null,null],[12,"module","","",31,null],[12,"attrs","","",31,null],[12,"config","","",31,null],[12,"span","","",31,null],[12,"exported_macros","","",31,null],[3,"Block","","A Block (`{ .. }`).",null,null],[12,"stmts","","Statements in a block",32,null],[12,"id","","",32,null],[12,"rules","","Distinguishes between `unsafe { ... }` and `{ ... }`",32,null],[12,"span","","",32,null],[3,"Pat","","",null,null],[12,"id","","",33,null],[12,"node","","",33,null],[12,"span","","",33,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"ident","","The identifier for the field",34,null],[12,"pat","","The pattern the field is destructured to",34,null],[12,"is_shorthand","","",34,null],[3,"Stmt","","A statement",null,null],[12,"id","","",35,null],[12,"node","","",35,null],[12,"span","","",35,null],[3,"Local","","Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`",null,null],[12,"pat","","",36,null],[12,"ty","","",36,null],[12,"init","","Initializer expression to set the value, if any",36,null],[12,"id","","",36,null],[12,"span","","",36,null],[12,"attrs","","",36,null],[3,"Arm","","An arm of a 'match'.",null,null],[12,"attrs","","",37,null],[12,"pats","","",37,null],[12,"guard","","",37,null],[12,"body","","",37,null],[3,"Field","","",null,null],[12,"ident","","",38,null],[12,"expr","","",38,null],[12,"span","","",38,null],[3,"Expr","","An expression",null,null],[12,"id","","",39,null],[12,"node","","",39,null],[12,"span","","",39,null],[12,"attrs","","",39,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",40,null],[12,"position","","",40,null],[3,"Mac_","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",41,null],[12,"tts","","",41,null],[3,"MutTy","","",null,null],[12,"ty","","",42,null],[12,"mutbl","","",42,null],[3,"MethodSig","","Represents a method's signature in a trait declaration, or in an implementation.",null,null],[12,"unsafety","","",43,null],[12,"constness","","",43,null],[12,"abi","","",43,null],[12,"decl","","",43,null],[12,"generics","","",43,null],[3,"TraitItem","","Represents an item declaration within a trait declaration, possibly including a default implementation. A trait item is either required (meaning it doesn't have an implementation, just a signature) or provided (meaning it has a default implementation).",null,null],[12,"id","","",44,null],[12,"ident","","",44,null],[12,"attrs","","",44,null],[12,"node","","",44,null],[12,"span","","",44,null],[3,"ImplItem","","",null,null],[12,"id","","",45,null],[12,"ident","","",45,null],[12,"vis","","",45,null],[12,"defaultness","","",45,null],[12,"attrs","","",45,null],[12,"node","","",45,null],[12,"span","","",45,null],[3,"TypeBinding","","",null,null],[12,"id","","",46,null],[12,"ident","","",46,null],[12,"ty","","",46,null],[12,"span","","",46,null],[3,"Ty","","",null,null],[12,"id","","",47,null],[12,"node","","",47,null],[12,"span","","",47,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",48,null],[12,"abi","","",48,null],[12,"lifetimes","","",48,null],[12,"decl","","",48,null],[3,"InlineAsmOutput","","Inline assembly.",null,null],[12,"constraint","","",49,null],[12,"expr","","",49,null],[12,"is_rw","","",49,null],[12,"is_indirect","","",49,null],[3,"InlineAsm","","Inline assembly.",null,null],[12,"asm","","",50,null],[12,"asm_str_style","","",50,null],[12,"outputs","","",50,null],[12,"inputs","","",50,null],[12,"clobbers","","",50,null],[12,"volatile","","",50,null],[12,"alignstack","","",50,null],[12,"dialect","","",50,null],[12,"expn_id","","",50,null],[3,"Arg","","An argument in a function header.",null,null],[12,"ty","","",51,null],[12,"pat","","",51,null],[12,"id","","",51,null],[3,"FnDecl","","Header (not the body) of a function declaration.",null,null],[12,"inputs","","",52,null],[12,"output","","",52,null],[12,"variadic","","",52,null],[3,"Mod","","Module declaration.",null,null],[12,"inner","","A span from the first token past `{` to the last token until `}`. For `mod foo;`, the inner span ranges from the first token to the last token in the external file.",53,null],[12,"items","","",53,null],[3,"ForeignMod","","Foreign module declaration.",null,null],[12,"abi","","",54,null],[12,"items","","",54,null],[3,"EnumDef","","",null,null],[12,"variants","","",55,null],[3,"Variant_","","",null,null],[12,"name","","",56,null],[12,"attrs","","",56,null],[12,"data","","",56,null],[12,"disr_expr","","Explicit discriminant, e.g. `Foo = 1`",56,null],[3,"AttrId","","",null,null],[12,"0","","",57,null],[3,"Attribute_","","Doc-comments are promoted to attributes that have is_sugared_doc = true",null,null],[12,"id","","",58,null],[12,"style","","",58,null],[12,"value","","",58,null],[12,"is_sugared_doc","","",58,null],[3,"TraitRef","","TraitRef's appear in impls.",null,null],[12,"path","","",59,null],[12,"ref_id","","",59,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",60,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",60,null],[12,"span","","",60,null],[3,"StructField","","Field of a struct.",null,null],[12,"span","","",61,null],[12,"ident","","",61,null],[12,"vis","","",61,null],[12,"id","","",61,null],[12,"ty","","",61,null],[12,"attrs","","",61,null],[3,"Item","","An item",null,null],[12,"ident","","",62,null],[12,"attrs","","",62,null],[12,"id","","",62,null],[12,"node","","",62,null],[12,"vis","","",62,null],[12,"span","","",62,null],[3,"ForeignItem","","",null,null],[12,"ident","","",63,null],[12,"attrs","","",63,null],[12,"node","","",63,null],[12,"id","","",63,null],[12,"span","","",63,null],[12,"vis","","",63,null],[3,"MacroDef","","A macro definition, in this crate or imported from another.",null,null],[12,"ident","","",64,null],[12,"attrs","","",64,null],[12,"id","","",64,null],[12,"span","","",64,null],[12,"imported_from","","",64,null],[12,"export","","",64,null],[12,"use_locally","","",64,null],[12,"allow_internal_unstable","","",64,null],[12,"body","","",64,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A,B,C>` in `foo::bar::baz::<'a, A,B,C>`",65,null],[13,"Parenthesized","","The `(A,B)` and `C` in `Foo(A,B) -> C`",65,null],[4,"TyParamBound","","The AST represents all type param bounds as types. typeck::collect::compute_bounds matches these against the \"special\" built-in traits (see middle::lang_items) and detects Copy, Send and Sync.",null,null],[13,"TraitTyParamBound","","",66,null],[13,"RegionTyParamBound","","",66,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",67,null],[13,"Maybe","","",67,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",68,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",68,null],[13,"EqPredicate","","An equality predicate (unsupported)",68,null],[4,"MetaItemKind","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",69,null],[13,"List","","List meta item.",69,null],[13,"NameValue","","Name value meta item.",69,null],[4,"BindingMode","","",null,null],[13,"ByRef","","",70,null],[13,"ByValue","","",70,null],[4,"PatKind","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",71,null],[13,"Ident","","A `PatKind::Ident` may either be a new bound variable (`ref mut binding @ OPT_SUBPATTERN`), or a unit struct/variant pattern, or a const pattern (in the last two cases the third field must be `None`). Disambiguation cannot be done with parser alone, so it happens during name resolution.",71,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`. The `bool` is `true` in the presence of a `..`.",71,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, .., z)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",71,null],[13,"Path","","A possibly qualified path pattern. Unquailfied path patterns `A::B::C` can legally refer to variants, structs, constants or associated constants. Quailfied path patterns `<A>::B::C`/`<A as Trait>::B::C` can only legally refer to associated constants.",71,null],[13,"Tuple","","A tuple pattern `(a, b)`. If the `..` pattern fragment is present, then `Option<usize>` denotes its position. 0 <= position <= subpats.len()",71,null],[13,"Box","","A `box` pattern",71,null],[13,"Ref","","A reference pattern, e.g. `&mut (a, b)`",71,null],[13,"Lit","","A literal",71,null],[13,"Range","","A range pattern, e.g. `1...2`",71,null],[13,"Vec","","`[a, b, ..i, y, z]` is represented as: `PatKind::Vec(box [a, b], Some(i), box [y, z])`",71,null],[13,"Mac","","A macro pattern; pre-expansion",71,null],[4,"Mutability","","",null,null],[13,"Mutable","","",72,null],[13,"Immutable","","",72,null],[4,"BinOpKind","","",null,null],[13,"Add","","The `+` operator (addition)",73,null],[13,"Sub","","The `-` operator (subtraction)",73,null],[13,"Mul","","The `*` operator (multiplication)",73,null],[13,"Div","","The `/` operator (division)",73,null],[13,"Rem","","The `%` operator (modulus)",73,null],[13,"And","","The `&&` operator (logical and)",73,null],[13,"Or","","The `||` operator (logical or)",73,null],[13,"BitXor","","The `^` operator (bitwise xor)",73,null],[13,"BitAnd","","The `&` operator (bitwise and)",73,null],[13,"BitOr","","The `|` operator (bitwise or)",73,null],[13,"Shl","","The `<<` operator (shift left)",73,null],[13,"Shr","","The `>>` operator (shift right)",73,null],[13,"Eq","","The `==` operator (equality)",73,null],[13,"Lt","","The `<` operator (less than)",73,null],[13,"Le","","The `<=` operator (less than or equal to)",73,null],[13,"Ne","","The `!=` operator (not equal to)",73,null],[13,"Ge","","The `>=` operator (greater than or equal to)",73,null],[13,"Gt","","The `>` operator (greater than)",73,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",74,null],[13,"Not","","The `!` operator for logical inversion",74,null],[13,"Neg","","The `-` operator for negation",74,null],[4,"StmtKind","","",null,null],[13,"Local","","A local (let) binding.",75,null],[13,"Item","","An item definition.",75,null],[13,"Expr","","Expr without trailing semi-colon.",75,null],[13,"Semi","","",75,null],[13,"Mac","","",75,null],[4,"MacStmtStyle","","",null,null],[13,"Semicolon","","The macro statement had a trailing semicolon, e.g. `foo! { ... };` `foo!(...);`, `foo![...];`",76,null],[13,"Braces","","The macro statement had braces; e.g. foo! { ... }",76,null],[13,"NoBraces","","The macro statement had parentheses or brackets and no semicolon; e.g. `foo!(...)`. All of these will end up being converted into macro expressions.",76,null],[4,"BlockCheckMode","","",null,null],[13,"Default","","",77,null],[13,"Unsafe","","",77,null],[4,"UnsafeSource","","",null,null],[13,"CompilerGenerated","","",78,null],[13,"UserProvided","","",78,null],[4,"RangeLimits","","Limit types of a range (inclusive or exclusive)",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end",79,null],[13,"Closed","","Inclusive at the beginning and end",79,null],[4,"ExprKind","","",null,null],[13,"Box","","A `box x` expression.",80,null],[13,"InPlace","","First expr is the place; second expr is the value.",80,null],[13,"Vec","","An array (`[a, b, c, d]`)",80,null],[13,"Call","","A function call",80,null],[13,"MethodCall","","A method call (`x.foo::<Bar, Baz>(a, b, c, d)`)",80,null],[13,"Tup","","A tuple (`(a, b, c ,d)`)",80,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",80,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",80,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",80,null],[13,"Cast","","A cast (`foo as f64`)",80,null],[13,"Type","","",80,null],[13,"If","","An `if` block, with an optional else block",80,null],[13,"IfLet","","An `if let` expression with an optional else block",80,null],[13,"While","","A while loop, with an optional label",80,null],[13,"WhileLet","","A while-let loop, with an optional label",80,null],[13,"ForLoop","","A for loop, with an optional label",80,null],[13,"Loop","","Conditionless loop (can be exited with break, continue, or return)",80,null],[13,"Match","","A `match` block.",80,null],[13,"Closure","","A closure (for example, `move |a, b, c| {a + b + c}`)",80,null],[13,"Block","","A block (`{ ... }`)",80,null],[13,"Assign","","An assignment (`a = foo()`)",80,null],[13,"AssignOp","","An assignment with an operator",80,null],[13,"Field","","Access of a named struct field (`obj.foo`)",80,null],[13,"TupField","","Access of an unnamed field of a struct or tuple-struct",80,null],[13,"Index","","An indexing operation (`foo[2]`)",80,null],[13,"Range","","A range (`1..2`, `1..`, `..2`, `1...2`, `1...`, `...2`)",80,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",80,null],[13,"AddrOf","","A referencing operation (`&a` or `&mut a`)",80,null],[13,"Break","","A `break`, with an optional label to break",80,null],[13,"Continue","","A `continue`, with an optional label",80,null],[13,"Ret","","A `return`, with an optional value to be returned",80,null],[13,"InlineAsm","","Output of the `asm!()` macro",80,null],[13,"Mac","","A macro invocation; pre-expansion",80,null],[13,"Struct","","A struct literal expression.",80,null],[13,"Repeat","","An array literal constructed from one repeated element.",80,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",80,null],[13,"Try","","`expr?`",80,null],[4,"CaptureBy","","A capture clause",null,null],[13,"Value","","",81,null],[13,"Ref","","",81,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",82,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",82,null],[4,"LitIntType","","",null,null],[13,"Signed","","",83,null],[13,"Unsigned","","",83,null],[13,"Unsuffixed","","",83,null],[4,"LitKind","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",84,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",84,null],[13,"Byte","","A byte char (`b'f'`)",84,null],[13,"Char","","A character literal (`'a'`)",84,null],[13,"Int","","An integer literal (`1`)",84,null],[13,"Float","","A float literal (`1f64` or `1E10f64`)",84,null],[13,"FloatUnsuffixed","","A float literal without a suffix (`1.0 or 1.0E10`)",84,null],[13,"Bool","","A boolean literal",84,null],[4,"TraitItemKind","","",null,null],[13,"Const","","",85,null],[13,"Method","","",85,null],[13,"Type","","",85,null],[13,"Macro","","",85,null],[4,"ImplItemKind","","",null,null],[13,"Const","","",86,null],[13,"Method","","",86,null],[13,"Type","","",86,null],[13,"Macro","","",86,null],[4,"IntTy","","",null,null],[13,"Is","","",87,null],[13,"I8","","",87,null],[13,"I16","","",87,null],[13,"I32","","",87,null],[13,"I64","","",87,null],[4,"UintTy","","",null,null],[13,"Us","","",88,null],[13,"U8","","",88,null],[13,"U16","","",88,null],[13,"U32","","",88,null],[13,"U64","","",88,null],[4,"FloatTy","","",null,null],[13,"F32","","",89,null],[13,"F64","","",89,null],[4,"TyKind","","The different kinds of types recognized by the compiler",null,null],[13,"Vec","","A variable-length array (`[T]`)",90,null],[13,"FixedLengthVec","","A fixed length array (`[T; n]`)",90,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",90,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",90,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",90,null],[13,"Never","","The never type (`!`)",90,null],[13,"Tup","","A tuple (`(A, B, C, D,...)`)",90,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",90,null],[13,"ObjectSum","","Something like `A+B`. Note that `B` must always be a path.",90,null],[13,"PolyTraitRef","","A type like `for<'a> Foo<&'a Bar>`",90,null],[13,"ImplTrait","","An `impl TraitA+TraitB` type.",90,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",90,null],[13,"Typeof","","Unused for now",90,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",90,null],[13,"ImplicitSelf","","Inferred type of a `self` or `&self` argument in a method.",90,null],[13,"Mac","","",90,null],[4,"AsmDialect","","Inline assembly dialect.",null,null],[13,"Att","","",91,null],[13,"Intel","","",91,null],[4,"SelfKind","","Alternative representation for `Arg`s describing `self` parameter of methods.",null,null],[13,"Value","","`self`, `mut self`",92,null],[13,"Region","","`&'lt self`, `&'lt mut self`",92,null],[13,"Explicit","","`self: TYPE`, `mut self: TYPE`",92,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",93,null],[13,"Normal","","",93,null],[4,"Constness","","",null,null],[13,"Const","","",94,null],[13,"NotConst","","",94,null],[4,"Defaultness","","",null,null],[13,"Default","","",95,null],[13,"Final","","",95,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",96,null],[13,"Negative","","`impl !Trait for Type`",96,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",97,null],[13,"Ty","","Everything else",97,null],[4,"PathListItemKind","","",null,null],[13,"Ident","","",98,null],[12,"name","syntex_syntax::ast::PathListItemKind","",98,null],[12,"rename","","renamed in list, e.g. `use foo::{bar as baz};`",98,null],[12,"id","","",98,null],[13,"Mod","syntex_syntax::ast","",98,null],[12,"rename","syntex_syntax::ast::PathListItemKind","renamed in list, e.g. `use foo::{self as baz};`",98,null],[12,"id","","",98,null],[4,"ViewPath_","syntex_syntax::ast","",null,null],[13,"ViewPathSimple","","`foo::bar::baz as quux`",99,null],[13,"ViewPathGlob","","`foo::bar::*`",99,null],[13,"ViewPathList","","`foo::bar::{a,b,c}`",99,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","",100,null],[13,"Inner","","",100,null],[4,"Visibility","","",null,null],[13,"Public","","",101,null],[13,"Crate","","",101,null],[13,"Restricted","","",101,null],[12,"path","syntex_syntax::ast::Visibility","",101,null],[12,"id","","",101,null],[13,"Inherited","syntex_syntax::ast","",101,null],[4,"VariantData","","Fields and Ids of enum variants and structs",null,null],[13,"Struct","","Struct variant.",102,null],[13,"Tuple","","Tuple variant.",102,null],[13,"Unit","","Unit variant.",102,null],[4,"ItemKind","","",null,null],[13,"ExternCrate","","An`extern crate` item, with optional original crate name.",103,null],[13,"Use","","A use declaration (`use` or `pub use`) item.",103,null],[13,"Static","","A static item (`static` or `pub static`).",103,null],[13,"Const","","A constant item (`const` or `pub const`).",103,null],[13,"Fn","","A function declaration (`fn` or `pub fn`).",103,null],[13,"Mod","","A module declaration (`mod` or `pub mod`).",103,null],[13,"ForeignMod","","An external module (`extern` or `pub extern`).",103,null],[13,"Ty","","A type alias (`type` or `pub type`).",103,null],[13,"Enum","","An enum definition (`enum` or `pub enum`).",103,null],[13,"Struct","","A struct definition (`struct` or `pub struct`).",103,null],[13,"Trait","","A Trait declaration (`trait` or `pub trait`).",103,null],[13,"DefaultImpl","","",103,null],[13,"Impl","","An implementation.",103,null],[13,"Mac","","A macro invocation (which includes macro definition).",103,null],[4,"ForeignItemKind","","An item within an `extern` block",null,null],[13,"Fn","","A foreign function",104,null],[13,"Static","","A foreign static item (`static ext: u8`), with optional mutability (the boolean is true when mutable)",104,null],[6,"CrateNum","","",null,null],[6,"NodeId","","",null,null],[6,"TyParamBounds","","",null,null],[6,"CrateConfig","","The set of MetaItems that define the compilation environment of the crate, used to drive conditional compilation",null,null],[6,"MetaItem","","A spanned compile-time attribute item.",null,null],[6,"BinOp","","",null,null],[6,"SpannedIdent","","",null,null],[6,"Mac","","",null,null],[6,"Lit","","A literal",null,null],[6,"ExplicitSelf","","",null,null],[6,"Variant","","",null,null],[6,"PathListItem","","",null,null],[6,"ViewPath","","",null,null],[6,"Attribute","","Meta-data associated with an item",null,null],[17,"CRATE_NODE_ID","","Node id used to represent the root of the crate.",null,null],[17,"DUMMY_NODE_ID","","When parsing and doing expansions, we initially give all AST nodes this AST node value. Then later, in the renumber pass, we renumber them to have small, positive ids.",null,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"ordering"}}],[11,"hash","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"as_str","","",17,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"with_empty_ctxt","","",18,{"inputs":[{"name":"name"}],"output":{"name":"ident"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"encode","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"encode","","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"encode","","",21,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ident","","",21,{"inputs":[{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"encode","","",22,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"encode","","",65,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",65,null],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"none","","",65,{"inputs":[],"output":{"name":"pathparameters"}}],[11,"is_empty","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_lifetimes","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_types","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type parameters in the parenthesized case.",65,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"lifetimes","","",65,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"bindings","","",65,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"encode","","",23,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"encode","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"encode","","",66,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"encode","","",67,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"encode","","",25,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"encode","","",26,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_lt_parameterized","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_type_parameterized","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_parameterized","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"generics"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"encode","","",27,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"encode","","",68,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",28,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",29,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"encode","","",30,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"crate"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"encode","","",31,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"metaitemkind"}}],[11,"encode","","",69,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"metaitemkind"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"encode","","",32,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",32,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"pat"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"encode","","",33,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"walk","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"fieldpat"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"encode","","",34,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",34,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bindingmode"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"encode","","",70,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"patkind"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"patkind"}],"output":{"name":"bool"}}],[11,"encode","","",71,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"encode","","",72,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",72,null],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"binopkind"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"binopkind"}],"output":{"name":"bool"}}],[11,"encode","","",73,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",73,null],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","",73,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"lazy","","",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_shift","","",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_comparison","","",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"encode","","",74,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",74,null],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",74,{"inputs":[{"name":"unop"}],"output":{"name":"bool"}}],[11,"to_string","","",74,{"inputs":[{"name":"unop"}],"output":{"name":"str"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"stmt"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"encode","","",35,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"add_trailing_semicolon","","",35,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"stmtkind"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"stmtkind"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"stmtkind"}],"output":{"name":"bool"}}],[11,"encode","","",75,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",75,null],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"macstmtstyle"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"encode","","",76,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",76,null],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"bool"}}],[11,"encode","","",36,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",36,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"arm"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"encode","","",37,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"encode","","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"blockcheckmode"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"encode","","",77,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"unsafesource"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"encode","","",78,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",78,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"encode","","",39,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"rangelimits"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"rangelimits"}],"output":{"name":"bool"}}],[11,"encode","","",79,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",79,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"exprkind"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"exprkind"}],"output":{"name":"bool"}}],[11,"encode","","",80,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",80,null],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"encode","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"captureby"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"captureby"}],"output":{"name":"bool"}}],[11,"encode","","",81,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"mac_"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"encode","","",41,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"encode","","",82,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"litinttype"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"encode","","",83,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"litkind"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"litkind"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"litkind"}],"output":{"name":"bool"}}],[11,"encode","","",84,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_str","","Returns true if this literal is a string and false otherwise.",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"encode","","",42,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"methodsig"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"encode","","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"encode","","",44,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"traititemkind"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"traititemkind"}],"output":{"name":"bool"}}],[11,"encode","","",85,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",85,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"encode","","",45,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"implitemkind"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"implitemkind"}],"output":{"name":"bool"}}],[11,"encode","","",86,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"encode","","",87,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ty_to_string","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"val_to_string","","",87,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"string"}}],[11,"ty_max","","",87,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"bit_width","","",87,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"uintty"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"uintty"}],"output":{"name":"bool"}}],[11,"encode","","",88,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",88,null],[11,"ty_to_string","","",88,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"val_to_string","","",88,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"string"}}],[11,"ty_max","","",88,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"bit_width","","",88,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"encode","","",89,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ty_to_string","","",89,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"bit_width","","",89,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"encode","","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",46,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"encode","","",47,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",47,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"encode","","",48,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"tykind"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"tykind"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"tykind"}],"output":{"name":"bool"}}],[11,"encode","","",90,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"asmdialect"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"asmdialect"}],"output":{"name":"bool"}}],[11,"encode","","",91,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"inlineasmoutput"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"inlineasmoutput"}],"output":{"name":"bool"}}],[11,"encode","","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"inlineasm"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"encode","","",50,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"encode","","",51,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"selfkind"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"selfkind"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"selfkind"}],"output":{"name":"bool"}}],[11,"encode","","",92,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_self","","",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_self","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_self","","",51,{"inputs":[{"name":"explicitself"},{"name":"spannedident"}],"output":{"name":"arg"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"fndecl"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"encode","","",52,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",52,null],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_self","","",52,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_self","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"encode","","",93,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"constness"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"encode","","",94,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"defaultness"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"defaultness"}],"output":{"name":"bool"}}],[11,"encode","","",95,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"implpolarity"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"encode","","",96,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"encode","","",97,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"span","","",97,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"mod"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"encode","","",53,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",53,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"foreignmod"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"encode","","",54,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",54,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"enumdef"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"encode","","",55,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",55,null],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"variant_"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"encode","","",56,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"pathlistitemkind"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"pathlistitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"pathlistitemkind"}],"output":{"name":"bool"}}],[11,"encode","","",98,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","",98,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"name","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rename","","",98,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"viewpath_"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"encode","","",99,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",99,null],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"path","","",99,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"encode","","",100,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",100,null],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"attrid"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"encode","","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"attribute_"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"attribute_"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"attribute_"}],"output":{"name":"bool"}}],[11,"encode","","",58,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"traitref"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"encode","","",59,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"encode","","",60,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"encode","","",101,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",101,null],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"structfield"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"bool"}}],[11,"encode","","",61,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"encode","","",102,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",102,null],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fields","","",102,null],[11,"id","","",102,{"inputs":[{"name":"self"}],"output":{"name":"nodeid"}}],[11,"is_struct","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_tuple","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_unit","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"encode","","",62,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"itemkind"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"bool"}}],[11,"encode","","",103,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",103,null],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"descriptive_variant","","",103,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"foreignitem"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"encode","","",63,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"foreignitemkind"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"foreignitemkind"}],"output":{"name":"bool"}}],[11,"encode","","",104,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",104,null],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"descriptive_variant","","",104,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"macrodef"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"encode","","",64,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",64,null],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"attr","syntex_syntax","",null,null],[3,"Stability","syntex_syntax::attr","Represents the #[stable], #[unstable] and #[rustc_deprecated] attributes.",null,null],[12,"level","","",105,null],[12,"feature","","",105,null],[12,"rustc_depr","","",105,null],[3,"RustcDeprecation","","",null,null],[12,"since","","",106,null],[12,"reason","","",106,null],[3,"Deprecation","","",null,null],[12,"since","","",107,null],[12,"note","","",107,null],[4,"InlineAttr","","",null,null],[13,"None","","",108,null],[13,"Hint","","",108,null],[13,"Always","","",108,null],[13,"Never","","",108,null],[4,"StabilityLevel","","The available stability levels.",null,null],[13,"Unstable","","",109,null],[12,"reason","syntex_syntax::attr::StabilityLevel","",109,null],[12,"issue","","",109,null],[13,"Stable","syntex_syntax::attr","",109,null],[12,"since","syntex_syntax::attr::StabilityLevel","",109,null],[4,"ReprAttr","syntex_syntax::attr","",null,null],[13,"ReprAny","","",110,null],[13,"ReprInt","","",110,null],[13,"ReprExtern","","",110,null],[13,"ReprPacked","","",110,null],[13,"ReprSimd","","",110,null],[4,"IntType","","",null,null],[13,"SignedInt","","",111,null],[13,"UnsignedInt","","",111,null],[5,"mark_used","","",null,{"inputs":[{"name":"attribute"}],"output":null}],[5,"is_used","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"mk_name_value_item_str","","",null,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"p"}}],[5,"mk_name_value_item","","",null,{"inputs":[{"name":"internedstring"},{"name":"lit"}],"output":{"name":"p"}}],[5,"mk_list_item","","",null,{"inputs":[{"name":"internedstring"},{"name":"vec"}],"output":{"name":"p"}}],[5,"mk_word_item","","",null,{"inputs":[{"name":"internedstring"}],"output":{"name":"p"}}],[5,"mk_spanned_name_value_item","","",null,{"inputs":[{"name":"span"},{"name":"internedstring"},{"name":"lit"}],"output":{"name":"p"}}],[5,"mk_spanned_list_item","","",null,{"inputs":[{"name":"span"},{"name":"internedstring"},{"name":"vec"}],"output":{"name":"p"}}],[5,"mk_spanned_word_item","","",null,{"inputs":[{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[5,"mk_attr_id","","",null,{"inputs":[],"output":{"name":"attrid"}}],[5,"mk_attr_inner","","Returns an inner attribute with the given value.",null,{"inputs":[{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_spanned_attr_inner","","Returns an innter attribute with the given value and span.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_attr_outer","","Returns an outer attribute with the given value.",null,{"inputs":[{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_spanned_attr_outer","","Returns an outer attribute with the given value and span.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_doc_attr_outer","","",null,{"inputs":[{"name":"attrid"},{"name":"p"},{"name":"bool"}],"output":{"name":"attribute"}}],[5,"mk_sugared_doc_attr","","",null,{"inputs":[{"name":"attrid"},{"name":"internedstring"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"attribute"}}],[5,"contains","","Check if `needle` occurs in `haystack` by a structural comparison. This is slightly subtle, and relies on ignoring the span included in the `==` comparison a plain MetaItem.",null,null],[5,"contains_name","","",null,null],[5,"first_attr_value_str_by_name","","",null,null],[5,"last_meta_item_value_str_by_name","","",null,null],[5,"sort_meta_items","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"find_crate_name","","",null,null],[5,"find_export_name_attr","","Find the value of #[export_name=*] attribute and check its validity.",null,null],[5,"contains_extern_indicator","","",null,null],[5,"find_inline_attr","","Determine what `#[inline]` attribute is present in `attrs`, if any.",null,null],[5,"requests_inline","","True if `#[inline]` or `#[inline(always)]` is present in `attrs`.",null,null],[5,"cfg_matches","","Tests if a cfg-pattern matches the cfg set",null,null],[5,"find_stability","","Find the first stability attribute. `None` if none exists.",null,null],[5,"find_deprecation","","Find the deprecation attribute. `None` if none exists.",null,null],[5,"require_unique_names","","",null,null],[5,"find_repr_attrs","","Parse #[repr(...)] forms.",null,{"inputs":[{"name":"handler"},{"name":"attribute"}],"output":{"name":"vec"}}],[8,"AttrMetaMethods","","",null,null],[11,"check_name","","",112,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[10,"name","","Retrieve the name of the meta item, e.g. `foo` in `#[foo]`, `#[foo=\"bar\"]` and `#[foo(bar)]`",112,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[10,"value_str","","Gets the string value if self is a MetaItemKind::NameValue variant containing a string, otherwise None.",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"meta_item_list","","Gets a list of inner meta items from a list MetaItem type.",112,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"is_word","","Indicates if the attribute is a Word.",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_value_str","","Indicates if the attribute is a Value String.",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_meta_item_list","","Indicates if the attribute is a Meta-Item List.",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"span","","",112,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[8,"AttributeMethods","","",null,null],[10,"meta","","",113,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[10,"with_desugared_doc","","",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[8,"HasAttrs","","",null,null],[10,"attrs","","",114,null],[10,"map_attrs","","",114,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"check_name","","",115,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"name","","",115,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"value_str","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"meta_item_list","","",115,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_word","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span","","",115,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"name","","",116,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"value_str","","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"meta_item_list","","",116,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_word","","",116,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span","","",116,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"meta","","Extract the MetaItem from inside this Attribute.",115,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"with_desugared_doc","","Convert self to a normal #[doc=\"foo\"] comment, if it is a comment like `///` or `/** */`. (Returns self unchanged for non-sugared doc attributes.)",115,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"inlineattr"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"inlineattr"}],"output":{"name":"bool"}}],[11,"encode","","",105,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"stability"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"hash","","",105,null],[11,"encode","","",109,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",109,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",109,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"lt","","",109,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"le","","",109,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"gt","","",109,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ge","","",109,{"inputs":[{"name":"self"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"stabilitylevel"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",109,null],[11,"encode","","",106,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",106,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",106,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"option"}}],[11,"lt","","",106,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"le","","",106,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"gt","","",106,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"ge","","",106,{"inputs":[{"name":"self"},{"name":"rustcdeprecation"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"rustcdeprecation"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",106,null],[11,"encode","","",107,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",107,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"option"}}],[11,"lt","","",107,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"le","","",107,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"gt","","",107,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"ge","","",107,{"inputs":[{"name":"self"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"deprecation"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",107,null],[11,"is_unstable","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_stable","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",110,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",110,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"reprattr"}}],[11,"is_ffi_safe","","",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",111,null],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",111,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",111,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"inttype"}}],[11,"is_signed","","",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"attrs","syntex_syntax::util","",10,null],[11,"map_attrs","","",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","syntex_syntax::ast","",75,null],[11,"map_attrs","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",62,null],[11,"map_attrs","","",62,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",39,null],[11,"map_attrs","","",39,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",36,null],[11,"map_attrs","","",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",63,null],[11,"map_attrs","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",61,null],[11,"map_attrs","","",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",45,null],[11,"map_attrs","","",45,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",44,null],[11,"map_attrs","","",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",37,null],[11,"map_attrs","","",37,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",35,null],[11,"map_attrs","","",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","syntex_syntax::attr","",117,null],[11,"map_attrs","","",117,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"codemap","syntex_syntax","The CodeMap tracks all the source code used within a single crate, mapping from integer byte positions to the original source code location. Each bit of source parsed during crate parsing (typically files, in-memory strings, or various bits of macro expansion) cover a continuous range of bytes in the CodeMap and are represented by FileMaps. Byte positions are stored in `spans` and used pervasively in the compiler. They are absolute positions within the CodeMap, which upon request can be converted to line and column information, source code snippets, etc.",null,null],[3,"Spanned","syntex_syntax::codemap","",null,null],[12,"node","","",118,null],[12,"span","","",118,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",119,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated features internally without forcing the whole crate to opt-in to them.",119,null],[12,"span","","The span of the macro definition itself. The macro may not have a sensible definition span (e.g. something defined completely inside libsyntax) in which case this is None.",119,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g. `let x = foo!();` or `if let Some(y) = x {}`",120,null],[12,"callee","","Information about the expansion.",120,null],[3,"RealFileLoader","","A FileLoader that uses std::fs to load real files.",null,null],[3,"CodeMap","","",null,null],[12,"files","","",121,null],[4,"ExpnFormat","","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] ",122,null],[13,"MacroBang","","e.g. `format!()`",122,null],[5,"original_sp","","Return the span itself if it doesn't come from a macro expansion, otherwise return the call site span up to the `enclosing_sp` by following the `expn_info` chain.",null,{"inputs":[{"name":"codemap"},{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[5,"spanned","","",null,{"inputs":[{"name":"bytepos"},{"name":"bytepos"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"respan","","",null,{"inputs":[{"name":"span"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"dummy_spanned","","",null,{"inputs":[{"name":"t"}],"output":{"name":"spanned"}}],[5,"combine_spans","","Build a span that covers the two provided spans.",null,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[8,"FileLoader","","An abstraction over the fs operations used by the Parser.",null,null],[10,"file_exists","","Query the existence of a file.",123,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[10,"abs_path","","Return an absolute path to a file, if possible.",123,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[10,"read_file","","Read the contents of an UTF-8 file into memory.",123,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"result"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"expnformat"}}],[11,"hash","","",122,null],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"spanned"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"encode","","",118,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",118,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"hash","","",118,null],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"nameandspan"}}],[11,"hash","","",119,null],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",119,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"hash","","",120,null],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"file_exists","","",124,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"abs_path","","",124,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"option"}}],[11,"read_file","","",124,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"result"}}],[11,"new","","",121,{"inputs":[],"output":{"name":"codemap"}}],[11,"with_file_loader","","",121,{"inputs":[{"name":"box"}],"output":{"name":"codemap"}}],[11,"file_exists","","",121,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"load_file","","",121,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"result"}}],[11,"new_filemap","","Creates a new filemap without setting its line information. If you don't intend to set the line information yourself, you should use new_filemap_and_lines.",121,{"inputs":[{"name":"self"},{"name":"filename"},{"name":"option"},{"name":"string"}],"output":{"name":"rc"}}],[11,"new_filemap_and_lines","","Creates a new filemap and sets its line information.",121,{"inputs":[{"name":"self"},{"name":"str"},{"name":"option"},{"name":"str"}],"output":{"name":"rc"}}],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external crate. The source code of such an \"imported filemap\" is not available, but we still know enough to generate accurate debuginfo location information for things inlined from other crates.",121,{"inputs":[{"name":"self"},{"name":"filename"},{"name":"option"},{"name":"usize"},{"name":"vec"},{"name":"vec"}],"output":{"name":"rc"}}],[11,"mk_substr_filename","","",121,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"lookup_char_pos","","Lookup source information about a BytePos",121,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"lookup_char_pos_adj","","",121,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"locwithopt"}}],[11,"span_to_string","","",121,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_expanded_string","","Returns a formatted string showing the expansion chain of a span",121,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"source_callsite","","Return the source span - this is either the supplied span, or the span for the macro callsite that expanded to it.",121,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"source_callee","","Return the source callee.",121,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"span_to_filename","","",121,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[11,"span_to_lines","","",121,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[11,"span_to_snippet","","",121,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"result"}}],[11,"get_filemap","","",121,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",121,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"filemapandbytepos"}}],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap.",121,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"charpos"}}],[11,"record_expansion","","",121,{"inputs":[{"name":"self"},{"name":"expninfo"}],"output":{"name":"expnid"}}],[11,"with_expn_info","","",121,{"inputs":[{"name":"self"},{"name":"expnid"},{"name":"f"}],"output":{"name":"t"}}],[11,"span_allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable] items can be used (that is, a macro marked with `#[allow_internal_unstable]`).",121,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"count_lines","","",121,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"macro_backtrace","","",121,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"vec"}}],[11,"lookup_char_pos","","",121,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"span_to_lines","","",121,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filelinesresult"}}],[11,"span_to_string","","",121,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_filename","","",121,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"filename"}}],[11,"macro_backtrace","","",121,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"vec"}}],[0,"config","syntex_syntax","",null,null],[3,"StripUnconfigured","syntex_syntax::config","A folder that strips out items that do not belong in the current configuration.",null,null],[12,"config","","",125,null],[12,"should_test","","",125,null],[12,"sess","","",125,null],[12,"features","","",125,null],[5,"strip_unconfigured_items","","",null,null],[11,"process_cfg_attrs","","",125,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"fold_foreign_mod","","",125,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fold_item_kind","","",125,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"itemkind"}}],[11,"fold_expr","","",125,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_opt_expr","","",125,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"fold_stmt","","",125,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"smallvector"}}],[11,"fold_mac","","",125,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[11,"fold_item","","",125,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",125,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"smallvector"}}],[11,"fold_trait_item","","",125,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"smallvector"}}],[11,"fold_interpolated","","",125,{"inputs":[{"name":"self"},{"name":"nonterminal"}],"output":{"name":"nonterminal"}}],[0,"entry","syntex_syntax","",null,null],[4,"EntryPointType","syntex_syntax::entry","",null,null],[13,"None","","",126,null],[13,"MainNamed","","",126,null],[13,"MainAttr","","",126,null],[13,"Start","","",126,null],[13,"OtherMain","","",126,null],[5,"entry_point_type","","",null,{"inputs":[{"name":"item"},{"name":"usize"}],"output":{"name":"entrypointtype"}}],[0,"feature_gate","syntex_syntax","Feature gating",null,null],[3,"Features","syntex_syntax::feature_gate","A set of features to be used by later passes.",null,null],[12,"declared_stable_lang_features","","#![feature] attrs for stable language features, for error reporting",127,null],[12,"declared_lib_features","","#![feature] attrs for non-language (library) features",127,null],[12,"asm","","",127,null],[12,"concat_idents","","",127,null],[12,"link_args","","",127,null],[12,"log_syntax","","",127,null],[12,"non_ascii_idents","","",127,null],[12,"plugin_registrar","","",127,null],[12,"thread_local","","",127,null],[12,"trace_macros","","",127,null],[12,"intrinsics","","",127,null],[12,"lang_items","","",127,null],[12,"link_llvm_intrinsics","","",127,null],[12,"linkage","","",127,null],[12,"quote","","",127,null],[12,"simd","","",127,null],[12,"rustc_diagnostic_macros","","",127,null],[12,"advanced_slice_patterns","","",127,null],[12,"box_syntax","","",127,null],[12,"placement_in_syntax","","",127,null],[12,"reflect","","",127,null],[12,"unboxed_closures","","",127,null],[12,"pushpop_unsafe","","",127,null],[12,"allocator","","",127,null],[12,"fundamental","","",127,null],[12,"linked_from","","",127,null],[12,"main","","",127,null],[12,"needs_allocator","","",127,null],[12,"on_unimplemented","","",127,null],[12,"plugin","","",127,null],[12,"simd_ffi","","",127,null],[12,"start","","",127,null],[12,"structural_match","","",127,null],[12,"panic_runtime","","",127,null],[12,"needs_panic_runtime","","",127,null],[12,"optin_builtin_traits","","",127,null],[12,"macro_reexport","","",127,null],[12,"staged_api","","",127,null],[12,"unmarked_api","","",127,null],[12,"no_core","","",127,null],[12,"box_patterns","","",127,null],[12,"unsafe_no_drop_flag","","",127,null],[12,"dropck_parametricity","","",127,null],[12,"custom_attribute","","",127,null],[12,"custom_derive","","",127,null],[12,"rustc_attrs","","",127,null],[12,"allow_internal_unstable","","",127,null],[12,"slice_patterns","","",127,null],[12,"associated_consts","","",127,null],[12,"const_fn","","",127,null],[12,"const_indexing","","",127,null],[12,"prelude_import","","",127,null],[12,"static_recursion","","",127,null],[12,"default_type_parameter_fallback","","",127,null],[12,"associated_type_defaults","","",127,null],[12,"type_macros","","",127,null],[12,"repr_simd","","",127,null],[12,"cfg_target_feature","","",127,null],[12,"platform_intrinsics","","",127,null],[12,"unwind_attributes","","",127,null],[12,"naked_functions","","",127,null],[12,"no_debug","","",127,null],[12,"omit_gdb_pretty_printer_section","","",127,null],[12,"cfg_target_vendor","","",127,null],[12,"stmt_expr_attributes","","",127,null],[12,"type_ascription","","",127,null],[12,"cfg_target_thread_local","","",127,null],[12,"abi_vectorcall","","",127,null],[12,"inclusive_range_syntax","","",127,null],[12,"question_mark","","",127,null],[12,"specialization","","",127,null],[12,"pub_restricted","","",127,null],[12,"drop_types_in_const","","",127,null],[12,"cfg_target_has_atomic","","",127,null],[12,"dotdot_in_tuple_patterns","","",127,null],[12,"conservative_impl_trait","","",127,null],[12,"relaxed_adts","","",127,null],[12,"never_type","","",127,null],[3,"GatedCfg","","",null,null],[4,"AttributeType","","",null,null],[13,"Normal","","Normal, builtin attribute that is consumed by the compiler before the unused_attribute check",128,null],[13,"Whitelisted","","Builtin attribute that may not be consumed by the compiler before the unused_attribute check. These attributes will be ignored by the unused_attribute lint",128,null],[13,"CrateLevel","","Builtin attribute that is only allowed at the crate level",128,null],[4,"AttributeGate","","",null,null],[13,"Gated","","Is gated by a given feature gate, reason and function to check if enabled",129,null],[13,"Ungated","","Ungated attribute, can be used on all release channels",129,null],[4,"GateIssue","","",null,null],[13,"Language","","",130,null],[13,"Library","","",130,null],[4,"UnstableFeatures","","",null,null],[13,"Disallow","","Hard errors for unstable features are active, as on beta/stable channels.",131,null],[13,"Allow","","Allow features to me activated, as on nightly.",131,null],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time during the build that feature-related lints are set to warn or above because the build turns on warnings-as-errors and uses lots of unstable features. As a result, this is always required for building Rust itself.",131,null],[5,"check_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"handler"},{"name":"codemap"},{"name":"features"}],"output":null}],[5,"find_lang_feature_accepted_version","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"emit_feature_err","","",null,{"inputs":[{"name":"handler"},{"name":"str"},{"name":"span"},{"name":"gateissue"},{"name":"str"}],"output":null}],[5,"get_features","","",null,null],[5,"check_crate","","",null,null],[17,"KNOWN_ATTRIBUTES","","",null,null],[17,"EXPLAIN_STMT_ATTR_SYNTAX","","",null,null],[17,"EXPLAIN_ASM","","",null,null],[17,"EXPLAIN_LOG_SYNTAX","","",null,null],[17,"EXPLAIN_CONCAT_IDENTS","","",null,null],[17,"EXPLAIN_TRACE_MACROS","","",null,null],[17,"EXPLAIN_ALLOW_INTERNAL_UNSTABLE","","",null,null],[17,"EXPLAIN_CUSTOM_DERIVE","","",null,null],[17,"EXPLAIN_DERIVE_UNDERSCORE","","",null,null],[17,"EXPLAIN_PLACEMENT_IN","","",null,null],[11,"new","","",127,{"inputs":[],"output":{"name":"features"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"attributetype"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"gatedcfg"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"self"},{"name":"gatedcfg"}],"output":{"name":"bool"}}],[11,"gate","","",132,{"inputs":[{"name":"metaitem"}],"output":{"name":"option"}}],[11,"check_and_emit","","",132,{"inputs":[{"name":"self"},{"name":"parsesess"},{"name":"features"}],"output":null}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"unstablefeatures"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"unstablefeatures"}],"output":{"name":"bool"}}],[11,"hash","","",131,null],[0,"fold","syntex_syntax","A Folder represents an AST->AST fold; it accepts an AST piece, and returns a piece of the same type. So, for instance, macro expansion is a Folder that walks over an AST and produces another AST.",null,null],[5,"noop_fold_meta_items","syntex_syntax::fold","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_view_path","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"fold_attrs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"fold_thin_attrs","","",null,{"inputs":[{"name":"thinvec"},{"name":"t"}],"output":{"name":"thinvec"}}],[5,"noop_fold_arm","","",null,{"inputs":[{"name":"arm"},{"name":"t"}],"output":{"name":"arm"}}],[5,"noop_fold_ty_binding","","",null,{"inputs":[{"name":"typebinding"},{"name":"t"}],"output":{"name":"typebinding"}}],[5,"noop_fold_ty","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_foreign_mod","","",null,{"inputs":[{"name":"foreignmod"},{"name":"t"}],"output":{"name":"foreignmod"}}],[5,"noop_fold_variant","","",null,{"inputs":[{"name":"variant"},{"name":"t"}],"output":{"name":"variant"}}],[5,"noop_fold_ident","","",null,{"inputs":[{"name":"ident"},{"name":"t"}],"output":{"name":"ident"}}],[5,"noop_fold_usize","","",null,{"inputs":[{"name":"usize"},{"name":"t"}],"output":{"name":"usize"}}],[5,"noop_fold_path","","",null,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"path"}}],[5,"noop_fold_path_parameters","","",null,{"inputs":[{"name":"pathparameters"},{"name":"t"}],"output":{"name":"pathparameters"}}],[5,"noop_fold_angle_bracketed_parameter_data","","",null,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"t"}],"output":{"name":"anglebracketedparameterdata"}}],[5,"noop_fold_parenthesized_parameter_data","","",null,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"t"}],"output":{"name":"parenthesizedparameterdata"}}],[5,"noop_fold_local","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_mac","","",null,{"inputs":[{"name":"mac"},{"name":"t"}],"output":{"name":"mac"}}],[5,"noop_fold_meta_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_arg","","",null,{"inputs":[{"name":"arg"},{"name":"t"}],"output":{"name":"arg"}}],[5,"noop_fold_tt","","",null,{"inputs":[{"name":"tokentree"},{"name":"t"}],"output":{"name":"tokentree"}}],[5,"noop_fold_tts","","",null,null],[5,"noop_fold_token","","",null,{"inputs":[{"name":"token"},{"name":"t"}],"output":{"name":"token"}}],[5,"noop_fold_interpolated","","apply folder to elements of interpolated nodes",null,{"inputs":[{"name":"nonterminal"},{"name":"t"}],"output":{"name":"nonterminal"}}],[5,"noop_fold_fn_decl","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_ty_param_bound","","",null,{"inputs":[{"name":"typarambound"},{"name":"t"}],"output":{"name":"typarambound"}}],[5,"noop_fold_ty_param","","",null,{"inputs":[{"name":"typaram"},{"name":"t"}],"output":{"name":"typaram"}}],[5,"noop_fold_ty_params","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_lifetime","","",null,{"inputs":[{"name":"lifetime"},{"name":"t"}],"output":{"name":"lifetime"}}],[5,"noop_fold_lifetime_def","","",null,{"inputs":[{"name":"lifetimedef"},{"name":"t"}],"output":{"name":"lifetimedef"}}],[5,"noop_fold_lifetimes","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_lifetime_defs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_opt_lifetime","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_generics","","",null,{"inputs":[{"name":"generics"},{"name":"t"}],"output":{"name":"generics"}}],[5,"noop_fold_where_clause","","",null,{"inputs":[{"name":"whereclause"},{"name":"t"}],"output":{"name":"whereclause"}}],[5,"noop_fold_where_predicate","","",null,{"inputs":[{"name":"wherepredicate"},{"name":"t"}],"output":{"name":"wherepredicate"}}],[5,"noop_fold_variant_data","","",null,{"inputs":[{"name":"variantdata"},{"name":"t"}],"output":{"name":"variantdata"}}],[5,"noop_fold_trait_ref","","",null,{"inputs":[{"name":"traitref"},{"name":"t"}],"output":{"name":"traitref"}}],[5,"noop_fold_poly_trait_ref","","",null,{"inputs":[{"name":"polytraitref"},{"name":"t"}],"output":{"name":"polytraitref"}}],[5,"noop_fold_struct_field","","",null,{"inputs":[{"name":"structfield"},{"name":"t"}],"output":{"name":"structfield"}}],[5,"noop_fold_field","","",null,{"inputs":[{"name":"field"},{"name":"t"}],"output":{"name":"field"}}],[5,"noop_fold_mt","","",null,{"inputs":[{"name":"mutty"},{"name":"t"}],"output":{"name":"mutty"}}],[5,"noop_fold_opt_bounds","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_block","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_item_kind","","",null,{"inputs":[{"name":"itemkind"},{"name":"t"}],"output":{"name":"itemkind"}}],[5,"noop_fold_trait_item","","",null,{"inputs":[{"name":"traititem"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_impl_item","","",null,{"inputs":[{"name":"implitem"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_mod","","",null,{"inputs":[{"name":"mod"},{"name":"t"}],"output":{"name":"mod"}}],[5,"noop_fold_crate","","",null,{"inputs":[{"name":"crate"},{"name":"t"}],"output":{"name":"crate"}}],[5,"noop_fold_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_item_simple","","",null,{"inputs":[{"name":"item"},{"name":"t"}],"output":{"name":"item"}}],[5,"noop_fold_foreign_item","","",null,{"inputs":[{"name":"foreignitem"},{"name":"t"}],"output":{"name":"foreignitem"}}],[5,"noop_fold_method_sig","","",null,{"inputs":[{"name":"methodsig"},{"name":"t"}],"output":{"name":"methodsig"}}],[5,"noop_fold_pat","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_expr","","",null,{"inputs":[{"name":"expr"},{"name":"t"}],"output":{"name":"expr"}}],[5,"noop_fold_opt_expr","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_exprs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_stmt","","",null,{"inputs":[{"name":"stmt"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_vis","","",null,{"inputs":[{"name":"visibility"},{"name":"t"}],"output":{"name":"visibility"}}],[8,"Folder","","",null,null],[11,"fold_crate","","",133,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold_meta_items","","",133,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_meta_item","","",133,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_view_path","","",133,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_foreign_item","","",133,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[11,"fold_item","","",133,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_item_simple","","",133,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"item"}}],[11,"fold_struct_field","","",133,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":{"name":"structfield"}}],[11,"fold_item_kind","","",133,{"inputs":[{"name":"self"},{"name":"itemkind"}],"output":{"name":"itemkind"}}],[11,"fold_trait_item","","",133,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",133,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"smallvector"}}],[11,"fold_fn_decl","","",133,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_block","","",133,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_stmt","","",133,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"smallvector"}}],[11,"fold_arm","","",133,{"inputs":[{"name":"self"},{"name":"arm"}],"output":{"name":"arm"}}],[11,"fold_pat","","",133,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_expr","","",133,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_opt_expr","","",133,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"fold_exprs","","",133,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_ty","","",133,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_ty_binding","","",133,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"typebinding"}}],[11,"fold_mod","","",133,{"inputs":[{"name":"self"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_foreign_mod","","",133,{"inputs":[{"name":"self"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fold_variant","","",133,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"variant"}}],[11,"fold_ident","","",133,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_usize","","",133,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"fold_path","","",133,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"path"}}],[11,"fold_path_parameters","","",133,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"pathparameters"}}],[11,"fold_angle_bracketed_parameter_data","","",133,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"fold_parenthesized_parameter_data","","",133,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"fold_local","","",133,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_mac","","",133,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"mac"}}],[11,"fold_lifetime","","",133,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"lifetime"}}],[11,"fold_lifetime_def","","",133,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[11,"fold_attribute","","",133,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"option"}}],[11,"fold_arg","","",133,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"arg"}}],[11,"fold_generics","","",133,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"generics"}}],[11,"fold_trait_ref","","",133,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":{"name":"traitref"}}],[11,"fold_poly_trait_ref","","",133,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"polytraitref"}}],[11,"fold_variant_data","","",133,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"variantdata"}}],[11,"fold_lifetimes","","",133,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_lifetime_defs","","",133,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"fold_ty_param","","",133,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"typaram"}}],[11,"fold_ty_params","","",133,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_tt","","",133,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"tokentree"}}],[11,"fold_tts","","",133,null],[11,"fold_token","","",133,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"token"}}],[11,"fold_interpolated","","",133,{"inputs":[{"name":"self"},{"name":"nonterminal"}],"output":{"name":"nonterminal"}}],[11,"fold_opt_lifetime","","",133,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"fold_opt_bounds","","",133,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"fold_bounds","","",133,{"inputs":[{"name":"self"},{"name":"typarambounds"}],"output":{"name":"typarambounds"}}],[11,"fold_ty_param_bound","","",133,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"typarambound"}}],[11,"fold_mt","","",133,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"mutty"}}],[11,"fold_field","","",133,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"field"}}],[11,"fold_where_clause","","",133,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"whereclause"}}],[11,"fold_where_predicate","","",133,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[11,"fold_vis","","",133,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"new_id","","",133,{"inputs":[{"name":"self"},{"name":"nodeid"}],"output":{"name":"nodeid"}}],[11,"new_span","","",133,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[0,"parse","syntex_syntax","The main parser interface",null,null],[3,"ParseSess","syntex_syntax::parse","Info about a parsing session.",null,null],[12,"span_diagnostic","","",134,null],[5,"parse_crate_from_file","","",null,{"inputs":[{"name":"path"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_attrs_from_file","","",null,{"inputs":[{"name":"path"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_attrs_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_expr_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_item_from_source_str","","Parses an item.",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_meta_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_stmt_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_tts_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"new_parser_from_source_str","","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"string"},{"name":"string"}],"output":{"name":"parser"}}],[5,"new_parser_from_file","","Create a new parser, handling errors as appropriate if the file doesn't exist",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"path"}],"output":{"name":"parser"}}],[5,"new_sub_parser_from_file","","Given a session, a crate config, a path, and a span, add the file at the given path to the codemap, and return a parser. On an error, use the given span as the source of the problem.",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"path"},{"name":"bool"},{"name":"option"},{"name":"span"}],"output":{"name":"parser"}}],[5,"filemap_to_parser","","Given a filemap and config, return a parser",null,{"inputs":[{"name":"parsesess"},{"name":"rc"},{"name":"crateconfig"}],"output":{"name":"parser"}}],[5,"new_parser_from_tts","","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"vec"}],"output":{"name":"parser"}}],[5,"new_parser_from_ts","","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"tokenstream"}],"output":{"name":"parser"}}],[5,"filemap_to_tts","","Given a filemap, produce a sequence of token-trees",null,{"inputs":[{"name":"parsesess"},{"name":"rc"}],"output":{"name":"vec"}}],[5,"tts_to_parser","","Given tts and cfg, produce a parser",null,{"inputs":[{"name":"parsesess"},{"name":"vec"},{"name":"crateconfig"}],"output":{"name":"parser"}}],[5,"char_lit","","Parse a string representing a character literal into its final form. Rather than just accepting/rejecting a given literal, unescapes it as well. Can take any slice prefixed by a character escape. Returns the character and the number of characters consumed.",null,null],[5,"str_lit","","Parse a string representing a string literal into its final form. Does unescaping.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"raw_str_lit","","Parse a string representing a raw string literal into its final form. The only operation this does is convert embedded CRLF into a single LF.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"float_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"handler"},{"name":"span"}],"output":{"name":"litkind"}}],[5,"byte_lit","","Parse a string representing a byte literal into its final form. Similar to `char_lit`",null,null],[5,"byte_str_lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"rc"}}],[5,"integer_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"handler"},{"name":"span"}],"output":{"name":"litkind"}}],[0,"parser","","",null,null],[3,"Restrictions","syntex_syntax::parse::parser","",null,null],[3,"Parser","","",null,null],[12,"sess","","",135,null],[12,"token","","the current token:",135,null],[12,"span","","the span of the current token:",135,null],[12,"last_span","","the span of the prior token:",135,null],[12,"cfg","","",135,null],[12,"last_token","","the previous token or None (only stashed sometimes).",135,null],[12,"buffer","","",135,null],[12,"buffer_start","","",135,null],[12,"buffer_end","","",135,null],[12,"tokens_consumed","","",135,null],[12,"restrictions","","",135,null],[12,"quote_depth","","",135,null],[12,"reader","","",135,null],[12,"obsolete_set","","The set of seen errors about obsolete syntax. Used to suppress extra detail when the same error is seen twice",135,null],[12,"filename","","Used to determine the path to externally loaded source files",135,null],[12,"mod_path_stack","","",135,null],[12,"open_braces","","Stack of open delimiters and their spans. Used for error message.",135,null],[12,"owns_directory","","Flag if this parser \"owns\" the directory that it is currently parsing in. This will affect how nested files are looked up.",135,null],[12,"root_module_name","","Name of the root module this parser originated from. If `None`, then the name is not known. This does not change while the parser is descending into modules, and sub-parsers have new values for this name.",135,null],[12,"expected_tokens","","",135,null],[3,"ModulePath","","Information about the path to a module.",null,null],[12,"name","","",136,null],[12,"path_exists","","",136,null],[12,"result","","",136,null],[3,"ModulePathSuccess","","",null,null],[12,"path","","",137,null],[12,"owns_directory","","",137,null],[3,"ModulePathError","","",null,null],[12,"err_msg","","",138,null],[12,"help_msg","","",138,null],[4,"PathStyle","","How to parse a path. There are three different kinds of paths, all of which are parsed somewhat differently.",null,null],[13,"Mod","","A path with no type parameters, e.g. `foo::bar::Baz`, used in imports or visibilities.",139,null],[13,"Type","","A path with a lifetime and type parameters, with no double colons before the type parameters; e.g. `foo::bar<'a>::Baz<T>`, used in types. Paths using this style can be passed into macros expecting `path` nonterminals.",139,null],[13,"Expr","","A path with a lifetime and type parameters with double colons before the type parameters; e.g. `foo::bar::<'a>::Baz::<T>`, used in expressions or patterns.",139,null],[4,"BoundParsingMode","","How to parse a bound, whether to allow bound modifiers such as `?`.",null,null],[13,"Bare","","",140,null],[13,"Modified","","",140,null],[4,"SemiColonMode","","",null,null],[13,"Break","","",141,null],[13,"Ignore","","",141,null],[4,"TokenType","","",null,null],[13,"Token","","",142,null],[13,"Keyword","","",142,null],[13,"Operator","","",142,null],[4,"LhsExpr","","",null,null],[13,"NotYetParsed","","",143,null],[13,"AttributesParsed","","",143,null],[13,"AlreadyParsed","","",143,null],[17,"RESTRICTION_STMT_EXPR","","",null,null],[17,"RESTRICTION_NO_STRUCT_LITERAL","","",null,null],[17,"NO_NONINLINE_MOD","","",null,null],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"restrictions"}}],[11,"partial_cmp","","",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"option"}}],[11,"lt","","",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"le","","",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"gt","","",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ge","","",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"cmp","","",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"ordering"}}],[11,"hash","","",144,null],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",144,{"inputs":[],"output":{"name":"restrictions"}}],[11,"all","","Returns the set containing all flags.",144,{"inputs":[],"output":{"name":"restrictions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",144,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",144,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",144,{"inputs":[{"name":"u8"}],"output":{"name":"restrictions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",144,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",144,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"sub","","Returns the set difference of the two sets of flags.",144,{"inputs":[{"name":"self"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"not","","Returns the complement of this set of flags.",144,{"inputs":[{"name":"self"}],"output":{"name":"restrictions"}}],[11,"from_iter","","",144,{"inputs":[{"name":"t"}],"output":{"name":"restrictions"}}],[11,"restriction_stmt_expr","","",144,{"inputs":[],"output":{"name":"self"}}],[11,"restriction_no_struct_literal","","",144,{"inputs":[],"output":{"name":"self"}}],[11,"no_noninline_mod","","",144,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"pathstyle"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"pathstyle"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"boundparsingmode"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"boundparsingmode"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"semicolonmode"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"semicolonmode"}],"output":{"name":"bool"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"tokentype"}}],[11,"from","","",143,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",143,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"new","","",135,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"box"}],"output":{"name":"parser"}}],[11,"token_to_string","","Convert a token to a string using self's reader",135,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[11,"this_token_to_string","","Convert the current token to a string using self's reader",135,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"this_token_descr","","",135,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"unexpected_last","","",135,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"presult"}}],[11,"unexpected","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"expect","","Expect and consume the token t. Signal an error if the next token is not t.",135,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"presult"}}],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible, then consume it; if inedible, then return without consuming anything.  Signal a fatal error if next token is unexpected.",135,null],[11,"parse_ident","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"check","","Check if the next token is `tok`, and return `true` if so.",135,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eat","","Consume token 'tok' if it exists. Returns true if the given token was present, false otherwise.",135,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"check_keyword","","",135,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eat_keyword","","If the next token is the given keyword, eat it and return true. Otherwise, return false.",135,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eat_keyword_noexpect","","",135,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"check_contextual_keyword","","",135,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"eat_contextual_keyword","","",135,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"expect_keyword","","If the given word is not a keyword, signal an error. If the next token is not the given word, signal an error. Otherwise, eat it.",135,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"presult"}}],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",135,{"inputs":[{"name":"self"}],"output":null}],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",135,{"inputs":[{"name":"self"}],"output":null}],[11,"expect_no_suffix","","",135,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"option"}],"output":null}],[11,"expect_gt","","Expect and consume a GT. if a >> is seen, replace it with a single > and continue. If a GT is not seen, signal an error.",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_gt_or_return","","",135,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by '<' and '>', stopping before the '>'.",135,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_gt","","",135,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_gt_or_return","","",135,{"inputs":[{"name":"self"},{"name":"option"},{"name":"f"}],"output":{"name":"presult"}}],[11,"eat_to_tokens","","Eat and discard tokens until one of `kets` is encountered. Respects token trees, passes through any errors encountered. Used for error recovery.",135,null],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function f must consume tokens until reaching the next separator or closing bracket.",135,{"inputs":[{"name":"self"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function f must consume tokens until reaching the next separator or closing bracket.",135,{"inputs":[{"name":"self"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"vec"}}],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function f must consume tokens until reaching the next separator or closing bracket.",135,{"inputs":[{"name":"self"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"parse_seq","","",135,{"inputs":[{"name":"self"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"presult"}}],[11,"bump","","Advance the parser by one token",135,{"inputs":[{"name":"self"}],"output":null}],[11,"bump_and_get","","Advance the parser by one token and return the bumped token.",135,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"bump_with","","Advance the parser using provided token as a next one. Use this when consuming a part of a token. For example a single `<` from `<<`.",135,{"inputs":[{"name":"self"},{"name":"token"},{"name":"bytepos"},{"name":"bytepos"}],"output":null}],[11,"buffer_length","","",135,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"look_ahead","","",135,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"r"}}],[11,"fatal","","",135,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","",135,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal_help","","",135,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"bug","","",135,null],[11,"warn","","",135,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"span_warn","","",135,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_err","","",135,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_bug","","",135,null],[11,"abort_if_errors","","",135,{"inputs":[{"name":"self"}],"output":null}],[11,"diagnostic","","",135,{"inputs":[{"name":"self"}],"output":{"name":"handler"}}],[11,"id_to_interned_str","","",135,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"internedstring"}}],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function type?",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_lifetime","","",135,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"parse_for_in_type","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_impl_trait_type","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ty_path","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ty_bare_fn","","parse a TyKind::BareFn type:",135,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"presult"}}],[11,"parse_obsolete_closure_kind","","Parses an obsolete closure kind (`&:`, `&mut:`, or `:`).",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_unsafety","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_trait_item","","Parse the items in a trait declaration",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_trait_items","","Parse the items in a trait declaration",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_mt","","Parse a possibly mutable type",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ret_ty","","Parse optional return type [ -> TY ] in function decl",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ty_sum","","Parse a type in a context where `T1+T2` is allowed.",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ty","","Parse a type.",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_borrowed_pointee","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_ptr","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"is_named_argument","","",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse_arg_general","","This version of parse arg doesn't necessarily require identifier names.",135,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_arg","","Parse a single function argument",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"maybe_parse_fixed_length_of_vec","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_lit_token","","Matches token_lit = LIT_INTEGER | ...",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_lit","","Matches lit = true | false | token_lit",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_pat_literal_maybe_minus","","matches '-' lit | lit",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_path_segment_ident","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_qualified_path","","Parses qualified path.",135,{"inputs":[{"name":"self"},{"name":"pathstyle"}],"output":{"name":"presult"}}],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the mode. The `mode` parameter determines whether lifetimes, types, and/or bounds are permitted and whether `::` must precede type parameter groups.",135,{"inputs":[{"name":"self"},{"name":"pathstyle"}],"output":{"name":"presult"}}],[11,"parse_path_segments_without_colons","","Examples: - `a::b<T,U>::c<V,W>` - `a::b<T,U>::c(V) -> W` - `a::b<T,U>::c(V)`",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_path_segments_with_colons","","Examples: - `a::b::<T,U>::c`",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_path_segments_without_types","","Examples: - `a::b::c`",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_opt_lifetime","","parses 0 or 1 lifetime",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_lifetime","","Parses a single lifetime Matches lifetime = LIFETIME",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_lifetime_defs","","Parses `lifetime_defs = [ lifetime_defs { ',' lifetime_defs } ]` where `lifetime_def = lifetime [':' lifetimes]`",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_lifetimes","","matches lifetimes = ( lifetime ) | ( lifetime , lifetimes ) actually, it matches the empty one too, but putting that in there messes up the grammar....",135,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"presult"}}],[11,"parse_mutability","","Parse mutability (`mut` or nothing).",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_field_name","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_field","","Parse ident COLON expr",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"mk_expr","","",135,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"bytepos"},{"name":"exprkind"},{"name":"thinvec"}],"output":{"name":"p"}}],[11,"mk_unary","","",135,{"inputs":[{"name":"self"},{"name":"unop"},{"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_binary","","",135,{"inputs":[{"name":"self"},{"name":"binop"},{"name":"p"},{"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_call","","",135,{"inputs":[{"name":"self"},{"name":"p"},{"name":"vec"}],"output":{"name":"exprkind"}}],[11,"mk_index","","",135,{"inputs":[{"name":"self"},{"name":"p"},{"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_range","","",135,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"rangelimits"}],"output":{"name":"presult"}}],[11,"mk_field","","",135,{"inputs":[{"name":"self"},{"name":"p"},{"name":"spannedident"}],"output":{"name":"exprkind"}}],[11,"mk_tup_field","","",135,{"inputs":[{"name":"self"},{"name":"p"},{"name":"spanned"}],"output":{"name":"exprkind"}}],[11,"mk_assign_op","","",135,{"inputs":[{"name":"self"},{"name":"binop"},{"name":"p"},{"name":"p"}],"output":{"name":"exprkind"}}],[11,"mk_mac_expr","","",135,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"bytepos"},{"name":"mac_"},{"name":"thinvec"}],"output":{"name":"p"}}],[11,"mk_lit_u32","","",135,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"thinvec"}],"output":{"name":"p"}}],[11,"parse_block_expr","","Parse a block or unsafe block",135,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"blockcheckmode"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",135,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_dot_or_call_expr_with","","",135,{"inputs":[{"name":"self"},{"name":"p"},{"name":"bytepos"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"check_unknown_macro_variable","","",135,{"inputs":[{"name":"self"}],"output":null}],[11,"parse_sep_and_kleene_op","","Parse an optional separator followed by a Kleene-style repetition token (+ or *).",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_token_tree","","parse a single token tree from the input.",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_all_token_trees","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_prefix_expr","","Parse a prefix-unary-operator expr",135,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_assoc_expr","","Parse an associative expression",135,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_assoc_expr_with","","Parse an associative expression with operators of at least `min_prec` precedence",135,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"lhsexpr"}],"output":{"name":"presult"}}],[11,"parse_if_expr","","Parse an 'if' or 'if let' expression ('if' token already eaten)",135,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_if_let_expr","","Parse an 'if let' expression ('if' token already eaten)",135,{"inputs":[{"name":"self"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_lambda_expr","","",135,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"captureby"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_else_expr","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_for_expr","","Parse a 'for' .. 'in' expression ('for' token already eaten)",135,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bytepos"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_while_expr","","Parse a 'while' or 'while let' expression ('while' token already eaten)",135,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bytepos"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_while_let_expr","","Parse a 'while let' expression ('while' token already eaten)",135,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bytepos"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_loop_expr","","",135,{"inputs":[{"name":"self"},{"name":"option"},{"name":"bytepos"},{"name":"thinvec"}],"output":{"name":"presult"}}],[11,"parse_arm","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_expr","","Parse an expression",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"with_res","","Evaluate the closure with restrictions in place.",135,{"inputs":[{"name":"self"},{"name":"restrictions"},{"name":"f"}],"output":{"name":"t"}}],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",135,{"inputs":[{"name":"self"},{"name":"restrictions"},{"name":"option"}],"output":{"name":"presult"}}],[11,"parse_pat","","Parse a pattern.",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_stmt","","Parse a statement. This stops just before trailing semicolons on everything but items. e.g. a `StmtKind::Semi` parses to a `StmtKind::Expr`, leaving the trailing `;` unconsumed.",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_block","","Parse a block. No inner attrs are allowed.",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_full_stmt","","Parse a statement, including the trailing semicolon.",135,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where clauses are not parsed here, and must be added later via `parse_where_clause()`.",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_where_clause","","Parses an optional `where` clause and places it in `generics`.",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",135,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"is_const_item","","true if we are looking at `const ID`, false for things like `const fn` etc",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"parse_fn_front_matter","","parses all the \"front matter\" for a `fn` declaration, up to and including the `fn` keyword:",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_impl_item","","Parse an impl item.",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_record_struct_body","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_tuple_struct_body","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_single_struct_field","","Parse a structure field declaration",135,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"presult"}}],[11,"submod_path_from_attr","","",135,null],[11,"default_submod_path","","Returns either a path to a module, or .",135,{"inputs":[{"name":"ident"},{"name":"path"},{"name":"codemap"}],"output":{"name":"modulepath"}}],[11,"parse_item","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main entry point for the parser.",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_optional_str","","",135,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"parse_str","","",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[0,"lexer","syntex_syntax::parse","",null,null],[3,"TokenAndSpan","syntex_syntax::parse::lexer","",null,null],[12,"tok","","",145,null],[12,"sp","","",145,null],[3,"StringReader","","",null,null],[12,"span_diagnostic","","",146,null],[12,"pos","","The absolute offset within the codemap of the next character to read",146,null],[12,"last_pos","","The absolute offset within the codemap of the last character read(curr)",146,null],[12,"col","","The column of the next character to read",146,null],[12,"curr","","The last character to be read",146,null],[12,"filemap","","",146,null],[12,"peek_tok","","",146,null],[12,"peek_span","","",146,null],[12,"fatal_errs","","",146,null],[5,"is_pattern_whitespace","","",null,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_block_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"comments","","",null,null],[3,"Comment","syntex_syntax::parse::lexer::comments","",null,null],[12,"style","","",147,null],[12,"lines","","",147,null],[12,"pos","","",147,null],[3,"Literal","","",null,null],[12,"lit","","",148,null],[12,"pos","","",148,null],[4,"CommentStyle","","",null,null],[13,"Isolated","","No code on either side of each line of the comment",149,null],[13,"Trailing","","Code exists to the left of the comment",149,null],[13,"Mixed","","Code before /* foo */ and after the comment",149,null],[13,"BlankLine","","Just a manual blank line \"\\n\\n\", for layout",149,null],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"doc_comment_style","","",null,{"inputs":[{"name":"str"}],"output":{"name":"attrstyle"}}],[5,"strip_doc_comment_decoration","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"gather_comments_and_literals","","",null,null],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"commentstyle"}}],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"commentstyle"}],"output":{"name":"bool"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"comment"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"literal"}}],[8,"Reader","syntex_syntax::parse::lexer","",null,null],[10,"is_eof","","",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"try_next_token","","",150,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_token","","",150,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[10,"fatal","","Report a fatal error with the current span.",150,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fatalerror"}}],[10,"err","","Report a non-fatal error with the current span.",150,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"emit_fatal_errors","","",150,{"inputs":[{"name":"self"}],"output":null}],[11,"unwrap_or_abort","","",150,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"tokenandspan"}}],[10,"peek","","",150,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"try_real_token","","Get a token the parser cares about.",150,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"real_token","","",150,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"self"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_eof","","",146,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_next_token","","Return the next token. EFFECT: advances the string_reader.",146,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fatal","","",146,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",146,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"emit_fatal_errors","","",146,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","",146,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"new_raw","","For comments.rs, which hackily pokes into pos and curr",146,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"new","","",146,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"curr_is","","",146,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"fatal_span","","Report a fatal lexical error with a given span.",146,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err_span","","Report a lexical error with a given span.",146,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start` up to but excluding `self.last_pos`, meaning the slice does not include the character `self.curr`.",146,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"f"}],"output":{"name":"t"}}],[11,"name_from","","Create a Name from a given offset to the current offset, each adjusted 1 towards each other (assumes that on either side there is a single-byte delimiter).",146,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"name_from_to","","As name_from, with an explicit endpoint.",146,{"inputs":[{"name":"self"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"bump","","Advance the StringReader by one character. If a newline is discovered, add it to the FileMap's list of line start offsets.",146,{"inputs":[{"name":"self"}],"output":null}],[11,"nextch","","",146,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nextch_is","","",146,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"nextnextch","","",146,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nextnextch_is","","",146,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[0,"token","syntex_syntax::parse","",null,null],[3,"InternedString","syntex_syntax::parse::token","Represents a string stored in the thread-local interner. Because the interner lives for the life of the thread, this can be safely treated as an immortal string, as long as it never crosses between threads.",null,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",151,null],[13,"Minus","","",151,null],[13,"Star","","",151,null],[13,"Slash","","",151,null],[13,"Percent","","",151,null],[13,"Caret","","",151,null],[13,"And","","",151,null],[13,"Or","","",151,null],[13,"Shl","","",151,null],[13,"Shr","","",151,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",152,null],[13,"Bracket","","A square bracket: `[` or `]`",152,null],[13,"Brace","","A curly brace: `{` or `}`",152,null],[13,"NoDelim","","An empty delimiter",152,null],[4,"SpecialMacroVar","","",null,null],[13,"CrateMacroVar","","`$crate` will be filled in with the name of the crate a macro was imported from, if any.",153,null],[4,"Lit","","",null,null],[13,"Byte","","",154,null],[13,"Char","","",154,null],[13,"Integer","","",154,null],[13,"Float","","",154,null],[13,"Str_","","",154,null],[13,"StrRaw","","",154,null],[13,"ByteStr","","",154,null],[13,"ByteStrRaw","","",154,null],[4,"Token","","",null,null],[13,"Eq","","",155,null],[13,"Lt","","",155,null],[13,"Le","","",155,null],[13,"EqEq","","",155,null],[13,"Ne","","",155,null],[13,"Ge","","",155,null],[13,"Gt","","",155,null],[13,"AndAnd","","",155,null],[13,"OrOr","","",155,null],[13,"Not","","",155,null],[13,"Tilde","","",155,null],[13,"BinOp","","",155,null],[13,"BinOpEq","","",155,null],[13,"At","","",155,null],[13,"Dot","","",155,null],[13,"DotDot","","",155,null],[13,"DotDotDot","","",155,null],[13,"Comma","","",155,null],[13,"Semi","","",155,null],[13,"Colon","","",155,null],[13,"ModSep","","",155,null],[13,"RArrow","","",155,null],[13,"LArrow","","",155,null],[13,"FatArrow","","",155,null],[13,"Pound","","",155,null],[13,"Dollar","","",155,null],[13,"Question","","",155,null],[13,"OpenDelim","","An opening delimiter, eg. `{`",155,null],[13,"CloseDelim","","A closing delimiter, eg. `}`",155,null],[13,"Literal","","",155,null],[13,"Ident","","",155,null],[13,"Underscore","","",155,null],[13,"Lifetime","","",155,null],[13,"Interpolated","","",155,null],[13,"DocComment","","Doc comment",155,null],[13,"MatchNt","","Parse a nonterminal (name to bind, name of NT)",155,null],[13,"SubstNt","","A syntactic variable that will be filled in by macro expansion.",155,null],[13,"SpecialVarNt","","A macro variable with special meaning.",155,null],[13,"Whitespace","","Whitespace",155,null],[13,"Comment","","Comment",155,null],[13,"Shebang","","",155,null],[13,"Eof","","",155,null],[4,"Nonterminal","","For interpolation during macro expansion.",null,null],[13,"NtItem","","",156,null],[13,"NtBlock","","",156,null],[13,"NtStmt","","",156,null],[13,"NtPat","","",156,null],[13,"NtExpr","","",156,null],[13,"NtTy","","",156,null],[13,"NtIdent","","",156,null],[13,"NtMeta","","Stuff inside brackets for attributes",156,null],[13,"NtPath","","",156,null],[13,"NtTT","","",156,null],[13,"NtArm","","",156,null],[13,"NtImplItem","","",156,null],[13,"NtTraitItem","","",156,null],[13,"NtGenerics","","",156,null],[13,"NtWhereClause","","",156,null],[13,"NtArg","","",156,null],[5,"with_ident_interner","","",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[5,"reset_ident_interner","","Reset the ident interner to its initial state.",null,{"inputs":[],"output":null}],[5,"clear_ident_interner","","",null,{"inputs":[],"output":null}],[5,"intern_and_get_ident","","Interns and returns the string contents of an identifier, using the thread-local interner.",null,{"inputs":[{"name":"str"}],"output":{"name":"internedstring"}}],[5,"intern","","Maps a string to its interned representation.",null,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[5,"gensym","","gensym's a new usize, using the current interner.",null,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[5,"str_to_ident","","Maps a string to an identifier with an empty syntax context.",null,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[5,"gensym_ident","","Maps a string to a gensym'ed identifier.",null,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[5,"fresh_name","","",null,{"inputs":[{"name":"ident"}],"output":{"name":"name"}}],[0,"keywords","","",null,null],[3,"Keyword","syntex_syntax::parse::token::keywords","",null,null],[17,"Invalid","","",null,null],[17,"As","","",null,null],[17,"Box","","",null,null],[17,"Break","","",null,null],[17,"Const","","",null,null],[17,"Continue","","",null,null],[17,"Crate","","",null,null],[17,"Else","","",null,null],[17,"Enum","","",null,null],[17,"Extern","","",null,null],[17,"False","","",null,null],[17,"Fn","","",null,null],[17,"For","","",null,null],[17,"If","","",null,null],[17,"Impl","","",null,null],[17,"In","","",null,null],[17,"Let","","",null,null],[17,"Loop","","",null,null],[17,"Match","","",null,null],[17,"Mod","","",null,null],[17,"Move","","",null,null],[17,"Mut","","",null,null],[17,"Pub","","",null,null],[17,"Ref","","",null,null],[17,"Return","","",null,null],[17,"SelfValue","","",null,null],[17,"SelfType","","",null,null],[17,"Static","","",null,null],[17,"Struct","","",null,null],[17,"Super","","",null,null],[17,"Trait","","",null,null],[17,"True","","",null,null],[17,"Type","","",null,null],[17,"Unsafe","","",null,null],[17,"Use","","",null,null],[17,"Where","","",null,null],[17,"While","","",null,null],[17,"Abstract","","",null,null],[17,"Alignof","","",null,null],[17,"Become","","",null,null],[17,"Do","","",null,null],[17,"Final","","",null,null],[17,"Macro","","",null,null],[17,"Offsetof","","",null,null],[17,"Override","","",null,null],[17,"Priv","","",null,null],[17,"Proc","","",null,null],[17,"Pure","","",null,null],[17,"Sizeof","","",null,null],[17,"Typeof","","",null,null],[17,"Unsized","","",null,null],[17,"Virtual","","",null,null],[17,"Yield","","",null,null],[17,"Default","","",null,null],[17,"StaticLifetime","","",null,null],[17,"Union","","",null,null],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"keyword"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ident","","",157,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"name","","",157,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[6,"IdentInterner","syntex_syntax::parse::token","",null,null],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"encode","","",151,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",151,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",151,null],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"encode","","",152,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",152,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",152,null],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"specialmacrovar"}}],[11,"encode","","",153,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",153,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",153,{"inputs":[{"name":"self"},{"name":"specialmacrovar"}],"output":{"name":"bool"}}],[11,"hash","","",153,null],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","",153,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"encode","","",154,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",154,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",154,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",154,null],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"short_name","","",154,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"encode","","",155,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",155,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",155,null],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_like_gt","","Returns `true` if the token starts with '>'.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lit","","Returns `true` if the token is any literal",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_ident","","Returns `true` if the token is an identifier.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_interpolated","","Returns `true` if the token is interpolated.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_path","","Returns `true` if the token is an interpolated path.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_path_start","","",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_binop","","Maps a token to its corresponding binary operator.",155,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",155,{"inputs":[{"name":"self"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"is_path_segment_keyword","","",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_any_keyword","","Returns `true` if the token is either a strict or reserved keyword.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_strict_keyword","","Returns `true` if the token is a strict keyword.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword reserved for possible future use.",155,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"nonterminal"}}],[11,"encode","","",156,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",156,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",156,{"inputs":[{"name":"self"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"self"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"hash","","",156,null],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"hash","","",158,null],[11,"partial_cmp","","",158,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"option"}}],[11,"lt","","",158,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"le","","",158,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"gt","","",158,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ge","","",158,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"cmp","","",158,{"inputs":[{"name":"self"},{"name":"internedstring"}],"output":{"name":"ordering"}}],[11,"new","","",158,{"inputs":[{"name":"str"}],"output":{"name":"internedstring"}}],[11,"new_from_name","","",158,{"inputs":[{"name":"name"}],"output":{"name":"internedstring"}}],[11,"deref","","",158,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"decode","","",158,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",158,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"attr","syntex_syntax::parse","",null,null],[11,"parse_outer_attributes","syntex_syntax::parse::parser","Parse attributes that appear before an item",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",135,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"presult"}}],[11,"parse_inner_attributes","","Parse attributes that appear after the opening of an item. These should be preceded by an exclamation mark, but we accept and warn about one terminated by a semicolon. matches inner_attrs*",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[11,"parse_meta_item","","matches meta_item = IDENT | IDENT = lit | IDENT meta_seq",135,{"inputs":[{"name":"self"}],"output":{"name":"presult"}}],[0,"common","syntex_syntax::parse","Common routines shared by parser mods",null,null],[3,"SeqSep","syntex_syntax::parse::common","SeqSep : a sequence separator (token) and whether a trailing separator is allowed.",null,null],[12,"sep","","",159,null],[12,"trailing_sep_allowed","","",159,null],[11,"trailing_allowed","","",159,{"inputs":[{"name":"token"}],"output":{"name":"seqsep"}}],[11,"none","","",159,{"inputs":[],"output":{"name":"seqsep"}}],[0,"classify","syntex_syntax::parse","Routines the parser uses to classify AST nodes",null,null],[5,"expr_requires_semi_to_be_stmt","syntex_syntax::parse::classify","Does this expression require a semicolon to be treated as a statement? The negation of this: 'can this expression be used as a statement without a semicolon' -- is used as an early-bail-out in the parser so that, for instance,     if true {...} else {...}      |x| 5 isn't parsed as (if true {...} else {...} | x) | 5",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"expr_is_simple_block","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"stmt_ends_with_semi","","this statement requires a semicolon after it. note that in one case (stmt_semi), we've already seen the semicolon, and thus don't need another.",null,{"inputs":[{"name":"stmtkind"}],"output":{"name":"bool"}}],[0,"obsolete","syntex_syntax::parse","Support for parsing unsupported, old syntaxes, for the purpose of reporting errors. Parsing of these syntaxes is tested by compile-test/obsolete-syntax.rs.",null,null],[4,"ObsoleteSyntax","syntex_syntax::parse::obsolete","The specific types of unsupported syntax",null,null],[13,"ClosureKind","","",160,null],[13,"ExternCrateString","","",160,null],[8,"ParserObsoleteMethods","","",null,null],[10,"obsolete","","Reports an obsolete syntax non-fatal error.",161,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"}],"output":null}],[10,"report","","",161,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"},{"name":"str"},{"name":"str"},{"name":"bool"}],"output":null}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"obsoletesyntax"}}],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"obsoletesyntax"}],"output":{"name":"bool"}}],[11,"hash","","",160,null],[11,"obsolete","syntex_syntax::parse::parser","Reports an obsolete syntax non-fatal error.",135,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"}],"output":null}],[11,"report","","",135,{"inputs":[{"name":"self"},{"name":"span"},{"name":"obsoletesyntax"},{"name":"str"},{"name":"str"},{"name":"bool"}],"output":null}],[6,"PResult","syntex_syntax::parse","",null,null],[11,"new","","",134,{"inputs":[],"output":{"name":"parsesess"}}],[11,"with_span_handler","","",134,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"parsesess"}}],[11,"codemap","","",134,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[0,"ptr","syntex_syntax","The AST pointer",null,null],[3,"P","syntex_syntax::ptr","An owned smart pointer.",null,null],[5,"P","","Construct a `P<T>` from a `T` value.",null,{"inputs":[{"name":"t"}],"output":{"name":"p"}}],[11,"hash","","",162,null],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",162,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"lt","","",162,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"le","","",162,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"gt","","",162,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ge","","",162,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"cmp","","",162,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"ordering"}}],[11,"and_then","","Move out of the pointer. Intended for chaining transformations not covered by `map`.",162,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"u"}}],[11,"unwrap","","Equivalent to and_then(|x| x)",162,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"map","","Transform the inner value, consuming `self` and producing a new `P<T>`.",162,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"p"}}],[11,"deref","","",162,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",162,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",162,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","",162,{"inputs":[],"output":{"name":"p"}}],[11,"from_vec","","",162,{"inputs":[{"name":"vec"}],"output":{"name":"p"}}],[11,"into_vec","","",162,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"default","","",162,{"inputs":[],"output":{"name":"p"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"from","","",162,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",162,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from_iter","","",162,{"inputs":[{"name":"i"}],"output":{"name":"p"}}],[11,"into_iter","","",162,null],[11,"encode","","",162,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",162,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"show_span","syntex_syntax","Span debugger",null,null],[5,"run","syntex_syntax::show_span","",null,{"inputs":[{"name":"handler"},{"name":"str"},{"name":"crate"}],"output":null}],[0,"std_inject","syntex_syntax","",null,null],[5,"no_core","syntex_syntax::std_inject","",null,{"inputs":[{"name":"crate"}],"output":{"name":"bool"}}],[5,"no_std","","",null,{"inputs":[{"name":"crate"}],"output":{"name":"bool"}}],[5,"maybe_inject_crates_ref","","",null,{"inputs":[{"name":"parsesess"},{"name":"crate"},{"name":"option"}],"output":{"name":"crate"}}],[0,"str","syntex_syntax","",null,null],[5,"char_at","syntex_syntax::str","",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"char"}}],[5,"slice_shift_char","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"test","syntex_syntax","",null,null],[5,"modify_for_testing","syntex_syntax::test","",null,{"inputs":[{"name":"parsesess"},{"name":"bool"},{"name":"crate"},{"name":"handler"}],"output":{"name":"crate"}}],[0,"tokenstream","syntex_syntax","Token Streams",null,null],[3,"Delimited","syntex_syntax::tokenstream","A delimited sequence of token trees",null,null],[12,"delim","","The type of delimiter",163,null],[12,"open_span","","The span covering the opening delimiter",163,null],[12,"tts","","The delimited sequence of token trees",163,null],[12,"close_span","","The span covering the closing delimiter",163,null],[3,"SequenceRepetition","","A sequence of token trees",null,null],[12,"tts","","The sequence of token trees",164,null],[12,"separator","","The optional separator",164,null],[12,"op","","Whether the sequence can be repeated zero (*), or one or more times (+)",164,null],[12,"num_captures","","The number of `MatchNt`s that appear in the sequence (and subsequences)",164,null],[3,"TokenStream","","#Token Streams",null,null],[3,"Iter","","",null,null],[3,"Split","","",null,null],[4,"KleeneOp","","A Kleene-style repetition operator for token sequences.",null,null],[13,"ZeroOrMore","","",165,null],[13,"OneOrMore","","",165,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",166,null],[13,"Delimited","","A delimited sequence of token trees",166,null],[13,"Sequence","","A kleene-style repetition sequence with a span",166,null],[4,"InternalTS","","",null,null],[13,"Empty","","",167,null],[13,"Leaf","","",167,null],[12,"tts","syntex_syntax::tokenstream::InternalTS","",167,null],[12,"offset","","",167,null],[12,"len","","",167,null],[12,"sp","","",167,null],[13,"Node","syntex_syntax::tokenstream","",167,null],[12,"left","syntex_syntax::tokenstream::InternalTS","",167,null],[12,"right","","",167,null],[12,"len","","",167,null],[12,"sp","","",167,null],[11,"clone","syntex_syntax::tokenstream","",163,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"encode","","",163,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",163,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",163,null],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open_token","","Returns the opening delimiter as a token.",163,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"close_token","","Returns the closing delimiter as a token.",163,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"open_tt","","Returns the opening delimiter as a token tree.",163,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"close_tt","","Returns the closing delimiter as a token tree.",163,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"subtrees","","Returns the token trees inside the delimiters.",163,null],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"sequencerepetition"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"self"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"encode","","",164,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",164,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",164,null],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"kleeneop"}}],[11,"eq","","",165,{"inputs":[{"name":"self"},{"name":"kleeneop"}],"output":{"name":"bool"}}],[11,"encode","","",165,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",165,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",165,null],[11,"fmt","","",165,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",166,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"encode","","",166,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",166,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",166,null],[11,"len","","",166,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_tt","","",166,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"tokentree"}}],[11,"get_span","","Returns the `Span` corresponding to this token tree.",166,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"parse","","Use this token tree as a matcher to parse given tts.",166,null],[11,"eq_unspanned","","Check if this TokenTree is equal to the other, regardless of span information.",166,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"span","","Retrieve the TokenTree's span.",166,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"eq_token","","Indicates if the stream is a token that is equal to the provided token.",166,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"is_ident","","Indicates if the token is an identifier.",166,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"maybe_ident","","Returns an identifier.",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"maybe_lit","","Returns a Token literal.",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"maybe_str","","Returns an AST string literal.",166,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"tokenstream"}}],[11,"hash","","",168,null],[11,"encode","","",168,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",168,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"internalts"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"internalts"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"self"},{"name":"internalts"}],"output":{"name":"bool"}}],[11,"hash","","",167,null],[11,"encode","","",167,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",167,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",168,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"name":"bool"}}],[11,"mk_empty","","",168,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"from_tts","","Convert a vector of `TokenTree`s into a `TokenStream`.",168,{"inputs":[{"name":"vec"}],"output":{"name":"tokenstream"}}],[11,"from_tokens","","Convert a vector of Tokens into a TokenStream.",168,{"inputs":[{"name":"vec"}],"output":{"name":"tokenstream"}}],[11,"respan","","Manually change a TokenStream's span.",168,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"tokenstream"}}],[11,"concat","","Concatenates two TokenStreams into a new TokenStream.",168,{"inputs":[{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"is_empty","","Indicate if the TokenStream is empty.",168,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Return a TokenStream's length.",168,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_vec","","Convert a TokenStream into a vector of borrowed TokenTrees.",168,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_tts","","Convert a TokenStream into a vector of TokenTrees (by cloning the TokenTrees). (This operation is an O(n) deep copy of the underlying structure.)",168,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"span","","Return the TokenStream's span.",168,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"iter","","Returns an iterator over a TokenStream (as a sequence of TokenTrees).",168,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"split","","Splits a TokenStream based on the provided `&TokenTree -> bool` predicate.",168,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"slice","","Produce a slice of the input TokenStream from the `from` index, inclusive, to the `to` index, non-inclusive.",168,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"tokenstream"}}],[11,"slice_from","","Slice starting at the provided index, inclusive.",168,{"inputs":[{"name":"self"},{"name":"rangefrom"}],"output":{"name":"tokenstream"}}],[11,"slice_to","","Slice up to the provided index, non-inclusive.",168,{"inputs":[{"name":"self"},{"name":"rangeto"}],"output":{"name":"tokenstream"}}],[11,"is_delimited","","Indicates where the stream is a single, delimited expression (e.g., `(a,b,c)` or `{a,b,c}`).",168,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"maybe_delimited","","Returns the inside of the delimited term as a new TokenStream.",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_ident","","Indicates if the stream is exactly one identifier.",168,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"maybe_ident","","Returns an identifier",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq_unspanned","","Compares two TokenStreams, checking equality without regarding span information.",168,{"inputs":[{"name":"self"},{"name":"tokenstream"}],"output":{"name":"bool"}}],[11,"as_delimited_stream","","Convert a vector of TokenTrees into a parentheses-delimited TokenStream.",168,{"inputs":[{"name":"vec"},{"name":"delimtoken"}],"output":{"name":"tokenstream"}}],[11,"next","","",169,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",170,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",168,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"tokentree"}}],[11,"index","","",167,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"tokentree"}}],[0,"visit","syntex_syntax","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[4,"FnKind","syntex_syntax::visit","",null,null],[13,"ItemFn","","fn foo() or extern \"Abi\" fn foo()",171,null],[13,"Method","","fn foo(&self)",171,null],[13,"Closure","","|x, y| {}",171,null],[5,"walk_opt_name","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_sp_ident","","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"ident"}],"output":null}],[5,"walk_crate","","",null,{"inputs":[{"name":"v"},{"name":"crate"}],"output":null}],[5,"walk_macro_def","","",null,{"inputs":[{"name":"v"},{"name":"macrodef"}],"output":null}],[5,"walk_mod","","",null,{"inputs":[{"name":"v"},{"name":"mod"}],"output":null}],[5,"walk_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"walk_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"traitref"}],"output":null}],[5,"walk_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"walk_enum_def","","",null,{"inputs":[{"name":"v"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_list_item","","",null,{"inputs":[{"name":"v"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"walk_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_fn_kind","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"}],"output":null}],[5,"walk_fn","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"}],"output":null}],[5,"walk_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"walk_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"walk_struct_def","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_struct_field","","",null,{"inputs":[{"name":"v"},{"name":"structfield"}],"output":null}],[5,"walk_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"walk_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"walk_vis","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_name","","",172,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":null}],[11,"visit_ident","","",172,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":null}],[11,"visit_mod","","",172,{"inputs":[{"name":"self"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_foreign_item","","",172,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":null}],[11,"visit_item","","",172,{"inputs":[{"name":"self"},{"name":"item"}],"output":null}],[11,"visit_local","","",172,{"inputs":[{"name":"self"},{"name":"local"}],"output":null}],[11,"visit_block","","",172,{"inputs":[{"name":"self"},{"name":"block"}],"output":null}],[11,"visit_stmt","","",172,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":null}],[11,"visit_arm","","",172,{"inputs":[{"name":"self"},{"name":"arm"}],"output":null}],[11,"visit_pat","","",172,{"inputs":[{"name":"self"},{"name":"pat"}],"output":null}],[11,"visit_expr","","",172,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_expr_post","","",172,{"inputs":[{"name":"self"},{"name":"expr"}],"output":null}],[11,"visit_ty","","",172,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",172,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_fn","","",172,{"inputs":[{"name":"self"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"visit_trait_item","","",172,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":null}],[11,"visit_impl_item","","",172,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":null}],[11,"visit_trait_ref","","",172,{"inputs":[{"name":"self"},{"name":"traitref"}],"output":null}],[11,"visit_ty_param_bound","","",172,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",172,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",172,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_struct_field","","",172,{"inputs":[{"name":"self"},{"name":"structfield"}],"output":null}],[11,"visit_enum_def","","",172,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"},{"name":"span"}],"output":null}],[11,"visit_variant","","",172,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[11,"visit_lifetime","","",172,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",172,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_mac","","",172,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[11,"visit_path","","",172,{"inputs":[{"name":"self"},{"name":"path"},{"name":"nodeid"}],"output":null}],[11,"visit_path_list_item","","",172,{"inputs":[{"name":"self"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[11,"visit_path_segment","","",172,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",172,{"inputs":[{"name":"self"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",172,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",172,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_macro_def","","",172,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":null}],[11,"visit_vis","","",172,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":null}],[11,"visit_fn_ret_ty","","",172,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"fnkind"}}],[11,"eq","","",171,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"self"},{"name":"fnkind"}],"output":{"name":"bool"}}],[0,"print","syntex_syntax","",null,null],[0,"pp","syntex_syntax::print","This pretty-printer is a direct reimplementation of Philip Karlton's Mesa pretty-printer, as described in appendix A of",null,null],[3,"BreakToken","syntex_syntax::print::pp","",null,null],[3,"BeginToken","","",null,null],[3,"PrintStackElem","","",null,null],[3,"Printer","","In case you do not have the paper, here is an explanation of what's going on.",null,null],[12,"out","","",173,null],[4,"Breaks","","",null,null],[13,"Consistent","","",174,null],[13,"Inconsistent","","",174,null],[4,"Token","","",null,null],[13,"String","","",175,null],[13,"Break","","",175,null],[13,"Begin","","",175,null],[13,"End","","",175,null],[13,"Eof","","",175,null],[4,"PrintStackBreak","","",null,null],[13,"Fits","","",176,null],[13,"Broken","","",176,null],[5,"mk_printer","","",null,{"inputs":[{"name":"box"},{"name":"usize"}],"output":{"name":"printer"}}],[5,"rbox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[5,"ibox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"cbox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"break_offset","","",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[5,"end","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"eof","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"huge_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"zero_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"spaces","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"zerobreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"space","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak_tok_offset","","",null,{"inputs":[{"name":"isize"}],"output":{"name":"token"}}],[5,"hardbreak_tok","","",null,{"inputs":[],"output":{"name":"token"}}],[11,"clone","","",174,{"inputs":[{"name":"self"}],"output":{"name":"breaks"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"breaks"}],"output":{"name":"bool"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"breaktoken"}}],[11,"clone","","",178,{"inputs":[{"name":"self"}],"output":{"name":"begintoken"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"is_eof","","",175,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_hardbreak_tok","","",175,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"printstackbreak"}}],[11,"clone","","",179,{"inputs":[{"name":"self"}],"output":{"name":"printstackelem"}}],[11,"last_token","","",173,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"replace_last_token","","",173,{"inputs":[{"name":"self"},{"name":"token"}],"output":null}],[11,"pretty_print","","",173,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"result"}}],[11,"check_stream","","",173,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"scan_push","","",173,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"scan_pop","","",173,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"scan_top","","",173,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"scan_pop_bottom","","",173,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance_right","","",173,{"inputs":[{"name":"self"}],"output":null}],[11,"advance_left","","",173,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"check_stack","","",173,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"print_newline","","",173,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[11,"indent","","",173,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"get_top","","",173,{"inputs":[{"name":"self"}],"output":{"name":"printstackelem"}}],[11,"print_str","","",173,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"print","","",173,{"inputs":[{"name":"self"},{"name":"token"},{"name":"isize"}],"output":{"name":"result"}}],[0,"pprust","syntex_syntax::print","",null,null],[3,"NoAnn","syntex_syntax::print::pprust","",null,null],[3,"CurrentCommentAndLiteral","","",null,null],[12,"cur_cmnt","","",180,null],[12,"cur_lit","","",180,null],[3,"State","","",null,null],[12,"s","","",181,null],[4,"AnnNode","","",null,null],[13,"NodeIdent","","",182,null],[13,"NodeName","","",182,null],[13,"NodeBlock","","",182,null],[13,"NodeItem","","",182,null],[13,"NodeSubItem","","",182,null],[13,"NodeExpr","","",182,null],[13,"NodePat","","",182,null],[5,"rust_printer","","",null,{"inputs":[{"name":"box"}],"output":{"name":"state"}}],[5,"rust_printer_annotated","","",null,{"inputs":[{"name":"box"},{"name":"ppann"}],"output":{"name":"state"}}],[5,"print_crate","","Requires you to pass an input filename and reader so that it can scan the input text for comments and literals to copy forward.",null,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"crate"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"f"}],"output":{"name":"string"}}],[5,"binop_to_string","","",null,{"inputs":[{"name":"binoptoken"}],"output":{"name":"str"}}],[5,"token_to_string","","",null,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[5,"ty_to_string","","",null,{"inputs":[{"name":"ty"}],"output":{"name":"string"}}],[5,"bounds_to_string","","",null,null],[5,"pat_to_string","","",null,{"inputs":[{"name":"pat"}],"output":{"name":"string"}}],[5,"arm_to_string","","",null,{"inputs":[{"name":"arm"}],"output":{"name":"string"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"string"}}],[5,"lifetime_to_string","","",null,{"inputs":[{"name":"lifetime"}],"output":{"name":"string"}}],[5,"tt_to_string","","",null,{"inputs":[{"name":"tokentree"}],"output":{"name":"string"}}],[5,"tts_to_string","","",null,null],[5,"stmt_to_string","","",null,{"inputs":[{"name":"stmt"}],"output":{"name":"string"}}],[5,"attr_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"item_to_string","","",null,{"inputs":[{"name":"item"}],"output":{"name":"string"}}],[5,"impl_item_to_string","","",null,{"inputs":[{"name":"implitem"}],"output":{"name":"string"}}],[5,"trait_item_to_string","","",null,{"inputs":[{"name":"traititem"}],"output":{"name":"string"}}],[5,"generics_to_string","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"string"}}],[5,"where_clause_to_string","","",null,{"inputs":[{"name":"whereclause"}],"output":{"name":"string"}}],[5,"fn_block_to_string","","",null,{"inputs":[{"name":"fndecl"}],"output":{"name":"string"}}],[5,"path_to_string","","",null,{"inputs":[{"name":"path"}],"output":{"name":"string"}}],[5,"ident_to_string","","",null,{"inputs":[{"name":"ident"}],"output":{"name":"string"}}],[5,"fun_to_string","","",null,{"inputs":[{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"ident"},{"name":"generics"}],"output":{"name":"string"}}],[5,"block_to_string","","",null,{"inputs":[{"name":"block"}],"output":{"name":"string"}}],[5,"meta_item_to_string","","",null,{"inputs":[{"name":"metaitem"}],"output":{"name":"string"}}],[5,"attribute_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"lit_to_string","","",null,{"inputs":[{"name":"lit"}],"output":{"name":"string"}}],[5,"variant_to_string","","",null,{"inputs":[{"name":"variant"}],"output":{"name":"string"}}],[5,"arg_to_string","","",null,{"inputs":[{"name":"arg"}],"output":{"name":"string"}}],[5,"mac_to_string","","",null,{"inputs":[{"name":"mac"}],"output":{"name":"string"}}],[5,"visibility_qualified","","",null,{"inputs":[{"name":"visibility"},{"name":"str"}],"output":{"name":"string"}}],[17,"INDENT_UNIT","","",null,null],[17,"DEFAULT_COLUMNS","","",null,null],[8,"PpAnn","","",null,null],[11,"pre","","",183,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[11,"post","","",183,{"inputs":[{"name":"self"},{"name":"state"},{"name":"annnode"}],"output":{"name":"result"}}],[8,"PrintState","","",null,null],[10,"writer","","",184,{"inputs":[{"name":"self"}],"output":{"name":"printer"}}],[10,"boxes","","",184,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"comments","","",184,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"cur_cmnt_and_lit","","",184,{"inputs":[{"name":"self"}],"output":{"name":"currentcommentandliteral"}}],[10,"literals","","",184,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"word_space","","",184,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"popen","","",184,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pclose","","",184,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_begin","","",184,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_end","","",184,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_bol","","",184,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hardbreak_if_not_bol","","",184,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"rbox","","",184,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[11,"ibox","","",184,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"end","","",184,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"commasep","","",184,null],[11,"next_lit","","",184,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"maybe_print_comment","","",184,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"result"}}],[11,"print_comment","","",184,{"inputs":[{"name":"self"},{"name":"comment"}],"output":{"name":"result"}}],[11,"next_comment","","",184,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"print_literal","","",184,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"result"}}],[11,"print_string","","",184,{"inputs":[{"name":"self"},{"name":"str"},{"name":"strstyle"}],"output":{"name":"result"}}],[11,"print_inner_attributes","","",184,null],[11,"print_inner_attributes_no_trailing_hardbreak","","",184,null],[11,"print_outer_attributes","","",184,null],[11,"print_inner_attributes_inline","","",184,null],[11,"print_outer_attributes_inline","","",184,null],[11,"print_either_attributes","","",184,null],[11,"print_attribute","","",184,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"result"}}],[11,"print_attribute_inline","","",184,{"inputs":[{"name":"self"},{"name":"attribute"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_meta_item","","",184,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"result"}}],[11,"space_if_not_bol","","",184,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"nbsp","","",184,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",185,{"inputs":[{"name":"self"}],"output":{"name":"noann"}}],[11,"clone","","",180,{"inputs":[{"name":"self"}],"output":{"name":"currentcommentandliteral"}}],[11,"new_from_input","","",181,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",181,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"writer","","",181,{"inputs":[{"name":"self"}],"output":{"name":"printer"}}],[11,"boxes","","",181,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"comments","","",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cur_cmnt_and_lit","","",181,{"inputs":[{"name":"self"}],"output":{"name":"currentcommentandliteral"}}],[11,"literals","","",181,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cbox","","",181,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"word_nbsp","","",181,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"head","","",181,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"bopen","","",181,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"bclose_","","",181,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"result"}}],[11,"bclose_maybe_open","","",181,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"bclose","","",181,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"result"}}],[11,"in_cbox","","",181,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"break_offset_if_not_bol","","",181,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[11,"synth_comment","","",181,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"commasep_cmnt","","",181,null],[11,"commasep_exprs","","",181,null],[11,"print_mod","","",181,null],[11,"print_foreign_mod","","",181,null],[11,"print_opt_lifetime","","",181,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_type","","",181,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"result"}}],[11,"print_foreign_item","","",181,{"inputs":[{"name":"self"},{"name":"foreignitem"}],"output":{"name":"result"}}],[11,"print_item","","Pretty-print an item",181,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"result"}}],[11,"print_enum_def","","",181,{"inputs":[{"name":"self"},{"name":"enumdef"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_variants","","",181,null],[11,"print_visibility","","",181,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_struct","","",181,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_tt","","This doesn't deserve to be called \"pretty\" printing, but it should be meaning-preserving. A quick hack that might help would be to look at the spans embedded in the TTs to decide where to put spaces and newlines. But it'd be better to parse these according to the grammar of the appropriate macro, transcribe back into the grammar we just parsed from, and then pretty-print the resulting AST nodes (so, e.g., we print expression arguments as expressions). It can be done! I think.",181,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"result"}}],[11,"print_tts","","",181,null],[11,"print_variant","","",181,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"result"}}],[11,"print_method_sig","","",181,{"inputs":[{"name":"self"},{"name":"ident"},{"name":"methodsig"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_trait_item","","",181,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"result"}}],[11,"print_impl_item","","",181,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"result"}}],[11,"print_stmt","","",181,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"result"}}],[11,"print_block","","",181,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed","","",181,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed_with_attrs","","",181,null],[11,"print_block_unclosed_indent","","",181,{"inputs":[{"name":"self"},{"name":"block"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_block_with_attrs","","",181,null],[11,"print_block_maybe_unclosed","","",181,null],[11,"print_if","","",181,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_if_let","","",181,{"inputs":[{"name":"self"},{"name":"pat"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_mac","","",181,{"inputs":[{"name":"self"},{"name":"mac"},{"name":"delimtoken"}],"output":{"name":"result"}}],[11,"check_expr_bin_needs_paren","","",181,{"inputs":[{"name":"self"},{"name":"expr"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"print_expr_maybe_paren","","",181,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_expr","","",181,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_local_decl","","",181,{"inputs":[{"name":"self"},{"name":"local"}],"output":{"name":"result"}}],[11,"print_ident","","",181,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"result"}}],[11,"print_usize","","",181,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_name","","",181,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"result"}}],[11,"print_for_decl","","",181,{"inputs":[{"name":"self"},{"name":"local"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_pat","","",181,{"inputs":[{"name":"self"},{"name":"pat"}],"output":{"name":"result"}}],[11,"print_fn","","",181,{"inputs":[{"name":"self"},{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"option"},{"name":"generics"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_fn_args_and_ret","","",181,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_fn_block_args","","",181,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_capture_clause","","",181,{"inputs":[{"name":"self"},{"name":"captureby"}],"output":{"name":"result"}}],[11,"print_bounds","","",181,null],[11,"print_lifetime","","",181,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"result"}}],[11,"print_lifetime_bounds","","",181,null],[11,"print_generics","","",181,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"result"}}],[11,"print_ty_param","","",181,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"result"}}],[11,"print_where_clause","","",181,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"result"}}],[11,"print_view_path","","",181,{"inputs":[{"name":"self"},{"name":"viewpath"}],"output":{"name":"result"}}],[11,"print_mutability","","",181,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"result"}}],[11,"print_mt","","",181,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"result"}}],[11,"print_arg","","",181,{"inputs":[{"name":"self"},{"name":"arg"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_fn_output","","",181,{"inputs":[{"name":"self"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_ty_fn","","",181,{"inputs":[{"name":"self"},{"name":"abi"},{"name":"unsafety"},{"name":"fndecl"},{"name":"option"},{"name":"generics"}],"output":{"name":"result"}}],[11,"maybe_print_trailing_comment","","",181,{"inputs":[{"name":"self"},{"name":"span"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_remaining_comments","","",181,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"print_opt_abi_and_extern_if_nondefault","","",181,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_extern_opt_abi","","",181,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_header_info","","",181,{"inputs":[{"name":"self"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_unsafety","","",181,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"result"}}],[0,"ext","syntex_syntax","",null,null],[0,"base","syntex_syntax::ext","",null,null],[3,"MacEager","syntex_syntax::ext::base","`MacResult` implementation for the common case where you've already built each form of AST that you might return.",null,null],[12,"expr","","",186,null],[12,"pat","","",186,null],[12,"items","","",186,null],[12,"impl_items","","",186,null],[12,"trait_items","","",186,null],[12,"stmts","","",186,null],[12,"ty","","",186,null],[3,"DummyResult","","Fill-in macro expansion result, to allow compilation to continue after hitting errors.",null,null],[3,"BlockInfo","","",null,null],[12,"macros_escape","","Should macros escape from this scope?",187,null],[3,"DummyMacroLoader","","",null,null],[3,"ExtCtxt","","One of these is made during expansion and incrementally updated as we go; when a macro expansion occurs, the resulting nodes have the backtrace() -> expn_info of their expansion context stored into their span.",null,null],[12,"parse_sess","","",188,null],[12,"cfg","","",188,null],[12,"backtrace","","",188,null],[12,"ecfg","","",188,null],[12,"crate_root","","",188,null],[12,"loader","","",188,null],[12,"mod_path","","",188,null],[12,"exported_macros","","",188,null],[12,"syntax_env","","",188,null],[12,"recursion_count","","",188,null],[12,"filename","","",188,null],[12,"mod_path_stack","","",188,null],[12,"in_block","","",188,null],[3,"SyntaxEnv","","In order to have some notion of scoping for macros, we want to implement the notion of a transformation environment.",null,null],[12,"names","","All bang-style macro/extension names encountered so far; to be used for diagnostics in resolve",189,null],[4,"Annotatable","","",null,null],[13,"Item","","",190,null],[13,"TraitItem","","",190,null],[13,"ImplItem","","",190,null],[4,"SyntaxExtension","","An enum representing the different kinds of syntax extensions.",null,null],[13,"MultiDecorator","","A syntax extension that is attached to an item and creates new items based upon it.",191,null],[13,"MultiModifier","","A syntax extension that is attached to an item and modifies it in-place. More flexible version than Modifier.",191,null],[13,"NormalTT","","A normal, function-like syntax extension.",191,null],[13,"IdentTT","","A function-like syntax extension that has an extra ident before the block.",191,null],[13,"MacroRulesTT","","Represents `macro_rules!` itself.",191,null],[5,"expr_to_string","","Extract a string literal from the macro expanded version of `expr`, emitting `err_msg` if `expr` is not a string literal. This does not stop compilation on error, merely emits a non-fatal error and returns None.",null,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"str"}],"output":{"name":"option"}}],[5,"check_zero_tts","","Non-fatally assert that `tts` is empty. Note that this function returns even when `tts` is non-empty, macros that need to stop compilation should call `cx.parse_sess.span_diagnostic.abort_if_errors()` (this should be done as rarely as possible).",null,null],[5,"get_single_str_from_tts","","Extract the string literal from the first token of `tts`. If this is not a string literal, emit an error and return None.",null,null],[5,"get_exprs_from_tts","","Extract comma-separated expressions from `tts`. If there is a parsing error, emit a non-fatal error and return None.",null,null],[6,"MacroExpanderFn","","",null,null],[6,"IdentMacroExpanderFn","","",null,null],[6,"NamedSyntaxExtension","","",null,null],[8,"MultiItemDecorator","","",null,null],[10,"expand","","",192,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"},{"name":"fnmut"}],"output":null}],[8,"MultiItemModifier","","",null,null],[10,"expand","","",193,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"metaitem"},{"name":"annotatable"}],"output":{"name":"vec"}}],[8,"TTMacroExpander","","Represents a thing that maps token trees to Macro Results",null,null],[10,"expand","","",194,null],[8,"IdentMacroExpander","","",null,null],[10,"expand","","",195,{"inputs":[{"name":"self"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"box"}}],[8,"MacResult","","The result of a macro expansion. The return values of the various methods are spliced into the AST at the callsite of the macro.",null,null],[11,"make_expr","","Create an expression.",196,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","Create zero or more items.",196,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","Create zero or more impl items.",196,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","Create zero or more trait items.",196,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","Create a pattern.",196,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","Create zero or more statements.",196,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",196,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[8,"MacroLoader","","",null,null],[10,"load_crate","","",197,{"inputs":[{"name":"self"},{"name":"item"},{"name":"bool"}],"output":{"name":"vec"}}],[11,"fmt","","",190,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",190,{"inputs":[{"name":"self"}],"output":{"name":"annotatable"}}],[11,"attrs","","",190,null],[11,"map_attrs","","",190,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"attrs","","",190,null],[11,"fold_attrs","","",190,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"annotatable"}}],[11,"expect_item","","",190,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"map_item_or","","",190,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"annotatable"}}],[11,"expect_trait_item","","",190,{"inputs":[{"name":"self"}],"output":{"name":"traititem"}}],[11,"expect_impl_item","","",190,{"inputs":[{"name":"self"}],"output":{"name":"implitem"}}],[11,"fold_with","","",190,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"smallvector"}}],[11,"into","","",190,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"default","","",186,{"inputs":[],"output":{"name":"maceager"}}],[11,"expr","","",186,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"pat","","",186,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"items","","",186,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"impl_items","","",186,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"trait_items","","",186,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"stmts","","",186,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"ty","","",186,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"make_expr","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"dummyresult"}}],[11,"any","","Create a default MacResult that can be anything.",198,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"expr","","Create a default MacResult that can only be an expression.",198,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"raw_expr","","A plain dummy expression.",198,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"raw_pat","","A plain dummy pattern.",198,{"inputs":[{"name":"span"}],"output":{"name":"pat"}}],[11,"raw_ty","","",198,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"make_expr","","",198,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",198,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",198,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",198,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",198,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",198,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",198,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"new","","",187,{"inputs":[],"output":{"name":"blockinfo"}}],[11,"load_crate","","",199,{"inputs":[{"name":"self"},{"name":"item"},{"name":"bool"}],"output":{"name":"vec"}}],[11,"new","","",188,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"expansionconfig"},{"name":"macroloader"}],"output":{"name":"extctxt"}}],[11,"expander","","Returns a `Folder` for deeply expanding all macros in an AST node.",188,{"inputs":[{"name":"self"}],"output":{"name":"macroexpander"}}],[11,"new_parser_from_tts","","",188,null],[11,"codemap","","",188,{"inputs":[{"name":"self"}],"output":{"name":"codemap"}}],[11,"parse_sess","","",188,{"inputs":[{"name":"self"}],"output":{"name":"parsesess"}}],[11,"cfg","","",188,{"inputs":[{"name":"self"}],"output":{"name":"crateconfig"}}],[11,"call_site","","",188,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"backtrace","","",188,{"inputs":[{"name":"self"}],"output":{"name":"expnid"}}],[11,"expansion_cause","","Returns span for the macro which originally caused the current expansion to happen.",188,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"mod_push","","",188,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"mod_pop","","",188,{"inputs":[{"name":"self"}],"output":null}],[11,"mod_path","","",188,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"bt_push","","",188,{"inputs":[{"name":"self"},{"name":"expninfo"}],"output":null}],[11,"bt_pop","","",188,{"inputs":[{"name":"self"}],"output":null}],[11,"insert_macro","","",188,{"inputs":[{"name":"self"},{"name":"macrodef"}],"output":null}],[11,"struct_span_warn","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_err","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"struct_span_fatal","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",188,null],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping compilation.",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_warn","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"str"}],"output":null}],[11,"span_unimpl","","",188,null],[11,"span_bug","","",188,null],[11,"bug","","",188,null],[11,"trace_macros","","",188,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_trace_macros","","",188,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"ident_of","","",188,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"ident"}}],[11,"std_path","","",188,null],[11,"name_of","","",188,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"name"}}],[11,"suggest_macro_name","","",188,{"inputs":[{"name":"self"},{"name":"str"},{"name":"diagnosticbuilder"}],"output":null}],[11,"push_frame","","",189,{"inputs":[{"name":"self"}],"output":null}],[11,"pop_frame","","",189,{"inputs":[{"name":"self"}],"output":null}],[11,"find","","",189,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"option"}}],[11,"insert","","",189,{"inputs":[{"name":"self"},{"name":"name"},{"name":"syntaxextension"}],"output":null}],[11,"info","","",189,{"inputs":[{"name":"self"}],"output":{"name":"blockinfo"}}],[11,"is_crate_root","","",189,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"build","syntex_syntax::ext","",null,null],[8,"AstBuilder","syntex_syntax::ext::build","",null,null],[10,"path","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[10,"path_ident","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[10,"path_global","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[10,"path_all","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"path"}}],[10,"qpath","","",200,null],[10,"qpath_all","","",200,null],[10,"ty_mt","","",200,{"inputs":[{"name":"self"},{"name":"p"},{"name":"mutability"}],"output":{"name":"mutty"}}],[10,"ty","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"tykind"}],"output":{"name":"p"}}],[10,"ty_path","","",200,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"p"}}],[10,"ty_sum","","",200,{"inputs":[{"name":"self"},{"name":"path"},{"name":"typarambounds"}],"output":{"name":"p"}}],[10,"ty_ident","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[10,"ty_rptr","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"option"},{"name":"mutability"}],"output":{"name":"p"}}],[10,"ty_ptr","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"mutability"}],"output":{"name":"p"}}],[10,"ty_option","","",200,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"ty_infer","","",200,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"ty_vars","","",200,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[10,"ty_vars_global","","",200,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[10,"typaram","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"typarambounds"},{"name":"option"}],"output":{"name":"typaram"}}],[10,"trait_ref","","",200,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"traitref"}}],[10,"poly_trait_ref","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"name":"polytraitref"}}],[10,"typarambound","","",200,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"typarambound"}}],[10,"lifetime","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"lifetime"}}],[10,"lifetime_def","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"vec"}],"output":{"name":"lifetimedef"}}],[10,"stmt_expr","","",200,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_semi","","",200,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_let","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"stmt_let_typed","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"stmt_item","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"stmt"}}],[10,"block","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"block_expr","","",200,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"exprkind"}],"output":{"name":"p"}}],[10,"expr_path","","",200,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"p"}}],[10,"expr_qpath","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"qself"},{"name":"path"}],"output":{"name":"p"}}],[10,"expr_ident","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[10,"expr_self","","",200,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_binary","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"binopkind"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_deref","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_unary","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"unop"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_addr_of","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_mut_addr_of","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_field_access","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[10,"expr_tup_field_access","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"usize"}],"output":{"name":"p"}}],[10,"expr_call","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_call_ident","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_call_global","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_method_call","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_block","","",200,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_cast","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"field_imm","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"field"}}],[10,"expr_struct","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_struct_ident","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_lit","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"litkind"}],"output":{"name":"p"}}],[10,"expr_usize","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"p"}}],[10,"expr_isize","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"isize"}],"output":{"name":"p"}}],[10,"expr_u8","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u8"}],"output":{"name":"p"}}],[10,"expr_u32","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u32"}],"output":{"name":"p"}}],[10,"expr_bool","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"}],"output":{"name":"p"}}],[10,"expr_vec","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_vec_ng","","",200,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_vec_slice","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_str","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[10,"expr_some","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_none","","",200,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_break","","",200,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_tuple","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_fail","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[10,"expr_unreachable","","",200,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"expr_ok","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_err","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"expr_try","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"patkind"}],"output":{"name":"p"}}],[10,"pat_wild","","",200,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"pat_lit","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat_ident","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[10,"pat_ident_binding_mode","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"bindingmode"}],"output":{"name":"p"}}],[10,"pat_enum","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[10,"pat_struct","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[10,"pat_tuple","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"pat_some","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat_none","","",200,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[10,"pat_ok","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"pat_err","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"arm","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"arm"}}],[10,"arm_unreachable","","",200,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"arm"}}],[10,"expr_match","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[10,"expr_if","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[10,"expr_loop","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda_fn_decl","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"span"}],"output":{"name":"p"}}],[10,"lambda","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda0","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda1","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[10,"lambda_expr","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda_expr_0","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[10,"lambda_expr_1","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[10,"lambda_stmts","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[10,"lambda_stmts_0","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[10,"lambda_stmts_1","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"ident"}],"output":{"name":"p"}}],[10,"item","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"itemkind"}],"output":{"name":"p"}}],[10,"arg","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"arg"}}],[10,"fn_decl","","",200,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_fn_poly","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"generics"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_fn","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"variant","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"variant"}}],[10,"item_enum_poly","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"},{"name":"generics"}],"output":{"name":"p"}}],[10,"item_enum","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"}],"output":{"name":"p"}}],[10,"item_struct_poly","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"},{"name":"generics"}],"output":{"name":"p"}}],[10,"item_struct","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"}],"output":{"name":"p"}}],[10,"item_mod","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[10,"item_static","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"mutability"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_const","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_ty_poly","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"generics"}],"output":{"name":"p"}}],[10,"item_ty","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[10,"attribute","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"attribute"}}],[10,"meta_word","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[10,"meta_list","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"internedstring"},{"name":"vec"}],"output":{"name":"p"}}],[10,"meta_name_value","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"internedstring"},{"name":"litkind"}],"output":{"name":"p"}}],[10,"item_use","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"p"}],"output":{"name":"p"}}],[10,"item_use_simple","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"path"}],"output":{"name":"p"}}],[10,"item_use_simple_","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"ident"},{"name":"path"}],"output":{"name":"p"}}],[10,"item_use_list","","",200,null],[10,"item_use_glob","","",200,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"p"}}],[11,"path","syntex_syntax::ext::base","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[11,"path_ident","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"path_global","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[11,"path_all","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"path"}}],[11,"qpath","","Constructs a qualified path.",188,null],[11,"qpath_all","","Constructs a qualified path.",188,null],[11,"ty_mt","","",188,{"inputs":[{"name":"self"},{"name":"p"},{"name":"mutability"}],"output":{"name":"mutty"}}],[11,"ty","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"tykind"}],"output":{"name":"p"}}],[11,"ty_path","","",188,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"p"}}],[11,"ty_sum","","",188,{"inputs":[{"name":"self"},{"name":"path"},{"name":"typarambounds"}],"output":{"name":"p"}}],[11,"ty_ident","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"ty_rptr","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"option"},{"name":"mutability"}],"output":{"name":"p"}}],[11,"ty_ptr","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"mutability"}],"output":{"name":"p"}}],[11,"ty_option","","",188,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"ty_infer","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"typaram","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"typarambounds"},{"name":"option"}],"output":{"name":"typaram"}}],[11,"ty_vars","","",188,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[11,"ty_vars_global","","",188,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"vec"}}],[11,"trait_ref","","",188,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"traitref"}}],[11,"poly_trait_ref","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"}],"output":{"name":"polytraitref"}}],[11,"typarambound","","",188,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"typarambound"}}],[11,"lifetime","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"}],"output":{"name":"lifetime"}}],[11,"lifetime_def","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"name"},{"name":"vec"}],"output":{"name":"lifetimedef"}}],[11,"stmt_expr","","",188,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_semi","","",188,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_let","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"stmt_let_typed","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"stmt_item","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"stmt"}}],[11,"block_expr","","",188,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"block","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"exprkind"}],"output":{"name":"p"}}],[11,"expr_path","","",188,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"p"}}],[11,"expr_qpath","","Constructs a QPath expression.",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"qself"},{"name":"path"}],"output":{"name":"p"}}],[11,"expr_ident","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"expr_self","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_binary","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"binopkind"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_deref","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_unary","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"unop"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_field_access","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"expr_tup_field_access","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"usize"}],"output":{"name":"p"}}],[11,"expr_addr_of","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_mut_addr_of","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_call","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_call_ident","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_call_global","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_method_call","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_block","","",188,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"field_imm","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"field"}}],[11,"expr_struct","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_struct_ident","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_lit","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"litkind"}],"output":{"name":"p"}}],[11,"expr_usize","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"usize"}],"output":{"name":"p"}}],[11,"expr_isize","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"isize"}],"output":{"name":"p"}}],[11,"expr_u32","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u32"}],"output":{"name":"p"}}],[11,"expr_u8","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"u8"}],"output":{"name":"p"}}],[11,"expr_bool","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"bool"}],"output":{"name":"p"}}],[11,"expr_vec","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_vec_ng","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_vec_slice","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_str","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[11,"expr_cast","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_some","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_none","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_break","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_tuple","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_fail","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[11,"expr_unreachable","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_ok","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_err","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_try","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"patkind"}],"output":{"name":"p"}}],[11,"pat_wild","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"pat_lit","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_ident","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"pat_ident_binding_mode","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"bindingmode"}],"output":{"name":"p"}}],[11,"pat_enum","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_struct","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_tuple","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_some","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_none","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"p"}}],[11,"pat_ok","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_err","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"arm","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"arm"}}],[11,"arm_unreachable","","",188,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"arm"}}],[11,"expr_match","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_if","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[11,"expr_loop","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_fn_decl","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"span"}],"output":{"name":"p"}}],[11,"lambda","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda0","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda1","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"lambda_expr","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_expr_0","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_expr_1","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"lambda_stmts","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"lambda_stmts_0","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"lambda_stmts_1","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"vec"},{"name":"ident"}],"output":{"name":"p"}}],[11,"arg","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"arg"}}],[11,"fn_decl","","",188,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"item","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"itemkind"}],"output":{"name":"p"}}],[11,"item_fn_poly","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"generics"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_fn","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"variant","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"variant"}}],[11,"item_enum_poly","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_enum","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"enumdef"}],"output":{"name":"p"}}],[11,"item_struct","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"}],"output":{"name":"p"}}],[11,"item_struct_poly","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"variantdata"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_mod","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"item_static","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"mutability"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_const","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_ty_poly","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_ty","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[11,"attribute","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"p"}],"output":{"name":"attribute"}}],[11,"meta_word","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[11,"meta_list","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"internedstring"},{"name":"vec"}],"output":{"name":"p"}}],[11,"meta_name_value","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"internedstring"},{"name":"litkind"}],"output":{"name":"p"}}],[11,"item_use","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_use_simple","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"path"}],"output":{"name":"p"}}],[11,"item_use_simple_","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"ident"},{"name":"path"}],"output":{"name":"p"}}],[11,"item_use_list","","",188,null],[11,"item_use_glob","","",188,{"inputs":[{"name":"self"},{"name":"span"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"p"}}],[0,"decorator","syntex_syntax::ext","",null,null],[5,"expand_annotatable","syntex_syntax::ext::decorator","",null,{"inputs":[{"name":"annotatable"},{"name":"macroexpander"}],"output":{"name":"smallvector"}}],[0,"env","syntex_syntax::ext","",null,null],[5,"expand_option_env","syntex_syntax::ext::env","",null,null],[5,"expand_env","","",null,null],[0,"expand","syntex_syntax::ext","",null,null],[3,"MacroExpander","syntex_syntax::ext::expand","A tree-folder that performs macro expansion",null,null],[12,"cx","","",201,null],[12,"single_step","","",201,null],[12,"keep_macs","","",201,null],[3,"ExpansionConfig","","",null,null],[12,"crate_name","","",202,null],[12,"features","","",202,null],[12,"recursion_limit","","",202,null],[12,"trace_mac","","",202,null],[12,"should_test","","",202,null],[5,"expand_expr","","",null,{"inputs":[{"name":"expr"},{"name":"macroexpander"}],"output":{"name":"p"}}],[5,"expand_item","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"smallvector"}}],[5,"expand_multi_modified","","",null,{"inputs":[{"name":"annotatable"},{"name":"macroexpander"}],"output":{"name":"smallvector"}}],[5,"expand_type","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"p"}}],[5,"expand_crate","","",null,{"inputs":[{"name":"extctxt"},{"name":"vec"},{"name":"crate"}],"output":{"name":"crate"}}],[5,"expand_crate_with_expander","","",null,{"inputs":[{"name":"macroexpander"},{"name":"vec"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"new","","",201,{"inputs":[{"name":"extctxt"},{"name":"bool"},{"name":"bool"}],"output":{"name":"macroexpander"}}],[11,"fold_crate","","",201,{"inputs":[{"name":"self"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold_expr","","",201,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_opt_expr","","",201,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"fold_pat","","",201,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_item","","",201,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_stmt","","",201,{"inputs":[{"name":"self"},{"name":"stmt"}],"output":{"name":"smallvector"}}],[11,"fold_block","","",201,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_trait_item","","",201,{"inputs":[{"name":"self"},{"name":"traititem"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",201,{"inputs":[{"name":"self"},{"name":"implitem"}],"output":{"name":"smallvector"}}],[11,"fold_ty","","",201,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"p"}}],[11,"default","","",202,{"inputs":[{"name":"string"}],"output":{"name":"expansionconfig"}}],[11,"enable_quotes","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_asm","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_log_syntax","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_concat_idents","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_trace_macros","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_allow_internal_unstable","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_custom_derive","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"enable_pushpop_unsafe","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"hygiene","syntex_syntax::ext","Machinery for hygienic macros, inspired by the MTWT[1] paper.",null,null],[3,"SyntaxContext","syntex_syntax::ext::hygiene","A SyntaxContext represents a chain of macro expansions (represented by marks).",null,null],[12,"0","","",203,null],[3,"SyntaxContextData","","",null,null],[12,"outer_mark","","",204,null],[12,"prev_ctxt","","",204,null],[3,"Mark","","A mark represents a unique id associated with a macro expansion.",null,null],[5,"reset_hygiene_data","","",null,{"inputs":[],"output":null}],[11,"clone","","",203,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontext"}}],[11,"eq","","",203,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"self"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"hash","","",203,null],[11,"encode","","",203,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",203,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"default","","",203,{"inputs":[],"output":{"name":"syntaxcontext"}}],[11,"clone","","",204,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontextdata"}}],[11,"clone","","",205,{"inputs":[{"name":"self"}],"output":{"name":"mark"}}],[11,"eq","","",205,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"bool"}}],[11,"hash","","",205,null],[11,"fmt","","",205,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",205,{"inputs":[],"output":{"name":"mark"}}],[11,"fresh","","",205,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",203,{"inputs":[],"output":{"name":"self"}}],[11,"data","","",203,{"inputs":[{"name":"self"}],"output":{"name":"syntaxcontextdata"}}],[11,"apply_mark","","Extend a syntax context with a given mark",203,{"inputs":[{"name":"self"},{"name":"mark"}],"output":{"name":"syntaxcontext"}}],[11,"source","","If `ident` is macro expanded, return the source ident from the macro definition and the mark of the expansion that created the macro definition.",203,null],[11,"fmt","","",203,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"proc_macro_shim","syntex_syntax::ext","This is a shim file to ease the transition to the final procedural macro interface for Macros 2.0. It currently exposes the `libsyntax` operations that the quasiquoter's output needs to compile correctly, along with the following operators:",null,null],[5,"build_block_emitter","syntex_syntax::ext::proc_macro_shim","Take a `ExtCtxt`, `Span`, and `TokenStream`, and produce a Macro Result that parses the TokenStream as a block and returns it as an `Expr`.",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"}],"output":{"name":"box"}}],[0,"prelude","","",null,null],[17,"DUMMY_SP","syntex_syntax::ext::proc_macro_shim::prelude","",null,null],[3,"Span","","Spans represent a region of code, used for error reporting. Positions in spans are absolute positions from the beginning of the codemap, not positions relative to FileMaps. Methods on the CodeMap can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in codemap and you cannot assume that the length of the span = hi - lo; there may be space in the BytePos range between files.",null,null],[12,"lo","","",206,null],[12,"hi","","",206,null],[12,"expn_id","","Information about where the macro came from, if this piece of code was created by a macro expansion.",206,null],[0,"quote","syntex_syntax::ext","",null,null],[5,"parse_expr_panic","syntex_syntax::ext::quote","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_pat_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_arm_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arm"}}],[5,"parse_ty_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_stmt_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_attribute_panic","","",null,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"attribute"}}],[5,"parse_arg_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arg"}}],[5,"parse_block_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_meta_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_path_panic","","",null,{"inputs":[{"name":"parser"},{"name":"pathstyle"}],"output":{"name":"path"}}],[5,"expand_quote_tokens","","",null,null],[5,"expand_quote_expr","","",null,null],[5,"expand_quote_item","","",null,null],[5,"expand_quote_pat","","",null,null],[5,"expand_quote_arm","","",null,null],[5,"expand_quote_ty","","",null,null],[5,"expand_quote_stmt","","",null,null],[5,"expand_quote_attr","","",null,null],[5,"expand_quote_arg","","",null,null],[5,"expand_quote_block","","",null,null],[5,"expand_quote_meta_item","","",null,null],[5,"expand_quote_path","","",null,null],[5,"expand_quote_matcher","","",null,null],[0,"rt","","Quasiquoting works via token trees.",null,null],[3,"BytePos","syntex_syntax::ext::quote::rt","A byte offset. Keep this small (currently 32-bits), as AST contains a lot of them.",null,null],[12,"0","","",207,null],[3,"Span","","Spans represent a region of code, used for error reporting. Positions in spans are absolute positions from the beginning of the codemap, not positions relative to FileMaps. Methods on the CodeMap can be used to relate spans back to the original source. You must be careful if the span crosses more than one file - you will not be able to use many of the functions on spans in codemap and you cannot assume that the length of the span = hi - lo; there may be space in the BytePos range between files.",null,null],[12,"lo","","",206,null],[12,"hi","","",206,null],[12,"expn_id","","Information about where the macro came from, if this piece of code was created by a macro expansion.",206,null],[17,"DUMMY_SP","","",null,null],[8,"ToTokens","","",null,null],[10,"to_tokens","","",208,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[8,"ExtParseUtils","","",null,null],[10,"parse_item","","",209,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"p"}}],[10,"parse_expr","","",209,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"p"}}],[10,"parse_stmt","","",209,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"stmt"}}],[10,"parse_tts","","",209,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::tokenstream","",166,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::codemap","",118,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::ast","",18,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",21,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",26,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::ptr","",162,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::ast","",45,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::ptr","",162,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::ast","",44,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::ptr","",162,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",162,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::ast","",37,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::ptr","",162,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",162,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntex_syntax::ext::quote::rt","",115,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",210,{"inputs":[{"name":"self"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"parse_item","syntex_syntax::ext::base","",188,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_stmt","","",188,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"stmt"}}],[11,"parse_expr","","",188,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_tts","","",188,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"vec"}}],[0,"source_util","syntex_syntax::ext","",null,null],[5,"expand_line","syntex_syntax::ext::source_util","line!(): expands to the current line number",null,null],[5,"expand_column","","",null,null],[5,"expand_file","","file!(): expands to the current filename */ The filemap (`loc.file`) contains a bunch more information we could spit out if we wanted.",null,null],[5,"expand_stringify","","",null,null],[5,"expand_mod","","",null,null],[5,"expand_include","","include! : parse the given file as an expr This is generally a bad idea because it's going to behave unhygienically.",null,null],[5,"expand_include_str","","",null,null],[5,"expand_include_bytes","","",null,null],[0,"tt","syntex_syntax::ext","",null,null],[0,"transcribe","syntex_syntax::ext::tt","",null,null],[3,"TtReader","syntex_syntax::ext::tt::transcribe","",null,null],[12,"sp_diag","","",211,null],[12,"cur_tok","","",211,null],[12,"cur_span","","",211,null],[12,"desugar_doc_comments","","Transform doc comments. Only useful in macro invocations",211,null],[12,"fatal_errs","","",211,null],[5,"new_tt_reader","","This can do Macro-By-Example transcription. On the other hand, if `src` contains no `TokenTree::Sequence`s, `MatchNt`s or `SubstNt`s, `interp` can (and should) be None.",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"option"},{"name":"vec"}],"output":{"name":"ttreader"}}],[5,"new_tt_reader_with_doc_flag","","The extra `desugar_doc_comments` flag enables reading doc comments like any other attribute which consists of `meta` and surrounding #[ ] tokens.",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"option"},{"name":"vec"},{"name":"bool"}],"output":{"name":"ttreader"}}],[5,"tt_next_token","","Return the next token from the TtReader. EFFECT: advances the reader's token field",null,{"inputs":[{"name":"ttreader"}],"output":{"name":"tokenandspan"}}],[11,"clone","","",211,{"inputs":[{"name":"self"}],"output":{"name":"ttreader"}}],[0,"macro_parser","syntex_syntax::ext::tt","This is an Earley-like parser, without support for in-grammar nonterminals, only by calling out to the main rust parser for named nonterminals (which it commits to fully when it hits one in a grammar). This means that there are no completer or predictor rules, and therefore no need to store one column per token: instead, there's a set of current Earley items and a set of next ones. Instead of NTs, we have a special case for Kleene star. The big-O, in pathological cases, is worse than traditional Earley parsing, but it's an easier fit for Macro-by-Example-style rules, and I think the overhead is lower. (In order to prevent the pathological case, we'd need to lazily construct the resulting `NamedMatch`es at the very end. It'd be a pain, and require more memory to keep around old items, but it would also save overhead)",null,null],[3,"MatcherPos","syntex_syntax::ext::tt::macro_parser","",null,null],[4,"NamedMatch","","NamedMatch is a pattern-match result for a single token::MATCH_NONTERMINAL: so it is associated with a single ident in a parse, and all `MatchedNonterminal`s in the NamedMatch have the same nonterminal type (expr, item, etc). Each leaf in a single NamedMatch corresponds to a single token::MATCH_NONTERMINAL in the TokenTree that produced it.",null,null],[13,"MatchedSeq","","",212,null],[13,"MatchedNonterminal","","",212,null],[4,"ParseResult","","",null,null],[13,"Success","","",213,null],[13,"Failure","","Arm failed to match",213,null],[13,"Error","","Fatal error (malformed macro?). Abort compilation.",213,null],[5,"count_names","","",null,null],[5,"initial_matcher_pos","","",null,{"inputs":[{"name":"rc"},{"name":"option"},{"name":"bytepos"}],"output":{"name":"box"}}],[5,"nameize","","",null,null],[5,"token_name_eq","","Perform a token equality check, ignoring syntax context (that is, an unhygienic comparison)",null,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[5,"parse","","",null,null],[5,"parse_nt","","",null,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"}],"output":{"name":"nonterminal"}}],[6,"NamedParseResult","","",null,null],[6,"PositionalParseResult","","",null,null],[11,"clone","","",214,{"inputs":[{"name":"self"}],"output":{"name":"matcherpos"}}],[0,"macro_rules","syntex_syntax::ext::tt","",null,null],[5,"compile","syntex_syntax::ext::tt::macro_rules","Converts a `macro_rules!` invocation into a syntax extension.",null,{"inputs":[{"name":"extctxt"},{"name":"macrodef"}],"output":{"name":"syntaxextension"}}],[14,"panictry","syntex_syntax","",null,null],[14,"register_diagnostic","","",null,null],[14,"span_fatal","","",null,null],[14,"span_err","","",null,null],[14,"span_warn","","",null,null],[14,"span_err_or_warn","","",null,null],[14,"struct_span_fatal","","",null,null],[14,"struct_span_err","","",null,null],[14,"struct_span_warn","","",null,null],[14,"struct_span_err_or_warn","","",null,null],[14,"span_note","","",null,null],[14,"span_help","","",null,null],[14,"help","","",null,null],[14,"register_diagnostics","","",null,null],[14,"register_long_diagnostics","","",null,null],[14,"walk_list","","",null,null],[11,"move_flat_map","syntex_syntax::ptr","",162,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"name","","",162,{"inputs":[{"name":"self"}],"output":{"name":"internedstring"}}],[11,"value_str","","",162,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"meta_item_list","","",162,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_word","","",162,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_value_str","","",162,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_meta_item_list","","",162,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"span","","",162,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"attrs","","",162,null],[11,"map_attrs","","",162,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"is_eof","syntex_syntax::ext::tt::transcribe","",211,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_next_token","","",211,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fatal","","",211,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",211,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"emit_fatal_errors","","",211,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","",211,{"inputs":[{"name":"self"}],"output":{"name":"tokenandspan"}}],[11,"end_point","syntex_syntax::ext::quote::rt","Returns a new span representing just the end-point of this span",206,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",206,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"span"}}],[11,"contains","","",206,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",206,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"merge","","Returns `Some(span)`, a union of `self` and `other`, on overlap.",206,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",206,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"option"}}],[11,"hash","","",207,null],[11,"hash","","",206,null],[11,"decode","","",207,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",206,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"sub","","",207,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"from_usize","","",207,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",207,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cmp","","",207,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"ordering"}}],[11,"clone","","",206,{"inputs":[{"name":"self"}],"output":{"name":"span"}}],[11,"clone","","",207,{"inputs":[{"name":"self"}],"output":{"name":"bytepos"}}],[11,"partial_cmp","","",207,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"lt","","",207,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",207,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",207,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",207,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",207,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"eq","","",206,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"self"},{"name":"span"}],"output":{"name":"bool"}}],[11,"fmt","","",206,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",207,{"inputs":[{"name":"self"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"encode","","",207,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",206,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}]],"paths":[[3,"ErrorInfo"],[3,"ErrorMetadata"],[3,"ErrorLocation"],[3,"Interner"],[3,"NodeCounter"],[4,"AssocOp"],[4,"Fixity"],[3,"SmallVector"],[3,"IntoIter"],[8,"MoveMap"],[3,"ThinVec"],[3,"JsonEmitter"],[4,"Os"],[4,"Abi"],[4,"Architecture"],[4,"AbiArchitecture"],[3,"AbiData"],[3,"Name"],[3,"Ident"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[3,"Stmt"],[3,"Local"],[3,"Arm"],[3,"Field"],[3,"Expr"],[3,"QSelf"],[3,"Mac_"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItem"],[3,"ImplItem"],[3,"TypeBinding"],[3,"Ty"],[3,"BareFnTy"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[3,"AttrId"],[3,"Attribute_"],[3,"TraitRef"],[3,"PolyTraitRef"],[3,"StructField"],[3,"Item"],[3,"ForeignItem"],[3,"MacroDef"],[4,"PathParameters"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[4,"WherePredicate"],[4,"MetaItemKind"],[4,"BindingMode"],[4,"PatKind"],[4,"Mutability"],[4,"BinOpKind"],[4,"UnOp"],[4,"StmtKind"],[4,"MacStmtStyle"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"RangeLimits"],[4,"ExprKind"],[4,"CaptureBy"],[4,"StrStyle"],[4,"LitIntType"],[4,"LitKind"],[4,"TraitItemKind"],[4,"ImplItemKind"],[4,"IntTy"],[4,"UintTy"],[4,"FloatTy"],[4,"TyKind"],[4,"AsmDialect"],[4,"SelfKind"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"PathListItemKind"],[4,"ViewPath_"],[4,"AttrStyle"],[4,"Visibility"],[4,"VariantData"],[4,"ItemKind"],[4,"ForeignItemKind"],[3,"Stability"],[3,"RustcDeprecation"],[3,"Deprecation"],[4,"InlineAttr"],[4,"StabilityLevel"],[4,"ReprAttr"],[4,"IntType"],[8,"AttrMetaMethods"],[8,"AttributeMethods"],[8,"HasAttrs"],[6,"Attribute"],[6,"MetaItem"],[6,"Variant"],[3,"Spanned"],[3,"NameAndSpan"],[3,"ExpnInfo"],[3,"CodeMap"],[4,"ExpnFormat"],[8,"FileLoader"],[3,"RealFileLoader"],[3,"StripUnconfigured"],[4,"EntryPointType"],[3,"Features"],[4,"AttributeType"],[4,"AttributeGate"],[4,"GateIssue"],[4,"UnstableFeatures"],[3,"GatedCfg"],[8,"Folder"],[3,"ParseSess"],[3,"Parser"],[3,"ModulePath"],[3,"ModulePathSuccess"],[3,"ModulePathError"],[4,"PathStyle"],[4,"BoundParsingMode"],[4,"SemiColonMode"],[4,"TokenType"],[4,"LhsExpr"],[3,"Restrictions"],[3,"TokenAndSpan"],[3,"StringReader"],[3,"Comment"],[3,"Literal"],[4,"CommentStyle"],[8,"Reader"],[4,"BinOpToken"],[4,"DelimToken"],[4,"SpecialMacroVar"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[3,"Keyword"],[3,"InternedString"],[3,"SeqSep"],[4,"ObsoleteSyntax"],[8,"ParserObsoleteMethods"],[3,"P"],[3,"Delimited"],[3,"SequenceRepetition"],[4,"KleeneOp"],[4,"TokenTree"],[4,"InternalTS"],[3,"TokenStream"],[3,"Iter"],[3,"Split"],[4,"FnKind"],[8,"Visitor"],[3,"Printer"],[4,"Breaks"],[4,"Token"],[4,"PrintStackBreak"],[3,"BreakToken"],[3,"BeginToken"],[3,"PrintStackElem"],[3,"CurrentCommentAndLiteral"],[3,"State"],[4,"AnnNode"],[8,"PpAnn"],[8,"PrintState"],[3,"NoAnn"],[3,"MacEager"],[3,"BlockInfo"],[3,"ExtCtxt"],[3,"SyntaxEnv"],[4,"Annotatable"],[4,"SyntaxExtension"],[8,"MultiItemDecorator"],[8,"MultiItemModifier"],[8,"TTMacroExpander"],[8,"IdentMacroExpander"],[8,"MacResult"],[8,"MacroLoader"],[3,"DummyResult"],[3,"DummyMacroLoader"],[8,"AstBuilder"],[3,"MacroExpander"],[3,"ExpansionConfig"],[3,"SyntaxContext"],[3,"SyntaxContextData"],[3,"Mark"],[3,"Span"],[3,"BytePos"],[8,"ToTokens"],[8,"ExtParseUtils"],[6,"Lit"],[3,"TtReader"],[4,"NamedMatch"],[4,"ParseResult"],[3,"MatcherPos"]]};
searchIndex["term"] = {"doc":"Terminal formatting library.","items":[[4,"Attr","term","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[4,"Error","","An error arising from interacting with the terminal.",null,null],[13,"Io","","Indicates an error from any underlying IO",1,null],[13,"TerminfoParsing","","Indicates an error during terminfo parsing",1,null],[13,"ParameterizedExpansion","","Indicates an error expanding a parameterized string from the terminfo database",1,null],[13,"NotSupported","","Indicates that the terminal does not support the requested operation.",1,null],[13,"TermUnset","","Indicates that the `TERM` environment variable was unset, and thus we were unable to detect which terminal we should be using.",1,null],[13,"TerminfoEntryNotFound","","Indicates that we were unable to find a terminfo entry for the requested terminal.",1,null],[13,"CursorDestinationInvalid","","Indicates that the cursor could not be moved to the requested position.",1,null],[13,"ColorOutOfRange","","Indicates that the terminal does not support displaying the requested color.",1,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn't be opened.",null,{"inputs":[],"output":{"name":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn't be opened.",null,{"inputs":[],"output":{"name":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",2,null],[12,"bools","","Map of capability name to boolean value",2,null],[12,"numbers","","Map of capability name to numeric value",2,null],[12,"strings","","Map of capability name to raw (unexpanded) string",2,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its parsed Terminfo database record.",null,null],[4,"Error","","An error from parsing a terminfo entry",null,null],[13,"BadMagic","","The \"magic\" number at the start of the file was wrong.",3,null],[13,"NotUtf8","","The names in the file were not valid UTF-8.",3,null],[13,"ShortNames","","The names section of the file was empty",3,null],[13,"TooManyBools","","More boolean parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyNumbers","","More number parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyStrings","","More string parameters are present in the file than this crate knows how to interpret.",3,null],[13,"InvalidLength","","The length of some field was not >= -1.",3,null],[13,"NamesMissingNull","","The names table was missing a trailing null terminator.",3,null],[13,"StringsMissingNull","","The strings table was missing a trailing null terminator.",3,null],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"parser","term::terminfo","`TermInfo` format parsing. ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames` is true",null,{"inputs":[{"name":"read"},{"name":"bool"}],"output":{"name":"result"}}],[5,"msys_terminfo","","Create a dummy `TermInfo` struct for msys terminals",null,{"inputs":[],"output":{"name":"terminfo"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Number","","",4,null],[13,"Words","","",4,null],[4,"Error","","An error from interpreting a parameterized string.",null,null],[13,"StackUnderflow","","Data was requested from the stack, but the stack didn't have enough elements.",5,null],[13,"TypeMismatch","","The type of the element(s) on top of the stack did not match the type that the operator wanted.",5,null],[13,"UnrecognizedFormatOption","","An unrecognized format option was used.",5,null],[13,"InvalidVariableName","","An invalid variable name was used.",5,null],[13,"InvalidParameterIndex","","An invalid parameter index was used.",5,null],[13,"MalformedCharacterConstant","","A malformed character constant was used.",5,null],[13,"IntegerConstantOverflow","","An integer constant was too large (overflowed an i32)",5,null],[13,"MalformedIntegerConstant","","A malformed integer constant was used.",5,null],[13,"FormatWidthOverflow","","A format width constant was too large (overflowed a usize)",5,null],[13,"FormatPrecisionOverflow","","A format precision constant was too large (overflowed a usize)",5,null],[5,"expand","","Expand a parameterized capability",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"param"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"variables"}}],[11,"new","","Return a new zero-initialized Variables",6,{"inputs":[],"output":{"name":"variables"}}],[11,"fmt","term::terminfo","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"terminfo"}}],[11,"from_env","","Create a `TermInfo` based on current environment.",2,{"inputs":[],"output":{"name":"result"}}],[11,"from_name","","Create a `TermInfo` for the named terminal.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_path","","Parse the given `TermInfo`.",2,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"apply_cap","","Retrieve a capability `cmd` and expand it with `params`, writing result to `out`.",2,null],[11,"reset","","Write the reset string to `out`.",2,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"terminfoterminal"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fg","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[11,"bg","","",7,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[11,"attr","","",7,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"result"}}],[11,"supports_attr","","",7,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"reset","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"supports_reset","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"supports_color","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cursor_up","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"delete_line","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"carriage_return","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",7,{"inputs":[{"name":"t"},{"name":"terminfo"}],"output":{"name":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",7,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[6,"Result","","The canonical `Result` type using this crate's Error type.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal (foreground/background colors etc).",null,null],[16,"Output","","The terminal's output writer type.",8,null],[10,"fg","","Sets the foreground color to the given color.",8,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[10,"bg","","Sets the background color to the given color.",8,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"result"}}],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(())` if the attribute is supported and was sent to the terminal, or `Err(e)` if there was an error or the attribute wasn't supported.",8,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"result"}}],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",8,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[10,"reset","","Resets all terminal attributes and colors to their defaults.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"supports_reset","","Returns true if reset is supported.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"supports_color","","Returns true if color is fully supported.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"cursor_up","","Moves the cursor up one line.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"delete_line","","Deletes the text from the cursor location to the end of the line.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"carriage_return","","Moves the cursor to the left edge of the current line.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"get_ref","","Gets an immutable reference to the stream inside",8,null],[10,"get_mut","","Gets a mutable reference to the stream inside",8,null],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",8,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attr"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}]],"paths":[[4,"Attr"],[4,"Error"],[3,"TermInfo"],[4,"Error"],[4,"Param"],[4,"Error"],[3,"Variables"],[3,"TerminfoTerminal"],[8,"Terminal"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-derived-property is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
initSearch(searchIndex);
